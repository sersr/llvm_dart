import '../lib/d.kc';

fn main() i32 {
  let bchar = BaseChar { 40 };
  let base = Base{1, 2};
  let base32 = Base32 {32};
  let basef32 = Basef32 {32};
  let base32p = Base32p {33, 34};
  let base64 = Base64 { 64, 65 };
  let basef64 = Basef64 { 66 };
  let base64Float = Base64Float { 67, 68, 69 };
  let base96 = Base96 {96, 97, 98};
  let base128 = Base128 {128.88, 129.002};
  let basebig = BaseBig {100, 101, 102, 103, 104};
  apiFnChar(bchar);
  apiFn(base);
  apiFn32(base32);
  apiFnf32(basef32);
  apiFn32p(base32p);
  apiFn64(base64);
  apiFnf64(basef64);
  apiFn64Float(base64Float);
  apiFn96(base96);
  apiFn128(base128);
  apiFnBig(basebig);

  print('----');
  run();
  0;
}
extern fn run();

extern struct BaseChar {
  y: u8,
}

extern struct Base {
  y: u8,
  x: u8,
}
extern struct Base32 {
  y: i32,
}
extern struct Basef32 {
  y: f32,
}
extern struct Base32p {
  y: i32,
  x: u8,
}
extern struct Base64 {
  y: f32,
  x: i32,
}
extern struct Basef64 {
  y: f64,
}
extern struct Base64Float {
  y: f32,
  x: f32,
  c: u8,
}
extern struct Base96 {
  y: f32,
  x: f32,
  z: f32,
}
extern struct Base128 {
  x: f64,
  y: f64,
}

extern struct BaseBig {
  y: i32,
  x: i32,
  z: i32,
  s: i32,
  h: i32,
}

extern fn apiFnChar(base: BaseChar);
extern fn apiFn(base: Base);
extern fn apiFn32(base: Base32);
extern fn apiFnf32(base: Basef32);
extern fn apiFn32p(base: Base32p);
extern fn apiFn64(base: Base64);
extern fn apiFnf64(base: Basef64);
extern fn apiFn64Float(base: Base64Float);
extern fn apiFn96(base: Base96);
extern fn apiFn128(base: Base128);
extern fn apiFnBig(base: BaseBig);