import "std:d.kc";

fn main(argc: i32, argv:  **i8) i32 {
    let arr = CArray { argc as u64, argv };
    let size = arr.getSize(); // u64

    let v = 0;

    while v < argc {
        kprintln(argv[v]);
        let d = argv[v];

        let di = 0;
        printf("i: %d: ", v);
        loop {
            let dv = d[di];
            if dv == 0 { break; }
            printf("%c", dv);
            di += 1;
        }
        printf("\n");
        v += 1;
    }

    final msize:usize = 128 - 32;

    let mm = malloc(msize) as *u8;
    let mi = 0;
    while mi < msize -1 {
        mm[mi] = 32 + mi;
        mi += 1;
    }

    mm[mize -1] = 0;

    kprintln(mm);
    free(mm);
    
    let i = 0;
    while i < size { // i as u64;
        kprintln(arr[i]);
        i += 1;
    }

    kprintln("----------------");
    let text = "single\n"
                "多行 \
\                 best
                 ..."
"
start
多行
测试
...
end";

    let hx = 50;
    let hy = 100;

    let hh = if i == 1{ hx } else { hy };

    kprintln(text);
    0;
}

fn kprint(text: *void) {
    write(stdout_fd, text, strlen(text));
}

fn kprintln(text: *void) {
  kprint(text);
  _write(stdout_fd, "\n", strlen("\n"));
}

static const stdin_fd = 0usize;
static const stdout_fd = 1usize;
static const stderr_fd = 2usize;

extern fn strlen(text: *void) usize;
extern fn write(fd: usize, buf: *void, charCount: usize) usize;
extern fn _write(fd: usize, buf: *void, charCount: usize) usize;
extern fn malloc(size: usize) *void;
extern fn free(data: *void);