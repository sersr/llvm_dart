import "std:d.kc";
import "std:allocator.kc";

import "std:heap_pointer.d.kc";

fn main() i32 {

  let foo = Foo { bar: Bar { y: 1000 }};

  printf("...y: %d\n", foo.y);

  let share_ptr = SharedPtr.new(Foo{ bar: Bar {y: 1234 }});

  printf("y: %d\n", share_ptr.y);


  0;
}


struct Box<T> {
  ptr: *T,
  size: usize,
}

struct Bar {
  y: i32,
}

struct Foo {
  bar: Bar,
}

impl Deref<Bar> for Foo {
  fn deref() &Bar {
    return &self.bar;
  }
}