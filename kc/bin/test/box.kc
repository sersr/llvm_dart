import "std:d.kc";
import "std:allocator.kc";

import "std:heap_pointer.d.kc";

fn main() i32 {

  let foo = Foo { bar: Bar { y: 1 }};

  let y = 100;
  
  autoDrop(foo);
  if y > 40 {
    let bba = Foo {bar: Bar {y: 2 }};
    let bbc = Bar {y: 3 };
  }
  
  printf("...y: %d\n", foo.bar.y);
  0;
}


struct Box<T> {
  ptr: *T,
  size: usize,
}

struct Bar {
  y: i32,
}

struct Foo {
  bar: Bar,
}

impl Drop for Bar {
  fn drop() {
    printf("drop bar y: %d\n", self.y);
  }
}

impl Drop for Foo {
  fn drop() {
    printf("drop foo y: %d\n", self.bar.y);
  }
}