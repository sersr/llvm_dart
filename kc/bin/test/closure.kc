
fn main() i32 {  
  let value = 1001;
  
  fn catch_value() {
    printf("catch_value:       value: %d\n", value);
  }
  
  let y = 222; 
  
  fn catchy() {
    printf("catchy:     y: %d value: %d\n", y, value);
  }
  fn catchy2() {
    printf("catchy2:    y: %d value: %d\n", y, value);
  }
  
  test_closure(catch_value);
  test_closure(catchy);
  test_closure(catchy2);
  test_closure(catchy2);

  test_catch(catch_value);
  test_catch(catchy);
  test_catch(catchy2);

  catch_value();

  fn catch_wrap(y: i32) {
    printf("catch wrap: y: %d value: %d\n", y, value);
  }

  wrap(catch_wrap);
  wrap_dyn(catch_wrap);
  0;
}

type FnType = dyn fn(y: i32);

/// `dyn`: 动态类型大小固定
fn wrap_dyn(f: FnType) {
  f(6666);
}

/// 非动态类型会破坏函数，比如 `f`是一个闭包，捕获到的变量会添加到参数后面
/// ```rust
/// let foo = 100;
/// fn closure() {
///   let bar = foo;
/// }
/// 
/// wrap(closure); // => wrap(closure, &foo);
/// ```
fn wrap(f:  fn(y: i32)) {
  f(8888);
}

fn test_closure<F: dyn fn()>(f: F) {
  f();
}

fn test_catch<F: fn()>(f: F) {
  f();
}