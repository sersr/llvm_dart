import "std:allocator.kc";
import "std:d.kc";

type char = u8;
struct String {
  data: *char,
  size: usize,
}

impl String {
  static fn new(data: *char) Self {
    final size = strlen(data);
    final ptr = malloc(size) as *char;
    memCopy(ptr, data, size);
    return String { data: ptr, size: size };
  }

  fn c_str() *char {
    return self.data;
  }

  fn len() usize {
    return self.size;
  }

  fn add_str(other: *char) {
    final other_size = strlen(other);
    let size = self.size + other_size - 1;
    final new_ptr = realloc(self.data, size) as *char;
    self.data = new_ptr;

    let start = new_ptr + self.size;
    memCopy(start as *char, other, other_size);
  }

  fn ref_deref() {
    let hx = &self;
    printf("size: %d\n", self.size);
    printf("hx: %d\n", (hx).size);
  }
}


fn main(argc: i32, argv: **u8) i32 {
  final my_str = String.new("hello world");

  my_str.ref_deref();
  printf(my_str.c_str());
  printf("\n");

  my_str.add_str("你好");
  let y = 21;
  final x = 10usize;
  printf("y + x = %d\n", y + x);
  
  printf("%s\n", my_str.c_str());
  final len = strlen(my_str.c_str());

  printf("my_str size: %d, %d\n", my_str.len(), len);

  0;
}

extern fn strlen(data: *void) usize;