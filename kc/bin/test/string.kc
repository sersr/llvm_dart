import "std:allocator.kc";

type char = u8;
struct StringData {
  data: *char,
  size: usize,
  count: usize,
}

impl StringData {
  fn add_str(other: *char) {
    final other_size = strlen(other);
    let size = self.size + other_size;

    final new_ptr = realloc(self.data, size + 1) as *char;
    self.data = new_ptr;

    let start = new_ptr + self.size;
    self.size = size;

    // memCopy(start as *char, other, other_size + 1);
    strcpy(start, other);
  }
}

struct String {
  ptr: *StringData,
}

impl String {
  static fn new(data: *char) Self {
    final ptr = malloc(sizeOf(StringData)) as *StringData;

    final size = strlen(data);
    final m_ptr = malloc(size + 1) as *char;
    strcpy(m_ptr, data);

    ptr.data = m_ptr;
    ptr.size = size;
    ptr.count = 1;
    return String{ ptr: ptr };
  }

  fn c_str() *char {
    return self.ptr.data;
  }

  fn len() usize {
    return self.ptr.size;
  }

  fn add_str(other: *char) {
    self.ptr.add_str(other);
  }

  fn ref_deref() {
    let hx = &self;
    printf("size: %d\n", self.ptr.size);
    printf("hx: %d\n", (hx).ptr.size);
  }
}

impl Stack for String {
  fn addStack() {
    self.ptr.count += 1;
    printf("add    count: %d\n", self.ptr.count);
  }

  fn removeStack() {
    self.ptr.count -= 1;
    printf("remove count: %d\n", self.ptr.count);
    if self.ptr.count <= 0 {
      free(self.ptr.data);
      free(self.ptr);
      self.ptr = 0;
    }
  }
}

fn main(argc: i32, argv: **u8) i32 {
  let my_str = String.new("hello world");
  
  my_str.ref_deref();
  printf(my_str.c_str());
  printf("\n");

  my_str.add_str("你好");
  let y = 21;
  final x = 10usize;
  printf("y + x = %d\n", y + x);
  
  printf("%s\n", my_str.c_str());
  final len = strlen(my_str.c_str());

  printf("my_str size: %d, %d\n", my_str.len(), len);

  0;
}

extern fn strlen(data: *void) usize;
extern fn strcpy(dest: *char, src: *char) *char;