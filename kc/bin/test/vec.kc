
fn main() i32 {
  final v = Vec<i32>.new();
  v.add(10);

  printf("add 10\n");
  printf("v.len %d\n", v.getLength());
  let x = v.pop();

  match x {
    Some(a) => {
      printf("pop x: %d\n", a);
    },
    None => {
      printf("......\n");
    }
  }

  printf("v.len %d\n", v.getLength());

  let vc = Vec<Point>.new();

  vc.add(Point{y: 10, x: 22});
  let x = vc[0];
  printf("vc[0] %d\n", x.y);

  printf("vc.len %d\n", vc.getLength());
  let point = vc.pop();

  match point {
    Some(point) => {
      printf("point x: %d, y: %d\n", point.x, point.y);
    }
  }

  0;
}

struct Hx<T> {
  y: T,
}

impl<T> Hx<T> {
  static fn new(data: T) Self {
    Hx{ data }
  }
}

struct Point {
  y: i32,
  x: i32,
}

impl Stack for Point {
  fn addStack() {
    printf("add    point\n");
  }

  fn removeStack() {
    printf("remove point\n");
  }
}