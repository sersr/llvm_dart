
type char = u8;

// 将整数部分转换为字符串
fn intToStr(num: i32, str: *char) {
    let i = 0;
    let isNegative = false;

    // 处理负数
    if (num < 0) {
        isNegative = true;
        num = -num;
    }

    // 提取每一位
    while num > 0 {
        str[i] = (num % 10) + '0' as u8;
        i+=1;
        num /= 10;
    }

    // 如果是负数，添加负号
    if (isNegative) {
        str[i] = '-';
        i+=1
    }

    // 添加字符串终止符
    str[i] = '\0';

    // 反转字符串
    let len = i;
    let j = 0;
    let max = len / 2;
    while j < max {
        let str[j], str[len - 1 - j] = str[len - 1 - j], str[j];
        j += 1;
    }
}

// 将浮点数转换为字符串
fn floatToStr(num: f32, str: *char, precision: i32) {
    // 提取整数部分
    let intPart = num as i32;
    
    // 提取小数部分
    let decimalPart = num - intPart as f32;
    if (decimalPart < 0) {
        decimalPart = -decimalPart;  
    } 
    // 处理负数的情况

    // 将整数部分转换为字符串
    intToStr(intPart, str);

    // 添加小数点
    let len = strlen(str);
    str[len] = '.';
    str[len + 1] = '\0';

    let i = 0;
    while i < precision {
        decimalPart *= 10;
        i += 1;
    }

    // 将小数部分转换为整数，然后转换为字符串并附加到结果中
    let decimalInt = decimalPart as i32;
    let decimalstr:[char; 20] =  [];
    intToStr(decimalInt, &decimalstr as *char);

    // 拼接小数部分到结果字符串
    strcat(str, &decimalstr as *char);
}

extern fn strcat(dest: *char, src: *char);

extern fn strlen(data: *void) usize;
extern fn strcpy(dest: *char, src: *char) *char;
fn main() {
    let str:&[u8;50] = &[];
    let i = 0;
    let x:[u8: 10] = [];
    while i < 20 {
        str[i]= i as u8 + '0';
        i += 1;
    }
    str[30] = '\0';
    printf(".....:%s.\n", str);

    floatToStr(-1002.111, str as *char, 2);
    printf("float: %s, %d, %d\n", str, str.getSize(), strlen(str))
}