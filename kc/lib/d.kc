extern fn printf(data: *u8, ...) i32;

fn print(data: *u8) {
    printf("log: %s\n", data);
}

impl<T, N> [T; N] {
  fn getSize() usize {
    getArraySize(self)
  }
}

impl [u8] {
  fn toStr() *u8 {
    &self
  }
}

impl [i8] {
  fn toStr() *i8 {
    &self
  }
}

struct CArray<T> {
  size: usize,
  ptr: **T,
}

impl<T> CArray<T> {
  
  fn getSize() usize {
    self.size
  }
}

impl<T> ArrayOp<T> for CArray<T> {
  fn elementAt(index: usize) &T {
    return self.ptr[index] as &T;
  }
}


com ArrayOp<T> {
  fn elementAt() &T;
}


com Stack {
  fn addStack();
  fn removeStack();
  fn updateStack();
  fn replaceStack(src: &Self);
}

com Deref<T> {
  fn deref() &T;
}