
import "d.kc";
import "allocator.kc";

type SharedPtr<T> = HeapPointer<T>;
struct HeapPointer<T> {
  ptr: *HeapCount<T>,
}

struct HeapCount<T> {
  count: usize,
  data: T,
}

impl HeapPointer<T> {
  static fn new(data: T) Self {
    final ptr = malloc(sizeOf(HeapCount<T>)) as *HeapCount<T>;
    ptr.data = data;
    ptr.count = 1;
    return HeapPointer { ptr: ptr };
  }
}

impl Stack for HeapPointer<T> {
  fn addStack() {
    self.onClone();
  }

  fn removeStack() {
    self.drop();
  }
}

impl Drop for HeapPointer<T> {
  fn drop() {
    final ptr = self.ptr;
    ptr.count -= 1;
    printf("remove %d\n", ptr.count);
    if ptr.count == 0 {
      autoDrop(ptr);
      free(ptr);
    }
  }

}

impl Deref<T> for HeapPointer<T> {
  fn deref() &T {
    return &self.ptr.data; 
  }
}

impl Clone for HeapPointer<T> {
  fn onClone() {
    final ptr = self.ptr;
    ptr.count += 1;
    printf("add %d\n", ptr.count);
  }
}

com Deref<T> {
  fn deref() &T;
}


com Clone {
  fn onClone();
}


com Stack {
  fn addStack();
  fn removeStack();
}