
import "d.kc";
import "allocator.kc";

type HeapPointer<T> = *HeapCount<T>;

struct HeapCount<T> {
  count: usize,
  data: T,
}

impl HeapCount<T> {
  fn addStack() {
    self.count += 1;
    printf("hello add %d\n", self.count);
  }

  fn removeStack() {
    self.count -= 1;
    printf("remove %d\n", self.count);
    if self.count == 0 {
      free(&self);
    }
  }
}

com Dot<T> {
  fn dot() &T;
  fn self() &Self;
}

com Ref<T> {
  fn ref() &T;
}

com Deref<T> {
  fn deref() &T;
}

com Stack {
  fn addStack();
  fn removeStack();
}