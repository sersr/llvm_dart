import "heap_pointer.d.kc";
import "allocator.kc";
import "d.kc"
import "option.kc"

struct Vec<T> {
  cap: usize,
  len: usize,
  data: *T,
}

impl<T> Vec<T> {
  static fn new() Self {
    final cap = 8;
    let size = sizeOf(T) * cap;
    let data = malloc(size) as *T;
    Vec { cap, 0, data }
  }

  fn add(value: T) {
    if self.len == self.cap {
      let size = self.cap * 2;
      self.data = realloc(self.data, size);
    }
    
    self.data[self.len] = value;
    self.len += 1;
  }

  fn pop() Option<T> {
    if self.len > 0 {
      self.len -= 1;
      final ret = Some(self.data[self.len]);
      addFree(&(self.data[self.len]));
      return ret;
    }

    return None;
  }

  fn getLength() usize {
    self.len;
  }


}