import "d.kc";
import "heap_pointer.d.kc";
import "allocator.kc";
import "option.kc";

struct Vec<T> {
  cap: usize,
  len: usize,
  data: *T,
}

impl<T> Vec<T> {

  static fn new() Self {
    final cap = 8;
    let size = sizeOf(T) * cap;
    let data = malloc(size) as *T;
    Vec { cap, 0, data }
  }

  fn add(value: T) {
    if self.len == self.cap {
      final size = self.cap * 2;
      self.data = realloc(self.data, size) as *T;
      self.cap = size;
    }
    
    ptrSetValue(self.data, self.len, value);
    self.len += 1;
  }

  fn remove(index: usize) Option<T> {
    if index >= self.len {
      return None
    }

    let ptr = &self.data[index]
    let ptr_next = ptr + sizeOf(*T)
    let ret = Some(ignoreAdd(*ptr))
    
    printf("....\n")
    
    memCopy(ptr, ptr_next, self.len - index - 1)
    self.len -= 1
    ret
  }

  fn pop() Option<T> {
    if self.len > 0 {
      self.len -= 1;
      Option.Some(ignoreAdd(self.data[self.len]));
    } else {
      None
    }
  }

  fn getLength() usize {
    self.len;
  }
}

impl<T> ArrayOp<T> for Vec<T> {
  fn elementAt(index: usize) &T {
    &self.data[index];
  }
}

impl<T> Stack for Vec<T> {
  fn removeStack() {
    if self.len <= 0 {
      return 
    }
    
    let index = 0;
    let size = self.len;
    loop {
      printf("hello %d\n", index)
      addFree(self.data[index]);
      index += 1;
      if index >= size { break;}
    }
  }
}