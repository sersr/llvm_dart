// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class LLVMCore {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LLVMCore(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LLVMCore.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void LLVMInitializeAArch64TargetInfo() {
    return _LLVMInitializeAArch64TargetInfo();
  }

  late final _LLVMInitializeAArch64TargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAArch64TargetInfo');
  late final _LLVMInitializeAArch64TargetInfo =
      _LLVMInitializeAArch64TargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeAMDGPUTargetInfo() {
    return _LLVMInitializeAMDGPUTargetInfo();
  }

  late final _LLVMInitializeAMDGPUTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAMDGPUTargetInfo');
  late final _LLVMInitializeAMDGPUTargetInfo =
      _LLVMInitializeAMDGPUTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeARMTargetInfo() {
    return _LLVMInitializeARMTargetInfo();
  }

  late final _LLVMInitializeARMTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeARMTargetInfo');
  late final _LLVMInitializeARMTargetInfo =
      _LLVMInitializeARMTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeAVRTargetInfo() {
    return _LLVMInitializeAVRTargetInfo();
  }

  late final _LLVMInitializeAVRTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAVRTargetInfo');
  late final _LLVMInitializeAVRTargetInfo =
      _LLVMInitializeAVRTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeBPFTargetInfo() {
    return _LLVMInitializeBPFTargetInfo();
  }

  late final _LLVMInitializeBPFTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeBPFTargetInfo');
  late final _LLVMInitializeBPFTargetInfo =
      _LLVMInitializeBPFTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeHexagonTargetInfo() {
    return _LLVMInitializeHexagonTargetInfo();
  }

  late final _LLVMInitializeHexagonTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeHexagonTargetInfo');
  late final _LLVMInitializeHexagonTargetInfo =
      _LLVMInitializeHexagonTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeLanaiTargetInfo() {
    return _LLVMInitializeLanaiTargetInfo();
  }

  late final _LLVMInitializeLanaiTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeLanaiTargetInfo');
  late final _LLVMInitializeLanaiTargetInfo =
      _LLVMInitializeLanaiTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeLoongArchTargetInfo() {
    return _LLVMInitializeLoongArchTargetInfo();
  }

  late final _LLVMInitializeLoongArchTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeLoongArchTargetInfo');
  late final _LLVMInitializeLoongArchTargetInfo =
      _LLVMInitializeLoongArchTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeMipsTargetInfo() {
    return _LLVMInitializeMipsTargetInfo();
  }

  late final _LLVMInitializeMipsTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeMipsTargetInfo');
  late final _LLVMInitializeMipsTargetInfo =
      _LLVMInitializeMipsTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeMSP430TargetInfo() {
    return _LLVMInitializeMSP430TargetInfo();
  }

  late final _LLVMInitializeMSP430TargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeMSP430TargetInfo');
  late final _LLVMInitializeMSP430TargetInfo =
      _LLVMInitializeMSP430TargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeNVPTXTargetInfo() {
    return _LLVMInitializeNVPTXTargetInfo();
  }

  late final _LLVMInitializeNVPTXTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeNVPTXTargetInfo');
  late final _LLVMInitializeNVPTXTargetInfo =
      _LLVMInitializeNVPTXTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializePowerPCTargetInfo() {
    return _LLVMInitializePowerPCTargetInfo();
  }

  late final _LLVMInitializePowerPCTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializePowerPCTargetInfo');
  late final _LLVMInitializePowerPCTargetInfo =
      _LLVMInitializePowerPCTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeRISCVTargetInfo() {
    return _LLVMInitializeRISCVTargetInfo();
  }

  late final _LLVMInitializeRISCVTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeRISCVTargetInfo');
  late final _LLVMInitializeRISCVTargetInfo =
      _LLVMInitializeRISCVTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeSparcTargetInfo() {
    return _LLVMInitializeSparcTargetInfo();
  }

  late final _LLVMInitializeSparcTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeSparcTargetInfo');
  late final _LLVMInitializeSparcTargetInfo =
      _LLVMInitializeSparcTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeSystemZTargetInfo() {
    return _LLVMInitializeSystemZTargetInfo();
  }

  late final _LLVMInitializeSystemZTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeSystemZTargetInfo');
  late final _LLVMInitializeSystemZTargetInfo =
      _LLVMInitializeSystemZTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeVETargetInfo() {
    return _LLVMInitializeVETargetInfo();
  }

  late final _LLVMInitializeVETargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeVETargetInfo');
  late final _LLVMInitializeVETargetInfo =
      _LLVMInitializeVETargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeWebAssemblyTargetInfo() {
    return _LLVMInitializeWebAssemblyTargetInfo();
  }

  late final _LLVMInitializeWebAssemblyTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeWebAssemblyTargetInfo');
  late final _LLVMInitializeWebAssemblyTargetInfo =
      _LLVMInitializeWebAssemblyTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeX86TargetInfo() {
    return _LLVMInitializeX86TargetInfo();
  }

  late final _LLVMInitializeX86TargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeX86TargetInfo');
  late final _LLVMInitializeX86TargetInfo =
      _LLVMInitializeX86TargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeXCoreTargetInfo() {
    return _LLVMInitializeXCoreTargetInfo();
  }

  late final _LLVMInitializeXCoreTargetInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeXCoreTargetInfo');
  late final _LLVMInitializeXCoreTargetInfo =
      _LLVMInitializeXCoreTargetInfoPtr.asFunction<void Function()>();

  void LLVMInitializeAArch64Target() {
    return _LLVMInitializeAArch64Target();
  }

  late final _LLVMInitializeAArch64TargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAArch64Target');
  late final _LLVMInitializeAArch64Target =
      _LLVMInitializeAArch64TargetPtr.asFunction<void Function()>();

  void LLVMInitializeAMDGPUTarget() {
    return _LLVMInitializeAMDGPUTarget();
  }

  late final _LLVMInitializeAMDGPUTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAMDGPUTarget');
  late final _LLVMInitializeAMDGPUTarget =
      _LLVMInitializeAMDGPUTargetPtr.asFunction<void Function()>();

  void LLVMInitializeARMTarget() {
    return _LLVMInitializeARMTarget();
  }

  late final _LLVMInitializeARMTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeARMTarget');
  late final _LLVMInitializeARMTarget =
      _LLVMInitializeARMTargetPtr.asFunction<void Function()>();

  void LLVMInitializeAVRTarget() {
    return _LLVMInitializeAVRTarget();
  }

  late final _LLVMInitializeAVRTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAVRTarget');
  late final _LLVMInitializeAVRTarget =
      _LLVMInitializeAVRTargetPtr.asFunction<void Function()>();

  void LLVMInitializeBPFTarget() {
    return _LLVMInitializeBPFTarget();
  }

  late final _LLVMInitializeBPFTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeBPFTarget');
  late final _LLVMInitializeBPFTarget =
      _LLVMInitializeBPFTargetPtr.asFunction<void Function()>();

  void LLVMInitializeHexagonTarget() {
    return _LLVMInitializeHexagonTarget();
  }

  late final _LLVMInitializeHexagonTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeHexagonTarget');
  late final _LLVMInitializeHexagonTarget =
      _LLVMInitializeHexagonTargetPtr.asFunction<void Function()>();

  void LLVMInitializeLanaiTarget() {
    return _LLVMInitializeLanaiTarget();
  }

  late final _LLVMInitializeLanaiTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeLanaiTarget');
  late final _LLVMInitializeLanaiTarget =
      _LLVMInitializeLanaiTargetPtr.asFunction<void Function()>();

  void LLVMInitializeLoongArchTarget() {
    return _LLVMInitializeLoongArchTarget();
  }

  late final _LLVMInitializeLoongArchTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeLoongArchTarget');
  late final _LLVMInitializeLoongArchTarget =
      _LLVMInitializeLoongArchTargetPtr.asFunction<void Function()>();

  void LLVMInitializeMipsTarget() {
    return _LLVMInitializeMipsTarget();
  }

  late final _LLVMInitializeMipsTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeMipsTarget');
  late final _LLVMInitializeMipsTarget =
      _LLVMInitializeMipsTargetPtr.asFunction<void Function()>();

  void LLVMInitializeMSP430Target() {
    return _LLVMInitializeMSP430Target();
  }

  late final _LLVMInitializeMSP430TargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeMSP430Target');
  late final _LLVMInitializeMSP430Target =
      _LLVMInitializeMSP430TargetPtr.asFunction<void Function()>();

  void LLVMInitializeNVPTXTarget() {
    return _LLVMInitializeNVPTXTarget();
  }

  late final _LLVMInitializeNVPTXTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeNVPTXTarget');
  late final _LLVMInitializeNVPTXTarget =
      _LLVMInitializeNVPTXTargetPtr.asFunction<void Function()>();

  void LLVMInitializePowerPCTarget() {
    return _LLVMInitializePowerPCTarget();
  }

  late final _LLVMInitializePowerPCTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializePowerPCTarget');
  late final _LLVMInitializePowerPCTarget =
      _LLVMInitializePowerPCTargetPtr.asFunction<void Function()>();

  void LLVMInitializeRISCVTarget() {
    return _LLVMInitializeRISCVTarget();
  }

  late final _LLVMInitializeRISCVTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeRISCVTarget');
  late final _LLVMInitializeRISCVTarget =
      _LLVMInitializeRISCVTargetPtr.asFunction<void Function()>();

  void LLVMInitializeSparcTarget() {
    return _LLVMInitializeSparcTarget();
  }

  late final _LLVMInitializeSparcTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeSparcTarget');
  late final _LLVMInitializeSparcTarget =
      _LLVMInitializeSparcTargetPtr.asFunction<void Function()>();

  void LLVMInitializeSystemZTarget() {
    return _LLVMInitializeSystemZTarget();
  }

  late final _LLVMInitializeSystemZTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeSystemZTarget');
  late final _LLVMInitializeSystemZTarget =
      _LLVMInitializeSystemZTargetPtr.asFunction<void Function()>();

  void LLVMInitializeVETarget() {
    return _LLVMInitializeVETarget();
  }

  late final _LLVMInitializeVETargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeVETarget');
  late final _LLVMInitializeVETarget =
      _LLVMInitializeVETargetPtr.asFunction<void Function()>();

  void LLVMInitializeWebAssemblyTarget() {
    return _LLVMInitializeWebAssemblyTarget();
  }

  late final _LLVMInitializeWebAssemblyTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeWebAssemblyTarget');
  late final _LLVMInitializeWebAssemblyTarget =
      _LLVMInitializeWebAssemblyTargetPtr.asFunction<void Function()>();

  void LLVMInitializeX86Target() {
    return _LLVMInitializeX86Target();
  }

  late final _LLVMInitializeX86TargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeX86Target');
  late final _LLVMInitializeX86Target =
      _LLVMInitializeX86TargetPtr.asFunction<void Function()>();

  void LLVMInitializeXCoreTarget() {
    return _LLVMInitializeXCoreTarget();
  }

  late final _LLVMInitializeXCoreTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeXCoreTarget');
  late final _LLVMInitializeXCoreTarget =
      _LLVMInitializeXCoreTargetPtr.asFunction<void Function()>();

  void LLVMInitializeAArch64TargetMC() {
    return _LLVMInitializeAArch64TargetMC();
  }

  late final _LLVMInitializeAArch64TargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAArch64TargetMC');
  late final _LLVMInitializeAArch64TargetMC =
      _LLVMInitializeAArch64TargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeAMDGPUTargetMC() {
    return _LLVMInitializeAMDGPUTargetMC();
  }

  late final _LLVMInitializeAMDGPUTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAMDGPUTargetMC');
  late final _LLVMInitializeAMDGPUTargetMC =
      _LLVMInitializeAMDGPUTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeARMTargetMC() {
    return _LLVMInitializeARMTargetMC();
  }

  late final _LLVMInitializeARMTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeARMTargetMC');
  late final _LLVMInitializeARMTargetMC =
      _LLVMInitializeARMTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeAVRTargetMC() {
    return _LLVMInitializeAVRTargetMC();
  }

  late final _LLVMInitializeAVRTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAVRTargetMC');
  late final _LLVMInitializeAVRTargetMC =
      _LLVMInitializeAVRTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeBPFTargetMC() {
    return _LLVMInitializeBPFTargetMC();
  }

  late final _LLVMInitializeBPFTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeBPFTargetMC');
  late final _LLVMInitializeBPFTargetMC =
      _LLVMInitializeBPFTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeHexagonTargetMC() {
    return _LLVMInitializeHexagonTargetMC();
  }

  late final _LLVMInitializeHexagonTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeHexagonTargetMC');
  late final _LLVMInitializeHexagonTargetMC =
      _LLVMInitializeHexagonTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeLanaiTargetMC() {
    return _LLVMInitializeLanaiTargetMC();
  }

  late final _LLVMInitializeLanaiTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeLanaiTargetMC');
  late final _LLVMInitializeLanaiTargetMC =
      _LLVMInitializeLanaiTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeLoongArchTargetMC() {
    return _LLVMInitializeLoongArchTargetMC();
  }

  late final _LLVMInitializeLoongArchTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeLoongArchTargetMC');
  late final _LLVMInitializeLoongArchTargetMC =
      _LLVMInitializeLoongArchTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeMipsTargetMC() {
    return _LLVMInitializeMipsTargetMC();
  }

  late final _LLVMInitializeMipsTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeMipsTargetMC');
  late final _LLVMInitializeMipsTargetMC =
      _LLVMInitializeMipsTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeMSP430TargetMC() {
    return _LLVMInitializeMSP430TargetMC();
  }

  late final _LLVMInitializeMSP430TargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeMSP430TargetMC');
  late final _LLVMInitializeMSP430TargetMC =
      _LLVMInitializeMSP430TargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeNVPTXTargetMC() {
    return _LLVMInitializeNVPTXTargetMC();
  }

  late final _LLVMInitializeNVPTXTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeNVPTXTargetMC');
  late final _LLVMInitializeNVPTXTargetMC =
      _LLVMInitializeNVPTXTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializePowerPCTargetMC() {
    return _LLVMInitializePowerPCTargetMC();
  }

  late final _LLVMInitializePowerPCTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializePowerPCTargetMC');
  late final _LLVMInitializePowerPCTargetMC =
      _LLVMInitializePowerPCTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeRISCVTargetMC() {
    return _LLVMInitializeRISCVTargetMC();
  }

  late final _LLVMInitializeRISCVTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeRISCVTargetMC');
  late final _LLVMInitializeRISCVTargetMC =
      _LLVMInitializeRISCVTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeSparcTargetMC() {
    return _LLVMInitializeSparcTargetMC();
  }

  late final _LLVMInitializeSparcTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeSparcTargetMC');
  late final _LLVMInitializeSparcTargetMC =
      _LLVMInitializeSparcTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeSystemZTargetMC() {
    return _LLVMInitializeSystemZTargetMC();
  }

  late final _LLVMInitializeSystemZTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeSystemZTargetMC');
  late final _LLVMInitializeSystemZTargetMC =
      _LLVMInitializeSystemZTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeVETargetMC() {
    return _LLVMInitializeVETargetMC();
  }

  late final _LLVMInitializeVETargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeVETargetMC');
  late final _LLVMInitializeVETargetMC =
      _LLVMInitializeVETargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeWebAssemblyTargetMC() {
    return _LLVMInitializeWebAssemblyTargetMC();
  }

  late final _LLVMInitializeWebAssemblyTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeWebAssemblyTargetMC');
  late final _LLVMInitializeWebAssemblyTargetMC =
      _LLVMInitializeWebAssemblyTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeX86TargetMC() {
    return _LLVMInitializeX86TargetMC();
  }

  late final _LLVMInitializeX86TargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeX86TargetMC');
  late final _LLVMInitializeX86TargetMC =
      _LLVMInitializeX86TargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeXCoreTargetMC() {
    return _LLVMInitializeXCoreTargetMC();
  }

  late final _LLVMInitializeXCoreTargetMCPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeXCoreTargetMC');
  late final _LLVMInitializeXCoreTargetMC =
      _LLVMInitializeXCoreTargetMCPtr.asFunction<void Function()>();

  void LLVMInitializeAArch64AsmPrinter() {
    return _LLVMInitializeAArch64AsmPrinter();
  }

  late final _LLVMInitializeAArch64AsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAArch64AsmPrinter');
  late final _LLVMInitializeAArch64AsmPrinter =
      _LLVMInitializeAArch64AsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeAMDGPUAsmPrinter() {
    return _LLVMInitializeAMDGPUAsmPrinter();
  }

  late final _LLVMInitializeAMDGPUAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAMDGPUAsmPrinter');
  late final _LLVMInitializeAMDGPUAsmPrinter =
      _LLVMInitializeAMDGPUAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeARMAsmPrinter() {
    return _LLVMInitializeARMAsmPrinter();
  }

  late final _LLVMInitializeARMAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeARMAsmPrinter');
  late final _LLVMInitializeARMAsmPrinter =
      _LLVMInitializeARMAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeAVRAsmPrinter() {
    return _LLVMInitializeAVRAsmPrinter();
  }

  late final _LLVMInitializeAVRAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAVRAsmPrinter');
  late final _LLVMInitializeAVRAsmPrinter =
      _LLVMInitializeAVRAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeBPFAsmPrinter() {
    return _LLVMInitializeBPFAsmPrinter();
  }

  late final _LLVMInitializeBPFAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeBPFAsmPrinter');
  late final _LLVMInitializeBPFAsmPrinter =
      _LLVMInitializeBPFAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeHexagonAsmPrinter() {
    return _LLVMInitializeHexagonAsmPrinter();
  }

  late final _LLVMInitializeHexagonAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeHexagonAsmPrinter');
  late final _LLVMInitializeHexagonAsmPrinter =
      _LLVMInitializeHexagonAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeLanaiAsmPrinter() {
    return _LLVMInitializeLanaiAsmPrinter();
  }

  late final _LLVMInitializeLanaiAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeLanaiAsmPrinter');
  late final _LLVMInitializeLanaiAsmPrinter =
      _LLVMInitializeLanaiAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeLoongArchAsmPrinter() {
    return _LLVMInitializeLoongArchAsmPrinter();
  }

  late final _LLVMInitializeLoongArchAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeLoongArchAsmPrinter');
  late final _LLVMInitializeLoongArchAsmPrinter =
      _LLVMInitializeLoongArchAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeMipsAsmPrinter() {
    return _LLVMInitializeMipsAsmPrinter();
  }

  late final _LLVMInitializeMipsAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeMipsAsmPrinter');
  late final _LLVMInitializeMipsAsmPrinter =
      _LLVMInitializeMipsAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeMSP430AsmPrinter() {
    return _LLVMInitializeMSP430AsmPrinter();
  }

  late final _LLVMInitializeMSP430AsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeMSP430AsmPrinter');
  late final _LLVMInitializeMSP430AsmPrinter =
      _LLVMInitializeMSP430AsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeNVPTXAsmPrinter() {
    return _LLVMInitializeNVPTXAsmPrinter();
  }

  late final _LLVMInitializeNVPTXAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeNVPTXAsmPrinter');
  late final _LLVMInitializeNVPTXAsmPrinter =
      _LLVMInitializeNVPTXAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializePowerPCAsmPrinter() {
    return _LLVMInitializePowerPCAsmPrinter();
  }

  late final _LLVMInitializePowerPCAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializePowerPCAsmPrinter');
  late final _LLVMInitializePowerPCAsmPrinter =
      _LLVMInitializePowerPCAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeRISCVAsmPrinter() {
    return _LLVMInitializeRISCVAsmPrinter();
  }

  late final _LLVMInitializeRISCVAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeRISCVAsmPrinter');
  late final _LLVMInitializeRISCVAsmPrinter =
      _LLVMInitializeRISCVAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeSparcAsmPrinter() {
    return _LLVMInitializeSparcAsmPrinter();
  }

  late final _LLVMInitializeSparcAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeSparcAsmPrinter');
  late final _LLVMInitializeSparcAsmPrinter =
      _LLVMInitializeSparcAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeSystemZAsmPrinter() {
    return _LLVMInitializeSystemZAsmPrinter();
  }

  late final _LLVMInitializeSystemZAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeSystemZAsmPrinter');
  late final _LLVMInitializeSystemZAsmPrinter =
      _LLVMInitializeSystemZAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeVEAsmPrinter() {
    return _LLVMInitializeVEAsmPrinter();
  }

  late final _LLVMInitializeVEAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeVEAsmPrinter');
  late final _LLVMInitializeVEAsmPrinter =
      _LLVMInitializeVEAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeWebAssemblyAsmPrinter() {
    return _LLVMInitializeWebAssemblyAsmPrinter();
  }

  late final _LLVMInitializeWebAssemblyAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeWebAssemblyAsmPrinter');
  late final _LLVMInitializeWebAssemblyAsmPrinter =
      _LLVMInitializeWebAssemblyAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeX86AsmPrinter() {
    return _LLVMInitializeX86AsmPrinter();
  }

  late final _LLVMInitializeX86AsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeX86AsmPrinter');
  late final _LLVMInitializeX86AsmPrinter =
      _LLVMInitializeX86AsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeXCoreAsmPrinter() {
    return _LLVMInitializeXCoreAsmPrinter();
  }

  late final _LLVMInitializeXCoreAsmPrinterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeXCoreAsmPrinter');
  late final _LLVMInitializeXCoreAsmPrinter =
      _LLVMInitializeXCoreAsmPrinterPtr.asFunction<void Function()>();

  void LLVMInitializeAArch64AsmParser() {
    return _LLVMInitializeAArch64AsmParser();
  }

  late final _LLVMInitializeAArch64AsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAArch64AsmParser');
  late final _LLVMInitializeAArch64AsmParser =
      _LLVMInitializeAArch64AsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeAMDGPUAsmParser() {
    return _LLVMInitializeAMDGPUAsmParser();
  }

  late final _LLVMInitializeAMDGPUAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAMDGPUAsmParser');
  late final _LLVMInitializeAMDGPUAsmParser =
      _LLVMInitializeAMDGPUAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeARMAsmParser() {
    return _LLVMInitializeARMAsmParser();
  }

  late final _LLVMInitializeARMAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeARMAsmParser');
  late final _LLVMInitializeARMAsmParser =
      _LLVMInitializeARMAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeAVRAsmParser() {
    return _LLVMInitializeAVRAsmParser();
  }

  late final _LLVMInitializeAVRAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAVRAsmParser');
  late final _LLVMInitializeAVRAsmParser =
      _LLVMInitializeAVRAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeBPFAsmParser() {
    return _LLVMInitializeBPFAsmParser();
  }

  late final _LLVMInitializeBPFAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeBPFAsmParser');
  late final _LLVMInitializeBPFAsmParser =
      _LLVMInitializeBPFAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeHexagonAsmParser() {
    return _LLVMInitializeHexagonAsmParser();
  }

  late final _LLVMInitializeHexagonAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeHexagonAsmParser');
  late final _LLVMInitializeHexagonAsmParser =
      _LLVMInitializeHexagonAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeLanaiAsmParser() {
    return _LLVMInitializeLanaiAsmParser();
  }

  late final _LLVMInitializeLanaiAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeLanaiAsmParser');
  late final _LLVMInitializeLanaiAsmParser =
      _LLVMInitializeLanaiAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeLoongArchAsmParser() {
    return _LLVMInitializeLoongArchAsmParser();
  }

  late final _LLVMInitializeLoongArchAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeLoongArchAsmParser');
  late final _LLVMInitializeLoongArchAsmParser =
      _LLVMInitializeLoongArchAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeMipsAsmParser() {
    return _LLVMInitializeMipsAsmParser();
  }

  late final _LLVMInitializeMipsAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeMipsAsmParser');
  late final _LLVMInitializeMipsAsmParser =
      _LLVMInitializeMipsAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeMSP430AsmParser() {
    return _LLVMInitializeMSP430AsmParser();
  }

  late final _LLVMInitializeMSP430AsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeMSP430AsmParser');
  late final _LLVMInitializeMSP430AsmParser =
      _LLVMInitializeMSP430AsmParserPtr.asFunction<void Function()>();

  void LLVMInitializePowerPCAsmParser() {
    return _LLVMInitializePowerPCAsmParser();
  }

  late final _LLVMInitializePowerPCAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializePowerPCAsmParser');
  late final _LLVMInitializePowerPCAsmParser =
      _LLVMInitializePowerPCAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeRISCVAsmParser() {
    return _LLVMInitializeRISCVAsmParser();
  }

  late final _LLVMInitializeRISCVAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeRISCVAsmParser');
  late final _LLVMInitializeRISCVAsmParser =
      _LLVMInitializeRISCVAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeSparcAsmParser() {
    return _LLVMInitializeSparcAsmParser();
  }

  late final _LLVMInitializeSparcAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeSparcAsmParser');
  late final _LLVMInitializeSparcAsmParser =
      _LLVMInitializeSparcAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeSystemZAsmParser() {
    return _LLVMInitializeSystemZAsmParser();
  }

  late final _LLVMInitializeSystemZAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeSystemZAsmParser');
  late final _LLVMInitializeSystemZAsmParser =
      _LLVMInitializeSystemZAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeVEAsmParser() {
    return _LLVMInitializeVEAsmParser();
  }

  late final _LLVMInitializeVEAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeVEAsmParser');
  late final _LLVMInitializeVEAsmParser =
      _LLVMInitializeVEAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeWebAssemblyAsmParser() {
    return _LLVMInitializeWebAssemblyAsmParser();
  }

  late final _LLVMInitializeWebAssemblyAsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeWebAssemblyAsmParser');
  late final _LLVMInitializeWebAssemblyAsmParser =
      _LLVMInitializeWebAssemblyAsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeX86AsmParser() {
    return _LLVMInitializeX86AsmParser();
  }

  late final _LLVMInitializeX86AsmParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeX86AsmParser');
  late final _LLVMInitializeX86AsmParser =
      _LLVMInitializeX86AsmParserPtr.asFunction<void Function()>();

  void LLVMInitializeAArch64Disassembler() {
    return _LLVMInitializeAArch64Disassembler();
  }

  late final _LLVMInitializeAArch64DisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAArch64Disassembler');
  late final _LLVMInitializeAArch64Disassembler =
      _LLVMInitializeAArch64DisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeAMDGPUDisassembler() {
    return _LLVMInitializeAMDGPUDisassembler();
  }

  late final _LLVMInitializeAMDGPUDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAMDGPUDisassembler');
  late final _LLVMInitializeAMDGPUDisassembler =
      _LLVMInitializeAMDGPUDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeARMDisassembler() {
    return _LLVMInitializeARMDisassembler();
  }

  late final _LLVMInitializeARMDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeARMDisassembler');
  late final _LLVMInitializeARMDisassembler =
      _LLVMInitializeARMDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeAVRDisassembler() {
    return _LLVMInitializeAVRDisassembler();
  }

  late final _LLVMInitializeAVRDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAVRDisassembler');
  late final _LLVMInitializeAVRDisassembler =
      _LLVMInitializeAVRDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeBPFDisassembler() {
    return _LLVMInitializeBPFDisassembler();
  }

  late final _LLVMInitializeBPFDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeBPFDisassembler');
  late final _LLVMInitializeBPFDisassembler =
      _LLVMInitializeBPFDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeHexagonDisassembler() {
    return _LLVMInitializeHexagonDisassembler();
  }

  late final _LLVMInitializeHexagonDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeHexagonDisassembler');
  late final _LLVMInitializeHexagonDisassembler =
      _LLVMInitializeHexagonDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeLanaiDisassembler() {
    return _LLVMInitializeLanaiDisassembler();
  }

  late final _LLVMInitializeLanaiDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeLanaiDisassembler');
  late final _LLVMInitializeLanaiDisassembler =
      _LLVMInitializeLanaiDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeLoongArchDisassembler() {
    return _LLVMInitializeLoongArchDisassembler();
  }

  late final _LLVMInitializeLoongArchDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeLoongArchDisassembler');
  late final _LLVMInitializeLoongArchDisassembler =
      _LLVMInitializeLoongArchDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeMipsDisassembler() {
    return _LLVMInitializeMipsDisassembler();
  }

  late final _LLVMInitializeMipsDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeMipsDisassembler');
  late final _LLVMInitializeMipsDisassembler =
      _LLVMInitializeMipsDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeMSP430Disassembler() {
    return _LLVMInitializeMSP430Disassembler();
  }

  late final _LLVMInitializeMSP430DisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeMSP430Disassembler');
  late final _LLVMInitializeMSP430Disassembler =
      _LLVMInitializeMSP430DisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializePowerPCDisassembler() {
    return _LLVMInitializePowerPCDisassembler();
  }

  late final _LLVMInitializePowerPCDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializePowerPCDisassembler');
  late final _LLVMInitializePowerPCDisassembler =
      _LLVMInitializePowerPCDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeRISCVDisassembler() {
    return _LLVMInitializeRISCVDisassembler();
  }

  late final _LLVMInitializeRISCVDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeRISCVDisassembler');
  late final _LLVMInitializeRISCVDisassembler =
      _LLVMInitializeRISCVDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeSparcDisassembler() {
    return _LLVMInitializeSparcDisassembler();
  }

  late final _LLVMInitializeSparcDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeSparcDisassembler');
  late final _LLVMInitializeSparcDisassembler =
      _LLVMInitializeSparcDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeSystemZDisassembler() {
    return _LLVMInitializeSystemZDisassembler();
  }

  late final _LLVMInitializeSystemZDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeSystemZDisassembler');
  late final _LLVMInitializeSystemZDisassembler =
      _LLVMInitializeSystemZDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeVEDisassembler() {
    return _LLVMInitializeVEDisassembler();
  }

  late final _LLVMInitializeVEDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeVEDisassembler');
  late final _LLVMInitializeVEDisassembler =
      _LLVMInitializeVEDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeWebAssemblyDisassembler() {
    return _LLVMInitializeWebAssemblyDisassembler();
  }

  late final _LLVMInitializeWebAssemblyDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeWebAssemblyDisassembler');
  late final _LLVMInitializeWebAssemblyDisassembler =
      _LLVMInitializeWebAssemblyDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeX86Disassembler() {
    return _LLVMInitializeX86Disassembler();
  }

  late final _LLVMInitializeX86DisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeX86Disassembler');
  late final _LLVMInitializeX86Disassembler =
      _LLVMInitializeX86DisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeXCoreDisassembler() {
    return _LLVMInitializeXCoreDisassembler();
  }

  late final _LLVMInitializeXCoreDisassemblerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeXCoreDisassembler');
  late final _LLVMInitializeXCoreDisassembler =
      _LLVMInitializeXCoreDisassemblerPtr.asFunction<void Function()>();

  void LLVMInitializeAMDGPUTargetMCA() {
    return _LLVMInitializeAMDGPUTargetMCA();
  }

  late final _LLVMInitializeAMDGPUTargetMCAPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeAMDGPUTargetMCA');
  late final _LLVMInitializeAMDGPUTargetMCA =
      _LLVMInitializeAMDGPUTargetMCAPtr.asFunction<void Function()>();

  void LLVMInitializeRISCVTargetMCA() {
    return _LLVMInitializeRISCVTargetMCA();
  }

  late final _LLVMInitializeRISCVTargetMCAPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeRISCVTargetMCA');
  late final _LLVMInitializeRISCVTargetMCA =
      _LLVMInitializeRISCVTargetMCAPtr.asFunction<void Function()>();

  void LLVMInitializeX86TargetMCA() {
    return _LLVMInitializeX86TargetMCA();
  }

  late final _LLVMInitializeX86TargetMCAPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'LLVMInitializeX86TargetMCA');
  late final _LLVMInitializeX86TargetMCA =
      _LLVMInitializeX86TargetMCAPtr.asFunction<void Function()>();

  /// @}
  void LLVMInitializeCore(
    LLVMPassRegistryRef R,
  ) {
    return _LLVMInitializeCore(
      R,
    );
  }

  late final _LLVMInitializeCorePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMPassRegistryRef)>>(
          'LLVMInitializeCore');
  late final _LLVMInitializeCore =
      _LLVMInitializeCorePtr.asFunction<void Function(LLVMPassRegistryRef)>();

  /// Deallocate and destroy all ManagedStatic variables.
  /// @see llvm::llvm_shutdown
  /// @see ManagedStatic
  void LLVMShutdown() {
    return _LLVMShutdown();
  }

  late final _LLVMShutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('LLVMShutdown');
  late final _LLVMShutdown = _LLVMShutdownPtr.asFunction<void Function()>();

  /// Return the major, minor, and patch version of LLVM
  ///
  /// The version components are returned via the function's three output
  /// parameters or skipped if a NULL pointer was supplied.
  void LLVMGetVersion(
    ffi.Pointer<ffi.UnsignedInt> Major,
    ffi.Pointer<ffi.UnsignedInt> Minor,
    ffi.Pointer<ffi.UnsignedInt> Patch,
  ) {
    return _LLVMGetVersion(
      Major,
      Minor,
      Patch,
    );
  }

  late final _LLVMGetVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMGetVersion');
  late final _LLVMGetVersion = _LLVMGetVersionPtr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> LLVMCreateMessage(
    ffi.Pointer<ffi.Char> Message,
  ) {
    return _LLVMCreateMessage(
      Message,
    );
  }

  late final _LLVMCreateMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('LLVMCreateMessage');
  late final _LLVMCreateMessage = _LLVMCreateMessagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void LLVMDisposeMessage(
    ffi.Pointer<ffi.Char> Message,
  ) {
    return _LLVMDisposeMessage(
      Message,
    );
  }

  late final _LLVMDisposeMessagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'LLVMDisposeMessage');
  late final _LLVMDisposeMessage =
      _LLVMDisposeMessagePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// Create a new context.
  ///
  /// Every call to this function should be paired with a call to
  /// LLVMContextDispose() or the context will leak memory.
  LLVMContextRef LLVMContextCreate() {
    return _LLVMContextCreate();
  }

  late final _LLVMContextCreatePtr =
      _lookup<ffi.NativeFunction<LLVMContextRef Function()>>(
          'LLVMContextCreate');
  late final _LLVMContextCreate =
      _LLVMContextCreatePtr.asFunction<LLVMContextRef Function()>();

  /// Obtain the global context instance.
  LLVMContextRef LLVMGetGlobalContext() {
    return _LLVMGetGlobalContext();
  }

  late final _LLVMGetGlobalContextPtr =
      _lookup<ffi.NativeFunction<LLVMContextRef Function()>>(
          'LLVMGetGlobalContext');
  late final _LLVMGetGlobalContext =
      _LLVMGetGlobalContextPtr.asFunction<LLVMContextRef Function()>();

  /// Set the diagnostic handler for this context.
  void LLVMContextSetDiagnosticHandler(
    LLVMContextRef C,
    LLVMDiagnosticHandler Handler,
    ffi.Pointer<ffi.Void> DiagnosticContext,
  ) {
    return _LLVMContextSetDiagnosticHandler(
      C,
      Handler,
      DiagnosticContext,
    );
  }

  late final _LLVMContextSetDiagnosticHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMContextRef, LLVMDiagnosticHandler,
              ffi.Pointer<ffi.Void>)>>('LLVMContextSetDiagnosticHandler');
  late final _LLVMContextSetDiagnosticHandler =
      _LLVMContextSetDiagnosticHandlerPtr.asFunction<
          void Function(
              LLVMContextRef, LLVMDiagnosticHandler, ffi.Pointer<ffi.Void>)>();

  /// Get the diagnostic handler of this context.
  LLVMDiagnosticHandler LLVMContextGetDiagnosticHandler(
    LLVMContextRef C,
  ) {
    return _LLVMContextGetDiagnosticHandler(
      C,
    );
  }

  late final _LLVMContextGetDiagnosticHandlerPtr = _lookup<
          ffi.NativeFunction<LLVMDiagnosticHandler Function(LLVMContextRef)>>(
      'LLVMContextGetDiagnosticHandler');
  late final _LLVMContextGetDiagnosticHandler =
      _LLVMContextGetDiagnosticHandlerPtr.asFunction<
          LLVMDiagnosticHandler Function(LLVMContextRef)>();

  /// Get the diagnostic context of this context.
  ffi.Pointer<ffi.Void> LLVMContextGetDiagnosticContext(
    LLVMContextRef C,
  ) {
    return _LLVMContextGetDiagnosticContext(
      C,
    );
  }

  late final _LLVMContextGetDiagnosticContextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(LLVMContextRef)>>(
      'LLVMContextGetDiagnosticContext');
  late final _LLVMContextGetDiagnosticContext =
      _LLVMContextGetDiagnosticContextPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(LLVMContextRef)>();

  /// Set the yield callback function for this context.
  ///
  /// @see LLVMContext::setYieldCallback()
  void LLVMContextSetYieldCallback(
    LLVMContextRef C,
    LLVMYieldCallback Callback,
    ffi.Pointer<ffi.Void> OpaqueHandle,
  ) {
    return _LLVMContextSetYieldCallback(
      C,
      Callback,
      OpaqueHandle,
    );
  }

  late final _LLVMContextSetYieldCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMContextRef, LLVMYieldCallback,
              ffi.Pointer<ffi.Void>)>>('LLVMContextSetYieldCallback');
  late final _LLVMContextSetYieldCallback =
      _LLVMContextSetYieldCallbackPtr.asFunction<
          void Function(
              LLVMContextRef, LLVMYieldCallback, ffi.Pointer<ffi.Void>)>();

  /// Retrieve whether the given context is set to discard all value names.
  ///
  /// @see LLVMContext::shouldDiscardValueNames()
  int LLVMContextShouldDiscardValueNames(
    LLVMContextRef C,
  ) {
    return _LLVMContextShouldDiscardValueNames(
      C,
    );
  }

  late final _LLVMContextShouldDiscardValueNamesPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMContextRef)>>(
          'LLVMContextShouldDiscardValueNames');
  late final _LLVMContextShouldDiscardValueNames =
      _LLVMContextShouldDiscardValueNamesPtr.asFunction<
          int Function(LLVMContextRef)>();

  /// Set whether the given context discards all value names.
  ///
  /// If true, only the names of GlobalValue objects will be available in the IR.
  /// This can be used to save memory and runtime, especially in release mode.
  ///
  /// @see LLVMContext::setDiscardValueNames()
  void LLVMContextSetDiscardValueNames(
    LLVMContextRef C,
    int Discard,
  ) {
    return _LLVMContextSetDiscardValueNames(
      C,
      Discard,
    );
  }

  late final _LLVMContextSetDiscardValueNamesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMContextRef, LLVMBool)>>(
          'LLVMContextSetDiscardValueNames');
  late final _LLVMContextSetDiscardValueNames =
      _LLVMContextSetDiscardValueNamesPtr.asFunction<
          void Function(LLVMContextRef, int)>();

  /// Set whether the given context is in opaque pointer mode.
  ///
  /// @see LLVMContext::setOpaquePointers()
  void LLVMContextSetOpaquePointers(
    LLVMContextRef C,
    int OpaquePointers,
  ) {
    return _LLVMContextSetOpaquePointers(
      C,
      OpaquePointers,
    );
  }

  late final _LLVMContextSetOpaquePointersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMContextRef, LLVMBool)>>(
          'LLVMContextSetOpaquePointers');
  late final _LLVMContextSetOpaquePointers = _LLVMContextSetOpaquePointersPtr
      .asFunction<void Function(LLVMContextRef, int)>();

  /// Destroy a context instance.
  ///
  /// This should be called for every call to LLVMContextCreate() or memory
  /// will be leaked.
  void LLVMContextDispose(
    LLVMContextRef C,
  ) {
    return _LLVMContextDispose(
      C,
    );
  }

  late final _LLVMContextDisposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMContextRef)>>(
          'LLVMContextDispose');
  late final _LLVMContextDispose =
      _LLVMContextDisposePtr.asFunction<void Function(LLVMContextRef)>();

  /// Return a string representation of the DiagnosticInfo. Use
  /// LLVMDisposeMessage to free the string.
  ///
  /// @see DiagnosticInfo::print()
  ffi.Pointer<ffi.Char> LLVMGetDiagInfoDescription(
    LLVMDiagnosticInfoRef DI,
  ) {
    return _LLVMGetDiagInfoDescription(
      DI,
    );
  }

  late final _LLVMGetDiagInfoDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMDiagnosticInfoRef)>>('LLVMGetDiagInfoDescription');
  late final _LLVMGetDiagInfoDescription = _LLVMGetDiagInfoDescriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(LLVMDiagnosticInfoRef)>();

  /// Return an enum LLVMDiagnosticSeverity.
  ///
  /// @see DiagnosticInfo::getSeverity()
  int LLVMGetDiagInfoSeverity(
    LLVMDiagnosticInfoRef DI,
  ) {
    return _LLVMGetDiagInfoSeverity(
      DI,
    );
  }

  late final _LLVMGetDiagInfoSeverityPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMDiagnosticInfoRef)>>(
          'LLVMGetDiagInfoSeverity');
  late final _LLVMGetDiagInfoSeverity = _LLVMGetDiagInfoSeverityPtr.asFunction<
      int Function(LLVMDiagnosticInfoRef)>();

  int LLVMGetMDKindIDInContext(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Name,
    int SLen,
  ) {
    return _LLVMGetMDKindIDInContext(
      C,
      Name,
      SLen,
    );
  }

  late final _LLVMGetMDKindIDInContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(LLVMContextRef, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMGetMDKindIDInContext');
  late final _LLVMGetMDKindIDInContext = _LLVMGetMDKindIDInContextPtr
      .asFunction<int Function(LLVMContextRef, ffi.Pointer<ffi.Char>, int)>();

  int LLVMGetMDKindID(
    ffi.Pointer<ffi.Char> Name,
    int SLen,
  ) {
    return _LLVMGetMDKindID(
      Name,
      SLen,
    );
  }

  late final _LLVMGetMDKindIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('LLVMGetMDKindID');
  late final _LLVMGetMDKindID = _LLVMGetMDKindIDPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  /// Return an unique id given the name of a enum attribute,
  /// or 0 if no attribute by that name exists.
  ///
  /// See http://llvm.org/docs/LangRef.html#parameter-attributes
  /// and http://llvm.org/docs/LangRef.html#function-attributes
  /// for the list of available attributes.
  ///
  /// NB: Attribute names and/or id are subject to change without
  /// going through the C API deprecation cycle.
  int LLVMGetEnumAttributeKindForName(
    ffi.Pointer<ffi.Char> Name,
    int SLen,
  ) {
    return _LLVMGetEnumAttributeKindForName(
      Name,
      SLen,
    );
  }

  late final _LLVMGetEnumAttributeKindForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMGetEnumAttributeKindForName');
  late final _LLVMGetEnumAttributeKindForName =
      _LLVMGetEnumAttributeKindForNamePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int)>();

  int LLVMGetLastEnumAttributeKind() {
    return _LLVMGetLastEnumAttributeKind();
  }

  late final _LLVMGetLastEnumAttributeKindPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'LLVMGetLastEnumAttributeKind');
  late final _LLVMGetLastEnumAttributeKind =
      _LLVMGetLastEnumAttributeKindPtr.asFunction<int Function()>();

  /// Create an enum attribute.
  LLVMAttributeRef LLVMCreateEnumAttribute(
    LLVMContextRef C,
    int KindID,
    int Val,
  ) {
    return _LLVMCreateEnumAttribute(
      C,
      KindID,
      Val,
    );
  }

  late final _LLVMCreateEnumAttributePtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(LLVMContextRef, ffi.UnsignedInt,
              ffi.Uint64)>>('LLVMCreateEnumAttribute');
  late final _LLVMCreateEnumAttribute = _LLVMCreateEnumAttributePtr.asFunction<
      LLVMAttributeRef Function(LLVMContextRef, int, int)>();

  /// Get the unique id corresponding to the enum attribute
  /// passed as argument.
  int LLVMGetEnumAttributeKind(
    LLVMAttributeRef A,
  ) {
    return _LLVMGetEnumAttributeKind(
      A,
    );
  }

  late final _LLVMGetEnumAttributeKindPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMAttributeRef)>>(
          'LLVMGetEnumAttributeKind');
  late final _LLVMGetEnumAttributeKind =
      _LLVMGetEnumAttributeKindPtr.asFunction<int Function(LLVMAttributeRef)>();

  /// Get the enum attribute's value. 0 is returned if none exists.
  int LLVMGetEnumAttributeValue(
    LLVMAttributeRef A,
  ) {
    return _LLVMGetEnumAttributeValue(
      A,
    );
  }

  late final _LLVMGetEnumAttributeValuePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(LLVMAttributeRef)>>(
          'LLVMGetEnumAttributeValue');
  late final _LLVMGetEnumAttributeValue = _LLVMGetEnumAttributeValuePtr
      .asFunction<int Function(LLVMAttributeRef)>();

  /// Create a type attribute
  LLVMAttributeRef LLVMCreateTypeAttribute(
    LLVMContextRef C,
    int KindID,
    LLVMTypeRef type_ref,
  ) {
    return _LLVMCreateTypeAttribute(
      C,
      KindID,
      type_ref,
    );
  }

  late final _LLVMCreateTypeAttributePtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(LLVMContextRef, ffi.UnsignedInt,
              LLVMTypeRef)>>('LLVMCreateTypeAttribute');
  late final _LLVMCreateTypeAttribute = _LLVMCreateTypeAttributePtr.asFunction<
      LLVMAttributeRef Function(LLVMContextRef, int, LLVMTypeRef)>();

  /// Get the type attribute's value.
  LLVMTypeRef LLVMGetTypeAttributeValue(
    LLVMAttributeRef A,
  ) {
    return _LLVMGetTypeAttributeValue(
      A,
    );
  }

  late final _LLVMGetTypeAttributeValuePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMAttributeRef)>>(
          'LLVMGetTypeAttributeValue');
  late final _LLVMGetTypeAttributeValue = _LLVMGetTypeAttributeValuePtr
      .asFunction<LLVMTypeRef Function(LLVMAttributeRef)>();

  /// Create a string attribute.
  LLVMAttributeRef LLVMCreateStringAttribute(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> K,
    int KLength,
    ffi.Pointer<ffi.Char> V,
    int VLength,
  ) {
    return _LLVMCreateStringAttribute(
      C,
      K,
      KLength,
      V,
      VLength,
    );
  }

  late final _LLVMCreateStringAttributePtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(
              LLVMContextRef,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMCreateStringAttribute');
  late final _LLVMCreateStringAttribute =
      _LLVMCreateStringAttributePtr.asFunction<
          LLVMAttributeRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Char>, int)>();

  /// Get the string attribute's kind.
  ffi.Pointer<ffi.Char> LLVMGetStringAttributeKind(
    LLVMAttributeRef A,
    ffi.Pointer<ffi.UnsignedInt> Length,
  ) {
    return _LLVMGetStringAttributeKind(
      A,
      Length,
    );
  }

  late final _LLVMGetStringAttributeKindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMAttributeRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMGetStringAttributeKind');
  late final _LLVMGetStringAttributeKind =
      _LLVMGetStringAttributeKindPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMAttributeRef, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Get the string attribute's value.
  ffi.Pointer<ffi.Char> LLVMGetStringAttributeValue(
    LLVMAttributeRef A,
    ffi.Pointer<ffi.UnsignedInt> Length,
  ) {
    return _LLVMGetStringAttributeValue(
      A,
      Length,
    );
  }

  late final _LLVMGetStringAttributeValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMAttributeRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMGetStringAttributeValue');
  late final _LLVMGetStringAttributeValue =
      _LLVMGetStringAttributeValuePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMAttributeRef, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Check for the different types of attributes.
  int LLVMIsEnumAttribute(
    LLVMAttributeRef A,
  ) {
    return _LLVMIsEnumAttribute(
      A,
    );
  }

  late final _LLVMIsEnumAttributePtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMAttributeRef)>>(
          'LLVMIsEnumAttribute');
  late final _LLVMIsEnumAttribute =
      _LLVMIsEnumAttributePtr.asFunction<int Function(LLVMAttributeRef)>();

  int LLVMIsStringAttribute(
    LLVMAttributeRef A,
  ) {
    return _LLVMIsStringAttribute(
      A,
    );
  }

  late final _LLVMIsStringAttributePtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMAttributeRef)>>(
          'LLVMIsStringAttribute');
  late final _LLVMIsStringAttribute =
      _LLVMIsStringAttributePtr.asFunction<int Function(LLVMAttributeRef)>();

  int LLVMIsTypeAttribute(
    LLVMAttributeRef A,
  ) {
    return _LLVMIsTypeAttribute(
      A,
    );
  }

  late final _LLVMIsTypeAttributePtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMAttributeRef)>>(
          'LLVMIsTypeAttribute');
  late final _LLVMIsTypeAttribute =
      _LLVMIsTypeAttributePtr.asFunction<int Function(LLVMAttributeRef)>();

  /// Obtain a Type from a context by its registered name.
  LLVMTypeRef LLVMGetTypeByName2(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMGetTypeByName2(
      C,
      Name,
    );
  }

  late final _LLVMGetTypeByName2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMContextRef, ffi.Pointer<ffi.Char>)>>('LLVMGetTypeByName2');
  late final _LLVMGetTypeByName2 = _LLVMGetTypeByName2Ptr.asFunction<
      LLVMTypeRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>)>();

  /// Create a new, empty module in the global context.
  ///
  /// This is equivalent to calling LLVMModuleCreateWithNameInContext with
  /// LLVMGetGlobalContext() as the context parameter.
  ///
  /// Every invocation should be paired with LLVMDisposeModule() or memory
  /// will be leaked.
  LLVMModuleRef LLVMModuleCreateWithName(
    ffi.Pointer<ffi.Char> ModuleID,
  ) {
    return _LLVMModuleCreateWithName(
      ModuleID,
    );
  }

  late final _LLVMModuleCreateWithNamePtr = _lookup<
          ffi.NativeFunction<LLVMModuleRef Function(ffi.Pointer<ffi.Char>)>>(
      'LLVMModuleCreateWithName');
  late final _LLVMModuleCreateWithName = _LLVMModuleCreateWithNamePtr
      .asFunction<LLVMModuleRef Function(ffi.Pointer<ffi.Char>)>();

  /// Create a new, empty module in a specific context.
  ///
  /// Every invocation should be paired with LLVMDisposeModule() or memory
  /// will be leaked.
  LLVMModuleRef LLVMModuleCreateWithNameInContext(
    ffi.Pointer<ffi.Char> ModuleID,
    LLVMContextRef C,
  ) {
    return _LLVMModuleCreateWithNameInContext(
      ModuleID,
      C,
    );
  }

  late final _LLVMModuleCreateWithNameInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMModuleRef Function(ffi.Pointer<ffi.Char>,
              LLVMContextRef)>>('LLVMModuleCreateWithNameInContext');
  late final _LLVMModuleCreateWithNameInContext =
      _LLVMModuleCreateWithNameInContextPtr.asFunction<
          LLVMModuleRef Function(ffi.Pointer<ffi.Char>, LLVMContextRef)>();

  /// Return an exact copy of the specified module.
  LLVMModuleRef LLVMCloneModule(
    LLVMModuleRef M,
  ) {
    return _LLVMCloneModule(
      M,
    );
  }

  late final _LLVMCloneModulePtr =
      _lookup<ffi.NativeFunction<LLVMModuleRef Function(LLVMModuleRef)>>(
          'LLVMCloneModule');
  late final _LLVMCloneModule =
      _LLVMCloneModulePtr.asFunction<LLVMModuleRef Function(LLVMModuleRef)>();

  /// Destroy a module instance.
  ///
  /// This must be called for every created module or memory will be
  /// leaked.
  void LLVMDisposeModule(
    LLVMModuleRef M,
  ) {
    return _LLVMDisposeModule(
      M,
    );
  }

  late final _LLVMDisposeModulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMModuleRef)>>(
          'LLVMDisposeModule');
  late final _LLVMDisposeModule =
      _LLVMDisposeModulePtr.asFunction<void Function(LLVMModuleRef)>();

  /// Obtain the identifier of a module.
  ///
  /// @param M Module to obtain identifier of
  /// @param Len Out parameter which holds the length of the returned string.
  /// @return The identifier of M.
  /// @see Module::getModuleIdentifier()
  ffi.Pointer<ffi.Char> LLVMGetModuleIdentifier(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Size> Len,
  ) {
    return _LLVMGetModuleIdentifier(
      M,
      Len,
    );
  }

  late final _LLVMGetModuleIdentifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMModuleRef,
              ffi.Pointer<ffi.Size>)>>('LLVMGetModuleIdentifier');
  late final _LLVMGetModuleIdentifier = _LLVMGetModuleIdentifierPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef, ffi.Pointer<ffi.Size>)>();

  /// Set the identifier of a module to a string Ident with length Len.
  ///
  /// @param M The module to set identifier
  /// @param Ident The string to set M's identifier to
  /// @param Len Length of Ident
  /// @see Module::setModuleIdentifier()
  void LLVMSetModuleIdentifier(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Ident,
    int Len,
  ) {
    return _LLVMSetModuleIdentifier(
      M,
      Ident,
      Len,
    );
  }

  late final _LLVMSetModuleIdentifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMSetModuleIdentifier');
  late final _LLVMSetModuleIdentifier = _LLVMSetModuleIdentifierPtr.asFunction<
      void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  /// Obtain the module's original source file name.
  ///
  /// @param M Module to obtain the name of
  /// @param Len Out parameter which holds the length of the returned string
  /// @return The original source file name of M
  /// @see Module::getSourceFileName()
  ffi.Pointer<ffi.Char> LLVMGetSourceFileName(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Size> Len,
  ) {
    return _LLVMGetSourceFileName(
      M,
      Len,
    );
  }

  late final _LLVMGetSourceFileNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMModuleRef, ffi.Pointer<ffi.Size>)>>('LLVMGetSourceFileName');
  late final _LLVMGetSourceFileName = _LLVMGetSourceFileNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef, ffi.Pointer<ffi.Size>)>();

  /// Set the original source file name of a module to a string Name with length
  /// Len.
  ///
  /// @param M The module to set the source file name of
  /// @param Name The string to set M's source file name to
  /// @param Len Length of Name
  /// @see Module::setSourceFileName()
  void LLVMSetSourceFileName(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    int Len,
  ) {
    return _LLVMSetSourceFileName(
      M,
      Name,
      Len,
    );
  }

  late final _LLVMSetSourceFileNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMSetSourceFileName');
  late final _LLVMSetSourceFileName = _LLVMSetSourceFileNamePtr.asFunction<
      void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  /// Obtain the data layout for a module.
  ///
  /// @see Module::getDataLayoutStr()
  ///
  /// LLVMGetDataLayout is DEPRECATED, as the name is not only incorrect,
  /// but match the name of another method on the module. Prefer the use
  /// of LLVMGetDataLayoutStr, which is not ambiguous.
  ffi.Pointer<ffi.Char> LLVMGetDataLayoutStr(
    LLVMModuleRef M,
  ) {
    return _LLVMGetDataLayoutStr(
      M,
    );
  }

  late final _LLVMGetDataLayoutStrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>>(
      'LLVMGetDataLayoutStr');
  late final _LLVMGetDataLayoutStr = _LLVMGetDataLayoutStrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>();

  ffi.Pointer<ffi.Char> LLVMGetDataLayout(
    LLVMModuleRef M,
  ) {
    return _LLVMGetDataLayout(
      M,
    );
  }

  late final _LLVMGetDataLayoutPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>>(
      'LLVMGetDataLayout');
  late final _LLVMGetDataLayout = _LLVMGetDataLayoutPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>();

  /// Set the data layout for a module.
  ///
  /// @see Module::setDataLayout()
  void LLVMSetDataLayout(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> DataLayoutStr,
  ) {
    return _LLVMSetDataLayout(
      M,
      DataLayoutStr,
    );
  }

  late final _LLVMSetDataLayoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>)>>('LLVMSetDataLayout');
  late final _LLVMSetDataLayout = _LLVMSetDataLayoutPtr.asFunction<
      void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  /// Obtain the target triple for a module.
  ///
  /// @see Module::getTargetTriple()
  ffi.Pointer<ffi.Char> LLVMGetTarget(
    LLVMModuleRef M,
  ) {
    return _LLVMGetTarget(
      M,
    );
  }

  late final _LLVMGetTargetPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>>(
      'LLVMGetTarget');
  late final _LLVMGetTarget = _LLVMGetTargetPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>();

  /// Set the target triple for a module.
  ///
  /// @see Module::setTargetTriple()
  void LLVMSetTarget(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Triple,
  ) {
    return _LLVMSetTarget(
      M,
      Triple,
    );
  }

  late final _LLVMSetTargetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>)>>('LLVMSetTarget');
  late final _LLVMSetTarget = _LLVMSetTargetPtr.asFunction<
      void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  /// Returns the module flags as an array of flag-key-value triples.  The caller
  /// is responsible for freeing this array by calling
  /// \c LLVMDisposeModuleFlagsMetadata.
  ///
  /// @see Module::getModuleFlagsMetadata()
  ffi.Pointer<LLVMModuleFlagEntry> LLVMCopyModuleFlagsMetadata(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Size> Len,
  ) {
    return _LLVMCopyModuleFlagsMetadata(
      M,
      Len,
    );
  }

  late final _LLVMCopyModuleFlagsMetadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LLVMModuleFlagEntry> Function(LLVMModuleRef,
              ffi.Pointer<ffi.Size>)>>('LLVMCopyModuleFlagsMetadata');
  late final _LLVMCopyModuleFlagsMetadata =
      _LLVMCopyModuleFlagsMetadataPtr.asFunction<
          ffi.Pointer<LLVMModuleFlagEntry> Function(
              LLVMModuleRef, ffi.Pointer<ffi.Size>)>();

  /// Destroys module flags metadata entries.
  void LLVMDisposeModuleFlagsMetadata(
    ffi.Pointer<LLVMModuleFlagEntry> Entries,
  ) {
    return _LLVMDisposeModuleFlagsMetadata(
      Entries,
    );
  }

  late final _LLVMDisposeModuleFlagsMetadataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<LLVMModuleFlagEntry>)>>(
      'LLVMDisposeModuleFlagsMetadata');
  late final _LLVMDisposeModuleFlagsMetadata =
      _LLVMDisposeModuleFlagsMetadataPtr.asFunction<
          void Function(ffi.Pointer<LLVMModuleFlagEntry>)>();

  /// Returns the flag behavior for a module flag entry at a specific index.
  ///
  /// @see Module::ModuleFlagEntry::Behavior
  int LLVMModuleFlagEntriesGetFlagBehavior(
    ffi.Pointer<LLVMModuleFlagEntry> Entries,
    int Index,
  ) {
    return _LLVMModuleFlagEntriesGetFlagBehavior(
      Entries,
      Index,
    );
  }

  late final _LLVMModuleFlagEntriesGetFlagBehaviorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<LLVMModuleFlagEntry>,
              ffi.UnsignedInt)>>('LLVMModuleFlagEntriesGetFlagBehavior');
  late final _LLVMModuleFlagEntriesGetFlagBehavior =
      _LLVMModuleFlagEntriesGetFlagBehaviorPtr.asFunction<
          int Function(ffi.Pointer<LLVMModuleFlagEntry>, int)>();

  /// Returns the key for a module flag entry at a specific index.
  ///
  /// @see Module::ModuleFlagEntry::Key
  ffi.Pointer<ffi.Char> LLVMModuleFlagEntriesGetKey(
    ffi.Pointer<LLVMModuleFlagEntry> Entries,
    int Index,
    ffi.Pointer<ffi.Size> Len,
  ) {
    return _LLVMModuleFlagEntriesGetKey(
      Entries,
      Index,
      Len,
    );
  }

  late final _LLVMModuleFlagEntriesGetKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<LLVMModuleFlagEntry>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Size>)>>('LLVMModuleFlagEntriesGetKey');
  late final _LLVMModuleFlagEntriesGetKey =
      _LLVMModuleFlagEntriesGetKeyPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<LLVMModuleFlagEntry>, int, ffi.Pointer<ffi.Size>)>();

  /// Returns the metadata for a module flag entry at a specific index.
  ///
  /// @see Module::ModuleFlagEntry::Val
  LLVMMetadataRef LLVMModuleFlagEntriesGetMetadata(
    ffi.Pointer<LLVMModuleFlagEntry> Entries,
    int Index,
  ) {
    return _LLVMModuleFlagEntriesGetMetadata(
      Entries,
      Index,
    );
  }

  late final _LLVMModuleFlagEntriesGetMetadataPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(ffi.Pointer<LLVMModuleFlagEntry>,
              ffi.UnsignedInt)>>('LLVMModuleFlagEntriesGetMetadata');
  late final _LLVMModuleFlagEntriesGetMetadata =
      _LLVMModuleFlagEntriesGetMetadataPtr.asFunction<
          LLVMMetadataRef Function(ffi.Pointer<LLVMModuleFlagEntry>, int)>();

  /// Add a module-level flag to the module-level flags metadata if it doesn't
  /// already exist.
  ///
  /// @see Module::getModuleFlag()
  LLVMMetadataRef LLVMGetModuleFlag(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Key,
    int KeyLen,
  ) {
    return _LLVMGetModuleFlag(
      M,
      Key,
      KeyLen,
    );
  }

  late final _LLVMGetModuleFlagPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMGetModuleFlag');
  late final _LLVMGetModuleFlag = _LLVMGetModuleFlagPtr.asFunction<
      LLVMMetadataRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  /// Add a module-level flag to the module-level flags metadata if it doesn't
  /// already exist.
  ///
  /// @see Module::addModuleFlag()
  void LLVMAddModuleFlag(
    LLVMModuleRef M,
    int Behavior,
    ffi.Pointer<ffi.Char> Key,
    int KeyLen,
    LLVMMetadataRef Val,
  ) {
    return _LLVMAddModuleFlag(
      M,
      Behavior,
      Key,
      KeyLen,
      Val,
    );
  }

  late final _LLVMAddModuleFlagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Int32, ffi.Pointer<ffi.Char>,
              ffi.Size, LLVMMetadataRef)>>('LLVMAddModuleFlag');
  late final _LLVMAddModuleFlag = _LLVMAddModuleFlagPtr.asFunction<
      void Function(
          LLVMModuleRef, int, ffi.Pointer<ffi.Char>, int, LLVMMetadataRef)>();

  /// Dump a representation of a module to stderr.
  ///
  /// @see Module::dump()
  void LLVMDumpModule(
    LLVMModuleRef M,
  ) {
    return _LLVMDumpModule(
      M,
    );
  }

  late final _LLVMDumpModulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMModuleRef)>>(
          'LLVMDumpModule');
  late final _LLVMDumpModule =
      _LLVMDumpModulePtr.asFunction<void Function(LLVMModuleRef)>();

  /// Print a representation of a module to a file. The ErrorMessage needs to be
  /// disposed with LLVMDisposeMessage. Returns 0 on success, 1 otherwise.
  ///
  /// @see Module::print()
  int LLVMPrintModuleToFile(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Filename,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ErrorMessage,
  ) {
    return _LLVMPrintModuleToFile(
      M,
      Filename,
      ErrorMessage,
    );
  }

  late final _LLVMPrintModuleToFilePtr = _lookup<
      ffi.NativeFunction<
          LLVMBool Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('LLVMPrintModuleToFile');
  late final _LLVMPrintModuleToFile = _LLVMPrintModuleToFilePtr.asFunction<
      int Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Return a string representation of the module. Use
  /// LLVMDisposeMessage to free the string.
  ///
  /// @see Module::print()
  ffi.Pointer<ffi.Char> LLVMPrintModuleToString(
    LLVMModuleRef M,
  ) {
    return _LLVMPrintModuleToString(
      M,
    );
  }

  late final _LLVMPrintModuleToStringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>>(
      'LLVMPrintModuleToString');
  late final _LLVMPrintModuleToString = _LLVMPrintModuleToStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>();

  /// Get inline assembly for a module.
  ///
  /// @see Module::getModuleInlineAsm()
  ffi.Pointer<ffi.Char> LLVMGetModuleInlineAsm(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Size> Len,
  ) {
    return _LLVMGetModuleInlineAsm(
      M,
      Len,
    );
  }

  late final _LLVMGetModuleInlineAsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMModuleRef, ffi.Pointer<ffi.Size>)>>('LLVMGetModuleInlineAsm');
  late final _LLVMGetModuleInlineAsm = _LLVMGetModuleInlineAsmPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef, ffi.Pointer<ffi.Size>)>();

  /// Set inline assembly for a module.
  ///
  /// @see Module::setModuleInlineAsm()
  void LLVMSetModuleInlineAsm2(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Asm,
    int Len,
  ) {
    return _LLVMSetModuleInlineAsm2(
      M,
      Asm,
      Len,
    );
  }

  late final _LLVMSetModuleInlineAsm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMSetModuleInlineAsm2');
  late final _LLVMSetModuleInlineAsm2 = _LLVMSetModuleInlineAsm2Ptr.asFunction<
      void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  /// Append inline assembly to a module.
  ///
  /// @see Module::appendModuleInlineAsm()
  void LLVMAppendModuleInlineAsm(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Asm,
    int Len,
  ) {
    return _LLVMAppendModuleInlineAsm(
      M,
      Asm,
      Len,
    );
  }

  late final _LLVMAppendModuleInlineAsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMAppendModuleInlineAsm');
  late final _LLVMAppendModuleInlineAsm = _LLVMAppendModuleInlineAsmPtr
      .asFunction<void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  /// Create the specified uniqued inline asm string.
  ///
  /// @see InlineAsm::get()
  LLVMValueRef LLVMGetInlineAsm(
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> AsmString,
    int AsmStringSize,
    ffi.Pointer<ffi.Char> Constraints,
    int ConstraintsSize,
    int HasSideEffects,
    int IsAlignStack,
    int Dialect,
    int CanThrow,
  ) {
    return _LLVMGetInlineAsm(
      Ty,
      AsmString,
      AsmStringSize,
      Constraints,
      ConstraintsSize,
      HasSideEffects,
      IsAlignStack,
      Dialect,
      CanThrow,
    );
  }

  late final _LLVMGetInlineAsmPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMTypeRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMBool,
              LLVMBool,
              ffi.Int32,
              LLVMBool)>>('LLVMGetInlineAsm');
  late final _LLVMGetInlineAsm = _LLVMGetInlineAsmPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, int, int, int, int)>();

  /// Obtain the context to which this module is associated.
  ///
  /// @see Module::getContext()
  LLVMContextRef LLVMGetModuleContext(
    LLVMModuleRef M,
  ) {
    return _LLVMGetModuleContext(
      M,
    );
  }

  late final _LLVMGetModuleContextPtr =
      _lookup<ffi.NativeFunction<LLVMContextRef Function(LLVMModuleRef)>>(
          'LLVMGetModuleContext');
  late final _LLVMGetModuleContext = _LLVMGetModuleContextPtr.asFunction<
      LLVMContextRef Function(LLVMModuleRef)>();

  /// Deprecated: Use LLVMGetTypeByName2 instead.
  LLVMTypeRef LLVMGetTypeByName(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMGetTypeByName(
      M,
      Name,
    );
  }

  late final _LLVMGetTypeByNamePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>)>>('LLVMGetTypeByName');
  late final _LLVMGetTypeByName = _LLVMGetTypeByNamePtr.asFunction<
      LLVMTypeRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  /// Obtain an iterator to the first NamedMDNode in a Module.
  ///
  /// @see llvm::Module::named_metadata_begin()
  LLVMNamedMDNodeRef LLVMGetFirstNamedMetadata(
    LLVMModuleRef M,
  ) {
    return _LLVMGetFirstNamedMetadata(
      M,
    );
  }

  late final _LLVMGetFirstNamedMetadataPtr =
      _lookup<ffi.NativeFunction<LLVMNamedMDNodeRef Function(LLVMModuleRef)>>(
          'LLVMGetFirstNamedMetadata');
  late final _LLVMGetFirstNamedMetadata = _LLVMGetFirstNamedMetadataPtr
      .asFunction<LLVMNamedMDNodeRef Function(LLVMModuleRef)>();

  /// Obtain an iterator to the last NamedMDNode in a Module.
  ///
  /// @see llvm::Module::named_metadata_end()
  LLVMNamedMDNodeRef LLVMGetLastNamedMetadata(
    LLVMModuleRef M,
  ) {
    return _LLVMGetLastNamedMetadata(
      M,
    );
  }

  late final _LLVMGetLastNamedMetadataPtr =
      _lookup<ffi.NativeFunction<LLVMNamedMDNodeRef Function(LLVMModuleRef)>>(
          'LLVMGetLastNamedMetadata');
  late final _LLVMGetLastNamedMetadata = _LLVMGetLastNamedMetadataPtr
      .asFunction<LLVMNamedMDNodeRef Function(LLVMModuleRef)>();

  /// Advance a NamedMDNode iterator to the next NamedMDNode.
  ///
  /// Returns NULL if the iterator was already at the end and there are no more
  /// named metadata nodes.
  LLVMNamedMDNodeRef LLVMGetNextNamedMetadata(
    LLVMNamedMDNodeRef NamedMDNode,
  ) {
    return _LLVMGetNextNamedMetadata(
      NamedMDNode,
    );
  }

  late final _LLVMGetNextNamedMetadataPtr = _lookup<
          ffi.NativeFunction<LLVMNamedMDNodeRef Function(LLVMNamedMDNodeRef)>>(
      'LLVMGetNextNamedMetadata');
  late final _LLVMGetNextNamedMetadata = _LLVMGetNextNamedMetadataPtr
      .asFunction<LLVMNamedMDNodeRef Function(LLVMNamedMDNodeRef)>();

  /// Decrement a NamedMDNode iterator to the previous NamedMDNode.
  ///
  /// Returns NULL if the iterator was already at the beginning and there are
  /// no previous named metadata nodes.
  LLVMNamedMDNodeRef LLVMGetPreviousNamedMetadata(
    LLVMNamedMDNodeRef NamedMDNode,
  ) {
    return _LLVMGetPreviousNamedMetadata(
      NamedMDNode,
    );
  }

  late final _LLVMGetPreviousNamedMetadataPtr = _lookup<
          ffi.NativeFunction<LLVMNamedMDNodeRef Function(LLVMNamedMDNodeRef)>>(
      'LLVMGetPreviousNamedMetadata');
  late final _LLVMGetPreviousNamedMetadata = _LLVMGetPreviousNamedMetadataPtr
      .asFunction<LLVMNamedMDNodeRef Function(LLVMNamedMDNodeRef)>();

  /// Retrieve a NamedMDNode with the given name, returning NULL if no such
  /// node exists.
  ///
  /// @see llvm::Module::getNamedMetadata()
  LLVMNamedMDNodeRef LLVMGetNamedMetadata(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMGetNamedMetadata(
      M,
      Name,
      NameLen,
    );
  }

  late final _LLVMGetNamedMetadataPtr = _lookup<
      ffi.NativeFunction<
          LLVMNamedMDNodeRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMGetNamedMetadata');
  late final _LLVMGetNamedMetadata = _LLVMGetNamedMetadataPtr.asFunction<
      LLVMNamedMDNodeRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  /// Retrieve a NamedMDNode with the given name, creating a new node if no such
  /// node exists.
  ///
  /// @see llvm::Module::getOrInsertNamedMetadata()
  LLVMNamedMDNodeRef LLVMGetOrInsertNamedMetadata(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMGetOrInsertNamedMetadata(
      M,
      Name,
      NameLen,
    );
  }

  late final _LLVMGetOrInsertNamedMetadataPtr = _lookup<
      ffi.NativeFunction<
          LLVMNamedMDNodeRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMGetOrInsertNamedMetadata');
  late final _LLVMGetOrInsertNamedMetadata =
      _LLVMGetOrInsertNamedMetadataPtr.asFunction<
          LLVMNamedMDNodeRef Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  /// Retrieve the name of a NamedMDNode.
  ///
  /// @see llvm::NamedMDNode::getName()
  ffi.Pointer<ffi.Char> LLVMGetNamedMetadataName(
    LLVMNamedMDNodeRef NamedMD,
    ffi.Pointer<ffi.Size> NameLen,
  ) {
    return _LLVMGetNamedMetadataName(
      NamedMD,
      NameLen,
    );
  }

  late final _LLVMGetNamedMetadataNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMNamedMDNodeRef,
              ffi.Pointer<ffi.Size>)>>('LLVMGetNamedMetadataName');
  late final _LLVMGetNamedMetadataName =
      _LLVMGetNamedMetadataNamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMNamedMDNodeRef, ffi.Pointer<ffi.Size>)>();

  /// Obtain the number of operands for named metadata in a module.
  ///
  /// @see llvm::Module::getNamedMetadata()
  int LLVMGetNamedMetadataNumOperands(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMGetNamedMetadataNumOperands(
      M,
      Name,
    );
  }

  late final _LLVMGetNamedMetadataNumOperandsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(LLVMModuleRef,
              ffi.Pointer<ffi.Char>)>>('LLVMGetNamedMetadataNumOperands');
  late final _LLVMGetNamedMetadataNumOperands =
      _LLVMGetNamedMetadataNumOperandsPtr.asFunction<
          int Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  /// Obtain the named metadata operands for a module.
  ///
  /// The passed LLVMValueRef pointer should refer to an array of
  /// LLVMValueRef at least LLVMGetNamedMetadataNumOperands long. This
  /// array will be populated with the LLVMValueRef instances. Each
  /// instance corresponds to a llvm::MDNode.
  ///
  /// @see llvm::Module::getNamedMetadata()
  /// @see llvm::MDNode::getOperand()
  void LLVMGetNamedMetadataOperands(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    ffi.Pointer<LLVMValueRef> Dest,
  ) {
    return _LLVMGetNamedMetadataOperands(
      M,
      Name,
      Dest,
    );
  }

  late final _LLVMGetNamedMetadataOperandsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<LLVMValueRef>)>>('LLVMGetNamedMetadataOperands');
  late final _LLVMGetNamedMetadataOperands =
      _LLVMGetNamedMetadataOperandsPtr.asFunction<
          void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<LLVMValueRef>)>();

  /// Add an operand to named metadata.
  ///
  /// @see llvm::Module::getNamedMetadata()
  /// @see llvm::MDNode::addOperand()
  void LLVMAddNamedMetadataOperand(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    LLVMValueRef Val,
  ) {
    return _LLVMAddNamedMetadataOperand(
      M,
      Name,
      Val,
    );
  }

  late final _LLVMAddNamedMetadataOperandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              LLVMValueRef)>>('LLVMAddNamedMetadataOperand');
  late final _LLVMAddNamedMetadataOperand =
      _LLVMAddNamedMetadataOperandPtr.asFunction<
          void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, LLVMValueRef)>();

  /// Return the directory of the debug location for this value, which must be
  /// an llvm::Instruction, llvm::GlobalVariable, or llvm::Function.
  ///
  /// @see llvm::Instruction::getDebugLoc()
  /// @see llvm::GlobalVariable::getDebugInfo()
  /// @see llvm::Function::getSubprogram()
  ffi.Pointer<ffi.Char> LLVMGetDebugLocDirectory(
    LLVMValueRef Val,
    ffi.Pointer<ffi.UnsignedInt> Length,
  ) {
    return _LLVMGetDebugLocDirectory(
      Val,
      Length,
    );
  }

  late final _LLVMGetDebugLocDirectoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMValueRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMGetDebugLocDirectory');
  late final _LLVMGetDebugLocDirectory =
      _LLVMGetDebugLocDirectoryPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMValueRef, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Return the filename of the debug location for this value, which must be
  /// an llvm::Instruction, llvm::GlobalVariable, or llvm::Function.
  ///
  /// @see llvm::Instruction::getDebugLoc()
  /// @see llvm::GlobalVariable::getDebugInfo()
  /// @see llvm::Function::getSubprogram()
  ffi.Pointer<ffi.Char> LLVMGetDebugLocFilename(
    LLVMValueRef Val,
    ffi.Pointer<ffi.UnsignedInt> Length,
  ) {
    return _LLVMGetDebugLocFilename(
      Val,
      Length,
    );
  }

  late final _LLVMGetDebugLocFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMValueRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMGetDebugLocFilename');
  late final _LLVMGetDebugLocFilename = _LLVMGetDebugLocFilenamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          LLVMValueRef, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Return the line number of the debug location for this value, which must be
  /// an llvm::Instruction, llvm::GlobalVariable, or llvm::Function.
  ///
  /// @see llvm::Instruction::getDebugLoc()
  /// @see llvm::GlobalVariable::getDebugInfo()
  /// @see llvm::Function::getSubprogram()
  int LLVMGetDebugLocLine(
    LLVMValueRef Val,
  ) {
    return _LLVMGetDebugLocLine(
      Val,
    );
  }

  late final _LLVMGetDebugLocLinePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetDebugLocLine');
  late final _LLVMGetDebugLocLine =
      _LLVMGetDebugLocLinePtr.asFunction<int Function(LLVMValueRef)>();

  /// Return the column number of the debug location for this value, which must be
  /// an llvm::Instruction.
  ///
  /// @see llvm::Instruction::getDebugLoc()
  int LLVMGetDebugLocColumn(
    LLVMValueRef Val,
  ) {
    return _LLVMGetDebugLocColumn(
      Val,
    );
  }

  late final _LLVMGetDebugLocColumnPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetDebugLocColumn');
  late final _LLVMGetDebugLocColumn =
      _LLVMGetDebugLocColumnPtr.asFunction<int Function(LLVMValueRef)>();

  /// Add a function to a module under a specified name.
  ///
  /// @see llvm::Function::Create()
  LLVMValueRef LLVMAddFunction(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    LLVMTypeRef FunctionTy,
  ) {
    return _LLVMAddFunction(
      M,
      Name,
      FunctionTy,
    );
  }

  late final _LLVMAddFunctionPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              LLVMTypeRef)>>('LLVMAddFunction');
  late final _LLVMAddFunction = _LLVMAddFunctionPtr.asFunction<
      LLVMValueRef Function(
          LLVMModuleRef, ffi.Pointer<ffi.Char>, LLVMTypeRef)>();

  /// Obtain a Function value from a Module by its name.
  ///
  /// The returned value corresponds to a llvm::Function value.
  ///
  /// @see llvm::Module::getFunction()
  LLVMValueRef LLVMGetNamedFunction(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMGetNamedFunction(
      M,
      Name,
    );
  }

  late final _LLVMGetNamedFunctionPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>)>>('LLVMGetNamedFunction');
  late final _LLVMGetNamedFunction = _LLVMGetNamedFunctionPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  /// Obtain an iterator to the first Function in a Module.
  ///
  /// @see llvm::Module::begin()
  LLVMValueRef LLVMGetFirstFunction(
    LLVMModuleRef M,
  ) {
    return _LLVMGetFirstFunction(
      M,
    );
  }

  late final _LLVMGetFirstFunctionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetFirstFunction');
  late final _LLVMGetFirstFunction = _LLVMGetFirstFunctionPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef)>();

  /// Obtain an iterator to the last Function in a Module.
  ///
  /// @see llvm::Module::end()
  LLVMValueRef LLVMGetLastFunction(
    LLVMModuleRef M,
  ) {
    return _LLVMGetLastFunction(
      M,
    );
  }

  late final _LLVMGetLastFunctionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetLastFunction');
  late final _LLVMGetLastFunction = _LLVMGetLastFunctionPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef)>();

  /// Advance a Function iterator to the next Function.
  ///
  /// Returns NULL if the iterator was already at the end and there are no more
  /// functions.
  LLVMValueRef LLVMGetNextFunction(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetNextFunction(
      Fn,
    );
  }

  late final _LLVMGetNextFunctionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetNextFunction');
  late final _LLVMGetNextFunction =
      _LLVMGetNextFunctionPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Decrement a Function iterator to the previous Function.
  ///
  /// Returns NULL if the iterator was already at the beginning and there are
  /// no previous functions.
  LLVMValueRef LLVMGetPreviousFunction(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetPreviousFunction(
      Fn,
    );
  }

  late final _LLVMGetPreviousFunctionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPreviousFunction');
  late final _LLVMGetPreviousFunction = _LLVMGetPreviousFunctionPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  /// Deprecated: Use LLVMSetModuleInlineAsm2 instead.
  void LLVMSetModuleInlineAsm(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Asm,
  ) {
    return _LLVMSetModuleInlineAsm(
      M,
      Asm,
    );
  }

  late final _LLVMSetModuleInlineAsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>)>>('LLVMSetModuleInlineAsm');
  late final _LLVMSetModuleInlineAsm = _LLVMSetModuleInlineAsmPtr.asFunction<
      void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  /// Obtain the enumerated type of a Type instance.
  ///
  /// @see llvm::Type:getTypeID()
  int LLVMGetTypeKind(
    LLVMTypeRef Ty,
  ) {
    return _LLVMGetTypeKind(
      Ty,
    );
  }

  late final _LLVMGetTypeKindPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMTypeRef)>>(
          'LLVMGetTypeKind');
  late final _LLVMGetTypeKind =
      _LLVMGetTypeKindPtr.asFunction<int Function(LLVMTypeRef)>();

  /// Whether the type has a known size.
  ///
  /// Things that don't have a size are abstract types, labels, and void.a
  ///
  /// @see llvm::Type::isSized()
  int LLVMTypeIsSized(
    LLVMTypeRef Ty,
  ) {
    return _LLVMTypeIsSized(
      Ty,
    );
  }

  late final _LLVMTypeIsSizedPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTypeRef)>>(
          'LLVMTypeIsSized');
  late final _LLVMTypeIsSized =
      _LLVMTypeIsSizedPtr.asFunction<int Function(LLVMTypeRef)>();

  /// Obtain the context to which this type instance is associated.
  ///
  /// @see llvm::Type::getContext()
  LLVMContextRef LLVMGetTypeContext(
    LLVMTypeRef Ty,
  ) {
    return _LLVMGetTypeContext(
      Ty,
    );
  }

  late final _LLVMGetTypeContextPtr =
      _lookup<ffi.NativeFunction<LLVMContextRef Function(LLVMTypeRef)>>(
          'LLVMGetTypeContext');
  late final _LLVMGetTypeContext =
      _LLVMGetTypeContextPtr.asFunction<LLVMContextRef Function(LLVMTypeRef)>();

  /// Dump a representation of a type to stderr.
  ///
  /// @see llvm::Type::dump()
  void LLVMDumpType(
    LLVMTypeRef Val,
  ) {
    return _LLVMDumpType(
      Val,
    );
  }

  late final _LLVMDumpTypePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMTypeRef)>>(
          'LLVMDumpType');
  late final _LLVMDumpType =
      _LLVMDumpTypePtr.asFunction<void Function(LLVMTypeRef)>();

  /// Return a string representation of the type. Use
  /// LLVMDisposeMessage to free the string.
  ///
  /// @see llvm::Type::print()
  ffi.Pointer<ffi.Char> LLVMPrintTypeToString(
    LLVMTypeRef Val,
  ) {
    return _LLVMPrintTypeToString(
      Val,
    );
  }

  late final _LLVMPrintTypeToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMTypeRef)>>(
          'LLVMPrintTypeToString');
  late final _LLVMPrintTypeToString = _LLVMPrintTypeToStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMTypeRef)>();

  /// Obtain an integer type from a context with specified bit width.
  LLVMTypeRef LLVMInt1TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMInt1TypeInContext(
      C,
    );
  }

  late final _LLVMInt1TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMInt1TypeInContext');
  late final _LLVMInt1TypeInContext = _LLVMInt1TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMInt8TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMInt8TypeInContext(
      C,
    );
  }

  late final _LLVMInt8TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMInt8TypeInContext');
  late final _LLVMInt8TypeInContext = _LLVMInt8TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMInt16TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMInt16TypeInContext(
      C,
    );
  }

  late final _LLVMInt16TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMInt16TypeInContext');
  late final _LLVMInt16TypeInContext = _LLVMInt16TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMInt32TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMInt32TypeInContext(
      C,
    );
  }

  late final _LLVMInt32TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMInt32TypeInContext');
  late final _LLVMInt32TypeInContext = _LLVMInt32TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMInt64TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMInt64TypeInContext(
      C,
    );
  }

  late final _LLVMInt64TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMInt64TypeInContext');
  late final _LLVMInt64TypeInContext = _LLVMInt64TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMInt128TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMInt128TypeInContext(
      C,
    );
  }

  late final _LLVMInt128TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMInt128TypeInContext');
  late final _LLVMInt128TypeInContext = _LLVMInt128TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMIntTypeInContext(
    LLVMContextRef C,
    int NumBits,
  ) {
    return _LLVMIntTypeInContext(
      C,
      NumBits,
    );
  }

  late final _LLVMIntTypeInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMContextRef, ffi.UnsignedInt)>>('LLVMIntTypeInContext');
  late final _LLVMIntTypeInContext = _LLVMIntTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef, int)>();

  /// Obtain an integer type from the global context with a specified bit
  /// width.
  LLVMTypeRef LLVMInt1Type() {
    return _LLVMInt1Type();
  }

  late final _LLVMInt1TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMInt1Type');
  late final _LLVMInt1Type =
      _LLVMInt1TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMInt8Type() {
    return _LLVMInt8Type();
  }

  late final _LLVMInt8TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMInt8Type');
  late final _LLVMInt8Type =
      _LLVMInt8TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMInt16Type() {
    return _LLVMInt16Type();
  }

  late final _LLVMInt16TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMInt16Type');
  late final _LLVMInt16Type =
      _LLVMInt16TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMInt32Type() {
    return _LLVMInt32Type();
  }

  late final _LLVMInt32TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMInt32Type');
  late final _LLVMInt32Type =
      _LLVMInt32TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMInt64Type() {
    return _LLVMInt64Type();
  }

  late final _LLVMInt64TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMInt64Type');
  late final _LLVMInt64Type =
      _LLVMInt64TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMInt128Type() {
    return _LLVMInt128Type();
  }

  late final _LLVMInt128TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMInt128Type');
  late final _LLVMInt128Type =
      _LLVMInt128TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMIntType(
    int NumBits,
  ) {
    return _LLVMIntType(
      NumBits,
    );
  }

  late final _LLVMIntTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(ffi.UnsignedInt)>>(
          'LLVMIntType');
  late final _LLVMIntType =
      _LLVMIntTypePtr.asFunction<LLVMTypeRef Function(int)>();

  int LLVMGetIntTypeWidth(
    LLVMTypeRef IntegerTy,
  ) {
    return _LLVMGetIntTypeWidth(
      IntegerTy,
    );
  }

  late final _LLVMGetIntTypeWidthPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMGetIntTypeWidth');
  late final _LLVMGetIntTypeWidth =
      _LLVMGetIntTypeWidthPtr.asFunction<int Function(LLVMTypeRef)>();

  /// Obtain a 16-bit floating point type from a context.
  LLVMTypeRef LLVMHalfTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMHalfTypeInContext(
      C,
    );
  }

  late final _LLVMHalfTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMHalfTypeInContext');
  late final _LLVMHalfTypeInContext = _LLVMHalfTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  /// Obtain a 16-bit brain floating point type from a context.
  LLVMTypeRef LLVMBFloatTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMBFloatTypeInContext(
      C,
    );
  }

  late final _LLVMBFloatTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMBFloatTypeInContext');
  late final _LLVMBFloatTypeInContext = _LLVMBFloatTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  /// Obtain a 32-bit floating point type from a context.
  LLVMTypeRef LLVMFloatTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMFloatTypeInContext(
      C,
    );
  }

  late final _LLVMFloatTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMFloatTypeInContext');
  late final _LLVMFloatTypeInContext = _LLVMFloatTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  /// Obtain a 64-bit floating point type from a context.
  LLVMTypeRef LLVMDoubleTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMDoubleTypeInContext(
      C,
    );
  }

  late final _LLVMDoubleTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMDoubleTypeInContext');
  late final _LLVMDoubleTypeInContext = _LLVMDoubleTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  /// Obtain a 80-bit floating point type (X87) from a context.
  LLVMTypeRef LLVMX86FP80TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMX86FP80TypeInContext(
      C,
    );
  }

  late final _LLVMX86FP80TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMX86FP80TypeInContext');
  late final _LLVMX86FP80TypeInContext = _LLVMX86FP80TypeInContextPtr
      .asFunction<LLVMTypeRef Function(LLVMContextRef)>();

  /// Obtain a 128-bit floating point type (112-bit mantissa) from a
  /// context.
  LLVMTypeRef LLVMFP128TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMFP128TypeInContext(
      C,
    );
  }

  late final _LLVMFP128TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMFP128TypeInContext');
  late final _LLVMFP128TypeInContext = _LLVMFP128TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  /// Obtain a 128-bit floating point type (two 64-bits) from a context.
  LLVMTypeRef LLVMPPCFP128TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMPPCFP128TypeInContext(
      C,
    );
  }

  late final _LLVMPPCFP128TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMPPCFP128TypeInContext');
  late final _LLVMPPCFP128TypeInContext = _LLVMPPCFP128TypeInContextPtr
      .asFunction<LLVMTypeRef Function(LLVMContextRef)>();

  /// Obtain a floating point type from the global context.
  ///
  /// These map to the functions in this group of the same name.
  LLVMTypeRef LLVMHalfType() {
    return _LLVMHalfType();
  }

  late final _LLVMHalfTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMHalfType');
  late final _LLVMHalfType =
      _LLVMHalfTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMBFloatType() {
    return _LLVMBFloatType();
  }

  late final _LLVMBFloatTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMBFloatType');
  late final _LLVMBFloatType =
      _LLVMBFloatTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMFloatType() {
    return _LLVMFloatType();
  }

  late final _LLVMFloatTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMFloatType');
  late final _LLVMFloatType =
      _LLVMFloatTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMDoubleType() {
    return _LLVMDoubleType();
  }

  late final _LLVMDoubleTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMDoubleType');
  late final _LLVMDoubleType =
      _LLVMDoubleTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMX86FP80Type() {
    return _LLVMX86FP80Type();
  }

  late final _LLVMX86FP80TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMX86FP80Type');
  late final _LLVMX86FP80Type =
      _LLVMX86FP80TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMFP128Type() {
    return _LLVMFP128Type();
  }

  late final _LLVMFP128TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMFP128Type');
  late final _LLVMFP128Type =
      _LLVMFP128TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMPPCFP128Type() {
    return _LLVMPPCFP128Type();
  }

  late final _LLVMPPCFP128TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMPPCFP128Type');
  late final _LLVMPPCFP128Type =
      _LLVMPPCFP128TypePtr.asFunction<LLVMTypeRef Function()>();

  /// Obtain a function type consisting of a specified signature.
  ///
  /// The function is defined as a tuple of a return Type, a list of
  /// parameter types, and whether the function is variadic.
  LLVMTypeRef LLVMFunctionType(
    LLVMTypeRef ReturnType,
    ffi.Pointer<LLVMTypeRef> ParamTypes,
    int ParamCount,
    int IsVarArg,
  ) {
    return _LLVMFunctionType(
      ReturnType,
      ParamTypes,
      ParamCount,
      IsVarArg,
    );
  }

  late final _LLVMFunctionTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>,
              ffi.UnsignedInt, LLVMBool)>>('LLVMFunctionType');
  late final _LLVMFunctionType = _LLVMFunctionTypePtr.asFunction<
      LLVMTypeRef Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>, int, int)>();

  /// Returns whether a function type is variadic.
  int LLVMIsFunctionVarArg(
    LLVMTypeRef FunctionTy,
  ) {
    return _LLVMIsFunctionVarArg(
      FunctionTy,
    );
  }

  late final _LLVMIsFunctionVarArgPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTypeRef)>>(
          'LLVMIsFunctionVarArg');
  late final _LLVMIsFunctionVarArg =
      _LLVMIsFunctionVarArgPtr.asFunction<int Function(LLVMTypeRef)>();

  /// Obtain the Type this function Type returns.
  LLVMTypeRef LLVMGetReturnType(
    LLVMTypeRef FunctionTy,
  ) {
    return _LLVMGetReturnType(
      FunctionTy,
    );
  }

  late final _LLVMGetReturnTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMTypeRef)>>(
          'LLVMGetReturnType');
  late final _LLVMGetReturnType =
      _LLVMGetReturnTypePtr.asFunction<LLVMTypeRef Function(LLVMTypeRef)>();

  /// Obtain the number of parameters this function accepts.
  int LLVMCountParamTypes(
    LLVMTypeRef FunctionTy,
  ) {
    return _LLVMCountParamTypes(
      FunctionTy,
    );
  }

  late final _LLVMCountParamTypesPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMCountParamTypes');
  late final _LLVMCountParamTypes =
      _LLVMCountParamTypesPtr.asFunction<int Function(LLVMTypeRef)>();

  /// Obtain the types of a function's parameters.
  ///
  /// The Dest parameter should point to a pre-allocated array of
  /// LLVMTypeRef at least LLVMCountParamTypes() large. On return, the
  /// first LLVMCountParamTypes() entries in the array will be populated
  /// with LLVMTypeRef instances.
  ///
  /// @param FunctionTy The function type to operate on.
  /// @param Dest Memory address of an array to be filled with result.
  void LLVMGetParamTypes(
    LLVMTypeRef FunctionTy,
    ffi.Pointer<LLVMTypeRef> Dest,
  ) {
    return _LLVMGetParamTypes(
      FunctionTy,
      Dest,
    );
  }

  late final _LLVMGetParamTypesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMTypeRef, ffi.Pointer<LLVMTypeRef>)>>('LLVMGetParamTypes');
  late final _LLVMGetParamTypes = _LLVMGetParamTypesPtr.asFunction<
      void Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>)>();

  /// Create a new structure type in a context.
  ///
  /// A structure is specified by a list of inner elements/types and
  /// whether these can be packed together.
  ///
  /// @see llvm::StructType::create()
  LLVMTypeRef LLVMStructTypeInContext(
    LLVMContextRef C,
    ffi.Pointer<LLVMTypeRef> ElementTypes,
    int ElementCount,
    int Packed,
  ) {
    return _LLVMStructTypeInContext(
      C,
      ElementTypes,
      ElementCount,
      Packed,
    );
  }

  late final _LLVMStructTypeInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(LLVMContextRef, ffi.Pointer<LLVMTypeRef>,
              ffi.UnsignedInt, LLVMBool)>>('LLVMStructTypeInContext');
  late final _LLVMStructTypeInContext = _LLVMStructTypeInContextPtr.asFunction<
      LLVMTypeRef Function(
          LLVMContextRef, ffi.Pointer<LLVMTypeRef>, int, int)>();

  /// Create a new structure type in the global context.
  ///
  /// @see llvm::StructType::create()
  LLVMTypeRef LLVMStructType(
    ffi.Pointer<LLVMTypeRef> ElementTypes,
    int ElementCount,
    int Packed,
  ) {
    return _LLVMStructType(
      ElementTypes,
      ElementCount,
      Packed,
    );
  }

  late final _LLVMStructTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(ffi.Pointer<LLVMTypeRef>, ffi.UnsignedInt,
              LLVMBool)>>('LLVMStructType');
  late final _LLVMStructType = _LLVMStructTypePtr.asFunction<
      LLVMTypeRef Function(ffi.Pointer<LLVMTypeRef>, int, int)>();

  /// Create an empty structure in a context having a specified name.
  ///
  /// @see llvm::StructType::create()
  LLVMTypeRef LLVMStructCreateNamed(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMStructCreateNamed(
      C,
      Name,
    );
  }

  late final _LLVMStructCreateNamedPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMContextRef, ffi.Pointer<ffi.Char>)>>('LLVMStructCreateNamed');
  late final _LLVMStructCreateNamed = _LLVMStructCreateNamedPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>)>();

  /// Obtain the name of a structure.
  ///
  /// @see llvm::StructType::getName()
  ffi.Pointer<ffi.Char> LLVMGetStructName(
    LLVMTypeRef Ty,
  ) {
    return _LLVMGetStructName(
      Ty,
    );
  }

  late final _LLVMGetStructNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMTypeRef)>>(
          'LLVMGetStructName');
  late final _LLVMGetStructName = _LLVMGetStructNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMTypeRef)>();

  /// Set the contents of a structure type.
  ///
  /// @see llvm::StructType::setBody()
  void LLVMStructSetBody(
    LLVMTypeRef StructTy,
    ffi.Pointer<LLVMTypeRef> ElementTypes,
    int ElementCount,
    int Packed,
  ) {
    return _LLVMStructSetBody(
      StructTy,
      ElementTypes,
      ElementCount,
      Packed,
    );
  }

  late final _LLVMStructSetBodyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>,
              ffi.UnsignedInt, LLVMBool)>>('LLVMStructSetBody');
  late final _LLVMStructSetBody = _LLVMStructSetBodyPtr.asFunction<
      void Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>, int, int)>();

  /// Get the number of elements defined inside the structure.
  ///
  /// @see llvm::StructType::getNumElements()
  int LLVMCountStructElementTypes(
    LLVMTypeRef StructTy,
  ) {
    return _LLVMCountStructElementTypes(
      StructTy,
    );
  }

  late final _LLVMCountStructElementTypesPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMCountStructElementTypes');
  late final _LLVMCountStructElementTypes =
      _LLVMCountStructElementTypesPtr.asFunction<int Function(LLVMTypeRef)>();

  /// Get the elements within a structure.
  ///
  /// The function is passed the address of a pre-allocated array of
  /// LLVMTypeRef at least LLVMCountStructElementTypes() long. After
  /// invocation, this array will be populated with the structure's
  /// elements. The objects in the destination array will have a lifetime
  /// of the structure type itself, which is the lifetime of the context it
  /// is contained in.
  void LLVMGetStructElementTypes(
    LLVMTypeRef StructTy,
    ffi.Pointer<LLVMTypeRef> Dest,
  ) {
    return _LLVMGetStructElementTypes(
      StructTy,
      Dest,
    );
  }

  late final _LLVMGetStructElementTypesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMTypeRef,
              ffi.Pointer<LLVMTypeRef>)>>('LLVMGetStructElementTypes');
  late final _LLVMGetStructElementTypes = _LLVMGetStructElementTypesPtr
      .asFunction<void Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>)>();

  /// Get the type of the element at a given index in the structure.
  ///
  /// @see llvm::StructType::getTypeAtIndex()
  LLVMTypeRef LLVMStructGetTypeAtIndex(
    LLVMTypeRef StructTy,
    int i,
  ) {
    return _LLVMStructGetTypeAtIndex(
      StructTy,
      i,
    );
  }

  late final _LLVMStructGetTypeAtIndexPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMTypeRef, ffi.UnsignedInt)>>('LLVMStructGetTypeAtIndex');
  late final _LLVMStructGetTypeAtIndex = _LLVMStructGetTypeAtIndexPtr
      .asFunction<LLVMTypeRef Function(LLVMTypeRef, int)>();

  /// Determine whether a structure is packed.
  ///
  /// @see llvm::StructType::isPacked()
  int LLVMIsPackedStruct(
    LLVMTypeRef StructTy,
  ) {
    return _LLVMIsPackedStruct(
      StructTy,
    );
  }

  late final _LLVMIsPackedStructPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTypeRef)>>(
          'LLVMIsPackedStruct');
  late final _LLVMIsPackedStruct =
      _LLVMIsPackedStructPtr.asFunction<int Function(LLVMTypeRef)>();

  /// Determine whether a structure is opaque.
  ///
  /// @see llvm::StructType::isOpaque()
  int LLVMIsOpaqueStruct(
    LLVMTypeRef StructTy,
  ) {
    return _LLVMIsOpaqueStruct(
      StructTy,
    );
  }

  late final _LLVMIsOpaqueStructPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTypeRef)>>(
          'LLVMIsOpaqueStruct');
  late final _LLVMIsOpaqueStruct =
      _LLVMIsOpaqueStructPtr.asFunction<int Function(LLVMTypeRef)>();

  /// Determine whether a structure is literal.
  ///
  /// @see llvm::StructType::isLiteral()
  int LLVMIsLiteralStruct(
    LLVMTypeRef StructTy,
  ) {
    return _LLVMIsLiteralStruct(
      StructTy,
    );
  }

  late final _LLVMIsLiteralStructPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTypeRef)>>(
          'LLVMIsLiteralStruct');
  late final _LLVMIsLiteralStruct =
      _LLVMIsLiteralStructPtr.asFunction<int Function(LLVMTypeRef)>();

  /// Obtain the element type of an array or vector type.
  ///
  /// This currently also works for pointer types, but this usage is deprecated.
  ///
  /// @see llvm::SequentialType::getElementType()
  LLVMTypeRef LLVMGetElementType(
    LLVMTypeRef Ty,
  ) {
    return _LLVMGetElementType(
      Ty,
    );
  }

  late final _LLVMGetElementTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMTypeRef)>>(
          'LLVMGetElementType');
  late final _LLVMGetElementType =
      _LLVMGetElementTypePtr.asFunction<LLVMTypeRef Function(LLVMTypeRef)>();

  /// Returns type's subtypes
  ///
  /// @see llvm::Type::subtypes()
  void LLVMGetSubtypes(
    LLVMTypeRef Tp,
    ffi.Pointer<LLVMTypeRef> Arr,
  ) {
    return _LLVMGetSubtypes(
      Tp,
      Arr,
    );
  }

  late final _LLVMGetSubtypesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMTypeRef, ffi.Pointer<LLVMTypeRef>)>>('LLVMGetSubtypes');
  late final _LLVMGetSubtypes = _LLVMGetSubtypesPtr.asFunction<
      void Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>)>();

  /// Return the number of types in the derived type.
  ///
  /// @see llvm::Type::getNumContainedTypes()
  int LLVMGetNumContainedTypes(
    LLVMTypeRef Tp,
  ) {
    return _LLVMGetNumContainedTypes(
      Tp,
    );
  }

  late final _LLVMGetNumContainedTypesPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMGetNumContainedTypes');
  late final _LLVMGetNumContainedTypes =
      _LLVMGetNumContainedTypesPtr.asFunction<int Function(LLVMTypeRef)>();

  /// Create a fixed size array type that refers to a specific type.
  ///
  /// The created type will exist in the context that its element type
  /// exists in.
  ///
  /// @see llvm::ArrayType::get()
  LLVMTypeRef LLVMArrayType(
    LLVMTypeRef ElementType,
    int ElementCount,
  ) {
    return _LLVMArrayType(
      ElementType,
      ElementCount,
    );
  }

  late final _LLVMArrayTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(LLVMTypeRef, ffi.UnsignedInt)>>('LLVMArrayType');
  late final _LLVMArrayType =
      _LLVMArrayTypePtr.asFunction<LLVMTypeRef Function(LLVMTypeRef, int)>();

  /// Obtain the length of an array type.
  ///
  /// This only works on types that represent arrays.
  ///
  /// @see llvm::ArrayType::getNumElements()
  int LLVMGetArrayLength(
    LLVMTypeRef ArrayTy,
  ) {
    return _LLVMGetArrayLength(
      ArrayTy,
    );
  }

  late final _LLVMGetArrayLengthPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMGetArrayLength');
  late final _LLVMGetArrayLength =
      _LLVMGetArrayLengthPtr.asFunction<int Function(LLVMTypeRef)>();

  /// Create a pointer type that points to a defined type.
  ///
  /// The created type will exist in the context that its pointee type
  /// exists in.
  ///
  /// @see llvm::PointerType::get()
  LLVMTypeRef LLVMPointerType(
    LLVMTypeRef ElementType,
    int AddressSpace,
  ) {
    return _LLVMPointerType(
      ElementType,
      AddressSpace,
    );
  }

  late final _LLVMPointerTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMTypeRef, ffi.UnsignedInt)>>('LLVMPointerType');
  late final _LLVMPointerType =
      _LLVMPointerTypePtr.asFunction<LLVMTypeRef Function(LLVMTypeRef, int)>();

  /// Determine whether a pointer is opaque.
  ///
  /// True if this is an instance of an opaque PointerType.
  ///
  /// @see llvm::Type::isOpaquePointerTy()
  int LLVMPointerTypeIsOpaque(
    LLVMTypeRef Ty,
  ) {
    return _LLVMPointerTypeIsOpaque(
      Ty,
    );
  }

  late final _LLVMPointerTypeIsOpaquePtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTypeRef)>>(
          'LLVMPointerTypeIsOpaque');
  late final _LLVMPointerTypeIsOpaque =
      _LLVMPointerTypeIsOpaquePtr.asFunction<int Function(LLVMTypeRef)>();

  /// Create an opaque pointer type in a context.
  ///
  /// @see llvm::PointerType::get()
  LLVMTypeRef LLVMPointerTypeInContext(
    LLVMContextRef C,
    int AddressSpace,
  ) {
    return _LLVMPointerTypeInContext(
      C,
      AddressSpace,
    );
  }

  late final _LLVMPointerTypeInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMContextRef, ffi.UnsignedInt)>>('LLVMPointerTypeInContext');
  late final _LLVMPointerTypeInContext = _LLVMPointerTypeInContextPtr
      .asFunction<LLVMTypeRef Function(LLVMContextRef, int)>();

  /// Obtain the address space of a pointer type.
  ///
  /// This only works on types that represent pointers.
  ///
  /// @see llvm::PointerType::getAddressSpace()
  int LLVMGetPointerAddressSpace(
    LLVMTypeRef PointerTy,
  ) {
    return _LLVMGetPointerAddressSpace(
      PointerTy,
    );
  }

  late final _LLVMGetPointerAddressSpacePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMGetPointerAddressSpace');
  late final _LLVMGetPointerAddressSpace =
      _LLVMGetPointerAddressSpacePtr.asFunction<int Function(LLVMTypeRef)>();

  /// Create a vector type that contains a defined type and has a specific
  /// number of elements.
  ///
  /// The created type will exist in the context thats its element type
  /// exists in.
  ///
  /// @see llvm::VectorType::get()
  LLVMTypeRef LLVMVectorType(
    LLVMTypeRef ElementType,
    int ElementCount,
  ) {
    return _LLVMVectorType(
      ElementType,
      ElementCount,
    );
  }

  late final _LLVMVectorTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMTypeRef, ffi.UnsignedInt)>>('LLVMVectorType');
  late final _LLVMVectorType =
      _LLVMVectorTypePtr.asFunction<LLVMTypeRef Function(LLVMTypeRef, int)>();

  /// Create a vector type that contains a defined type and has a scalable
  /// number of elements.
  ///
  /// The created type will exist in the context thats its element type
  /// exists in.
  ///
  /// @see llvm::ScalableVectorType::get()
  LLVMTypeRef LLVMScalableVectorType(
    LLVMTypeRef ElementType,
    int ElementCount,
  ) {
    return _LLVMScalableVectorType(
      ElementType,
      ElementCount,
    );
  }

  late final _LLVMScalableVectorTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMTypeRef, ffi.UnsignedInt)>>('LLVMScalableVectorType');
  late final _LLVMScalableVectorType = _LLVMScalableVectorTypePtr.asFunction<
      LLVMTypeRef Function(LLVMTypeRef, int)>();

  /// Obtain the (possibly scalable) number of elements in a vector type.
  ///
  /// This only works on types that represent vectors (fixed or scalable).
  ///
  /// @see llvm::VectorType::getNumElements()
  int LLVMGetVectorSize(
    LLVMTypeRef VectorTy,
  ) {
    return _LLVMGetVectorSize(
      VectorTy,
    );
  }

  late final _LLVMGetVectorSizePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMGetVectorSize');
  late final _LLVMGetVectorSize =
      _LLVMGetVectorSizePtr.asFunction<int Function(LLVMTypeRef)>();

  /// Create a void type in a context.
  LLVMTypeRef LLVMVoidTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMVoidTypeInContext(
      C,
    );
  }

  late final _LLVMVoidTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMVoidTypeInContext');
  late final _LLVMVoidTypeInContext = _LLVMVoidTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  /// Create a label type in a context.
  LLVMTypeRef LLVMLabelTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMLabelTypeInContext(
      C,
    );
  }

  late final _LLVMLabelTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMLabelTypeInContext');
  late final _LLVMLabelTypeInContext = _LLVMLabelTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  /// Create a X86 MMX type in a context.
  LLVMTypeRef LLVMX86MMXTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMX86MMXTypeInContext(
      C,
    );
  }

  late final _LLVMX86MMXTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMX86MMXTypeInContext');
  late final _LLVMX86MMXTypeInContext = _LLVMX86MMXTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  /// Create a X86 AMX type in a context.
  LLVMTypeRef LLVMX86AMXTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMX86AMXTypeInContext(
      C,
    );
  }

  late final _LLVMX86AMXTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMX86AMXTypeInContext');
  late final _LLVMX86AMXTypeInContext = _LLVMX86AMXTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  /// Create a token type in a context.
  LLVMTypeRef LLVMTokenTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMTokenTypeInContext(
      C,
    );
  }

  late final _LLVMTokenTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMTokenTypeInContext');
  late final _LLVMTokenTypeInContext = _LLVMTokenTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  /// Create a metadata type in a context.
  LLVMTypeRef LLVMMetadataTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMMetadataTypeInContext(
      C,
    );
  }

  late final _LLVMMetadataTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMMetadataTypeInContext');
  late final _LLVMMetadataTypeInContext = _LLVMMetadataTypeInContextPtr
      .asFunction<LLVMTypeRef Function(LLVMContextRef)>();

  /// These are similar to the above functions except they operate on the
  /// global context.
  LLVMTypeRef LLVMVoidType() {
    return _LLVMVoidType();
  }

  late final _LLVMVoidTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMVoidType');
  late final _LLVMVoidType =
      _LLVMVoidTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMLabelType() {
    return _LLVMLabelType();
  }

  late final _LLVMLabelTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMLabelType');
  late final _LLVMLabelType =
      _LLVMLabelTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMX86MMXType() {
    return _LLVMX86MMXType();
  }

  late final _LLVMX86MMXTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMX86MMXType');
  late final _LLVMX86MMXType =
      _LLVMX86MMXTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMX86AMXType() {
    return _LLVMX86AMXType();
  }

  late final _LLVMX86AMXTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMX86AMXType');
  late final _LLVMX86AMXType =
      _LLVMX86AMXTypePtr.asFunction<LLVMTypeRef Function()>();

  /// Create a target extension type in LLVM context.
  LLVMTypeRef LLVMTargetExtTypeInContext(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Name,
    ffi.Pointer<LLVMTypeRef> TypeParams,
    int TypeParamCount,
    ffi.Pointer<ffi.UnsignedInt> IntParams,
    int IntParamCount,
  ) {
    return _LLVMTargetExtTypeInContext(
      C,
      Name,
      TypeParams,
      TypeParamCount,
      IntParams,
      IntParamCount,
    );
  }

  late final _LLVMTargetExtTypeInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMContextRef,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<LLVMTypeRef>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('LLVMTargetExtTypeInContext');
  late final _LLVMTargetExtTypeInContext =
      _LLVMTargetExtTypeInContextPtr.asFunction<
          LLVMTypeRef Function(
              LLVMContextRef,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<LLVMTypeRef>,
              int,
              ffi.Pointer<ffi.UnsignedInt>,
              int)>();

  /// Obtain the type of a value.
  ///
  /// @see llvm::Value::getType()
  LLVMTypeRef LLVMTypeOf(
    LLVMValueRef Val,
  ) {
    return _LLVMTypeOf(
      Val,
    );
  }

  late final _LLVMTypeOfPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMValueRef)>>(
          'LLVMTypeOf');
  late final _LLVMTypeOf =
      _LLVMTypeOfPtr.asFunction<LLVMTypeRef Function(LLVMValueRef)>();

  /// Obtain the enumerated type of a Value instance.
  ///
  /// @see llvm::Value::getValueID()
  int LLVMGetValueKind(
    LLVMValueRef Val,
  ) {
    return _LLVMGetValueKind(
      Val,
    );
  }

  late final _LLVMGetValueKindPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetValueKind');
  late final _LLVMGetValueKind =
      _LLVMGetValueKindPtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain the string name of a value.
  ///
  /// @see llvm::Value::getName()
  ffi.Pointer<ffi.Char> LLVMGetValueName2(
    LLVMValueRef Val,
    ffi.Pointer<ffi.Size> Length,
  ) {
    return _LLVMGetValueName2(
      Val,
      Length,
    );
  }

  late final _LLVMGetValueName2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMValueRef, ffi.Pointer<ffi.Size>)>>('LLVMGetValueName2');
  late final _LLVMGetValueName2 = _LLVMGetValueName2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMValueRef, ffi.Pointer<ffi.Size>)>();

  /// Set the string name of a value.
  ///
  /// @see llvm::Value::setName()
  void LLVMSetValueName2(
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMSetValueName2(
      Val,
      Name,
      NameLen,
    );
  }

  late final _LLVMSetValueName2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMSetValueName2');
  late final _LLVMSetValueName2 = _LLVMSetValueName2Ptr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<ffi.Char>, int)>();

  /// Dump a representation of a value to stderr.
  ///
  /// @see llvm::Value::dump()
  void LLVMDumpValue(
    LLVMValueRef Val,
  ) {
    return _LLVMDumpValue(
      Val,
    );
  }

  late final _LLVMDumpValuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMDumpValue');
  late final _LLVMDumpValue =
      _LLVMDumpValuePtr.asFunction<void Function(LLVMValueRef)>();

  /// Return a string representation of the value. Use
  /// LLVMDisposeMessage to free the string.
  ///
  /// @see llvm::Value::print()
  ffi.Pointer<ffi.Char> LLVMPrintValueToString(
    LLVMValueRef Val,
  ) {
    return _LLVMPrintValueToString(
      Val,
    );
  }

  late final _LLVMPrintValueToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMValueRef)>>(
          'LLVMPrintValueToString');
  late final _LLVMPrintValueToString = _LLVMPrintValueToStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMValueRef)>();

  /// Replace all uses of a value with another one.
  ///
  /// @see llvm::Value::replaceAllUsesWith()
  void LLVMReplaceAllUsesWith(
    LLVMValueRef OldVal,
    LLVMValueRef NewVal,
  ) {
    return _LLVMReplaceAllUsesWith(
      OldVal,
      NewVal,
    );
  }

  late final _LLVMReplaceAllUsesWithPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMReplaceAllUsesWith');
  late final _LLVMReplaceAllUsesWith = _LLVMReplaceAllUsesWithPtr.asFunction<
      void Function(LLVMValueRef, LLVMValueRef)>();

  /// Determine whether the specified value instance is constant.
  int LLVMIsConstant(
    LLVMValueRef Val,
  ) {
    return _LLVMIsConstant(
      Val,
    );
  }

  late final _LLVMIsConstantPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsConstant');
  late final _LLVMIsConstant =
      _LLVMIsConstantPtr.asFunction<int Function(LLVMValueRef)>();

  /// Determine whether a value instance is undefined.
  int LLVMIsUndef(
    LLVMValueRef Val,
  ) {
    return _LLVMIsUndef(
      Val,
    );
  }

  late final _LLVMIsUndefPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsUndef');
  late final _LLVMIsUndef =
      _LLVMIsUndefPtr.asFunction<int Function(LLVMValueRef)>();

  /// Determine whether a value instance is poisonous.
  int LLVMIsPoison(
    LLVMValueRef Val,
  ) {
    return _LLVMIsPoison(
      Val,
    );
  }

  late final _LLVMIsPoisonPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsPoison');
  late final _LLVMIsPoison =
      _LLVMIsPoisonPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAArgument(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAArgument(
      Val,
    );
  }

  late final _LLVMIsAArgumentPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAArgument');
  late final _LLVMIsAArgument =
      _LLVMIsAArgumentPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsABasicBlock(
    LLVMValueRef Val,
  ) {
    return _LLVMIsABasicBlock(
      Val,
    );
  }

  late final _LLVMIsABasicBlockPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsABasicBlock');
  late final _LLVMIsABasicBlock =
      _LLVMIsABasicBlockPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAInlineAsm(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAInlineAsm(
      Val,
    );
  }

  late final _LLVMIsAInlineAsmPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAInlineAsm');
  late final _LLVMIsAInlineAsm =
      _LLVMIsAInlineAsmPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAUser(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAUser(
      Val,
    );
  }

  late final _LLVMIsAUserPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAUser');
  late final _LLVMIsAUser =
      _LLVMIsAUserPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstant(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstant(
      Val,
    );
  }

  late final _LLVMIsAConstantPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstant');
  late final _LLVMIsAConstant =
      _LLVMIsAConstantPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsABlockAddress(
    LLVMValueRef Val,
  ) {
    return _LLVMIsABlockAddress(
      Val,
    );
  }

  late final _LLVMIsABlockAddressPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsABlockAddress');
  late final _LLVMIsABlockAddress =
      _LLVMIsABlockAddressPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantAggregateZero(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantAggregateZero(
      Val,
    );
  }

  late final _LLVMIsAConstantAggregateZeroPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantAggregateZero');
  late final _LLVMIsAConstantAggregateZero = _LLVMIsAConstantAggregateZeroPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantArray(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantArray(
      Val,
    );
  }

  late final _LLVMIsAConstantArrayPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantArray');
  late final _LLVMIsAConstantArray = _LLVMIsAConstantArrayPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantDataSequential(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantDataSequential(
      Val,
    );
  }

  late final _LLVMIsAConstantDataSequentialPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantDataSequential');
  late final _LLVMIsAConstantDataSequential = _LLVMIsAConstantDataSequentialPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantDataArray(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantDataArray(
      Val,
    );
  }

  late final _LLVMIsAConstantDataArrayPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantDataArray');
  late final _LLVMIsAConstantDataArray = _LLVMIsAConstantDataArrayPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantDataVector(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantDataVector(
      Val,
    );
  }

  late final _LLVMIsAConstantDataVectorPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantDataVector');
  late final _LLVMIsAConstantDataVector = _LLVMIsAConstantDataVectorPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantExpr(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantExpr(
      Val,
    );
  }

  late final _LLVMIsAConstantExprPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantExpr');
  late final _LLVMIsAConstantExpr =
      _LLVMIsAConstantExprPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantFP(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantFP(
      Val,
    );
  }

  late final _LLVMIsAConstantFPPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantFP');
  late final _LLVMIsAConstantFP =
      _LLVMIsAConstantFPPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantInt(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantInt(
      Val,
    );
  }

  late final _LLVMIsAConstantIntPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantInt');
  late final _LLVMIsAConstantInt =
      _LLVMIsAConstantIntPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantPointerNull(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantPointerNull(
      Val,
    );
  }

  late final _LLVMIsAConstantPointerNullPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantPointerNull');
  late final _LLVMIsAConstantPointerNull = _LLVMIsAConstantPointerNullPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantStruct(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantStruct(
      Val,
    );
  }

  late final _LLVMIsAConstantStructPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantStruct');
  late final _LLVMIsAConstantStruct = _LLVMIsAConstantStructPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantTokenNone(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantTokenNone(
      Val,
    );
  }

  late final _LLVMIsAConstantTokenNonePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantTokenNone');
  late final _LLVMIsAConstantTokenNone = _LLVMIsAConstantTokenNonePtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantVector(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantVector(
      Val,
    );
  }

  late final _LLVMIsAConstantVectorPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantVector');
  late final _LLVMIsAConstantVector = _LLVMIsAConstantVectorPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAGlobalValue(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAGlobalValue(
      Val,
    );
  }

  late final _LLVMIsAGlobalValuePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAGlobalValue');
  late final _LLVMIsAGlobalValue =
      _LLVMIsAGlobalValuePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAGlobalAlias(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAGlobalAlias(
      Val,
    );
  }

  late final _LLVMIsAGlobalAliasPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAGlobalAlias');
  late final _LLVMIsAGlobalAlias =
      _LLVMIsAGlobalAliasPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAGlobalObject(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAGlobalObject(
      Val,
    );
  }

  late final _LLVMIsAGlobalObjectPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAGlobalObject');
  late final _LLVMIsAGlobalObject =
      _LLVMIsAGlobalObjectPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFunction(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFunction(
      Val,
    );
  }

  late final _LLVMIsAFunctionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFunction');
  late final _LLVMIsAFunction =
      _LLVMIsAFunctionPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAGlobalVariable(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAGlobalVariable(
      Val,
    );
  }

  late final _LLVMIsAGlobalVariablePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAGlobalVariable');
  late final _LLVMIsAGlobalVariable = _LLVMIsAGlobalVariablePtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAGlobalIFunc(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAGlobalIFunc(
      Val,
    );
  }

  late final _LLVMIsAGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAGlobalIFunc');
  late final _LLVMIsAGlobalIFunc =
      _LLVMIsAGlobalIFuncPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAUndefValue(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAUndefValue(
      Val,
    );
  }

  late final _LLVMIsAUndefValuePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAUndefValue');
  late final _LLVMIsAUndefValue =
      _LLVMIsAUndefValuePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAPoisonValue(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAPoisonValue(
      Val,
    );
  }

  late final _LLVMIsAPoisonValuePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAPoisonValue');
  late final _LLVMIsAPoisonValue =
      _LLVMIsAPoisonValuePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAInstruction(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAInstruction(
      Val,
    );
  }

  late final _LLVMIsAInstructionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAInstruction');
  late final _LLVMIsAInstruction =
      _LLVMIsAInstructionPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAUnaryOperator(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAUnaryOperator(
      Val,
    );
  }

  late final _LLVMIsAUnaryOperatorPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAUnaryOperator');
  late final _LLVMIsAUnaryOperator = _LLVMIsAUnaryOperatorPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsABinaryOperator(
    LLVMValueRef Val,
  ) {
    return _LLVMIsABinaryOperator(
      Val,
    );
  }

  late final _LLVMIsABinaryOperatorPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsABinaryOperator');
  late final _LLVMIsABinaryOperator = _LLVMIsABinaryOperatorPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACallInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACallInst(
      Val,
    );
  }

  late final _LLVMIsACallInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACallInst');
  late final _LLVMIsACallInst =
      _LLVMIsACallInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAIntrinsicInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAIntrinsicInst(
      Val,
    );
  }

  late final _LLVMIsAIntrinsicInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAIntrinsicInst');
  late final _LLVMIsAIntrinsicInst = _LLVMIsAIntrinsicInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsADbgInfoIntrinsic(
    LLVMValueRef Val,
  ) {
    return _LLVMIsADbgInfoIntrinsic(
      Val,
    );
  }

  late final _LLVMIsADbgInfoIntrinsicPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsADbgInfoIntrinsic');
  late final _LLVMIsADbgInfoIntrinsic = _LLVMIsADbgInfoIntrinsicPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsADbgVariableIntrinsic(
    LLVMValueRef Val,
  ) {
    return _LLVMIsADbgVariableIntrinsic(
      Val,
    );
  }

  late final _LLVMIsADbgVariableIntrinsicPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsADbgVariableIntrinsic');
  late final _LLVMIsADbgVariableIntrinsic = _LLVMIsADbgVariableIntrinsicPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsADbgDeclareInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsADbgDeclareInst(
      Val,
    );
  }

  late final _LLVMIsADbgDeclareInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsADbgDeclareInst');
  late final _LLVMIsADbgDeclareInst = _LLVMIsADbgDeclareInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsADbgLabelInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsADbgLabelInst(
      Val,
    );
  }

  late final _LLVMIsADbgLabelInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsADbgLabelInst');
  late final _LLVMIsADbgLabelInst =
      _LLVMIsADbgLabelInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAMemIntrinsic(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAMemIntrinsic(
      Val,
    );
  }

  late final _LLVMIsAMemIntrinsicPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAMemIntrinsic');
  late final _LLVMIsAMemIntrinsic =
      _LLVMIsAMemIntrinsicPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAMemCpyInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAMemCpyInst(
      Val,
    );
  }

  late final _LLVMIsAMemCpyInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAMemCpyInst');
  late final _LLVMIsAMemCpyInst =
      _LLVMIsAMemCpyInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAMemMoveInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAMemMoveInst(
      Val,
    );
  }

  late final _LLVMIsAMemMoveInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAMemMoveInst');
  late final _LLVMIsAMemMoveInst =
      _LLVMIsAMemMoveInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAMemSetInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAMemSetInst(
      Val,
    );
  }

  late final _LLVMIsAMemSetInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAMemSetInst');
  late final _LLVMIsAMemSetInst =
      _LLVMIsAMemSetInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACmpInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACmpInst(
      Val,
    );
  }

  late final _LLVMIsACmpInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACmpInst');
  late final _LLVMIsACmpInst =
      _LLVMIsACmpInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFCmpInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFCmpInst(
      Val,
    );
  }

  late final _LLVMIsAFCmpInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFCmpInst');
  late final _LLVMIsAFCmpInst =
      _LLVMIsAFCmpInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAICmpInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAICmpInst(
      Val,
    );
  }

  late final _LLVMIsAICmpInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAICmpInst');
  late final _LLVMIsAICmpInst =
      _LLVMIsAICmpInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAExtractElementInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAExtractElementInst(
      Val,
    );
  }

  late final _LLVMIsAExtractElementInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAExtractElementInst');
  late final _LLVMIsAExtractElementInst = _LLVMIsAExtractElementInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAGetElementPtrInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAGetElementPtrInst(
      Val,
    );
  }

  late final _LLVMIsAGetElementPtrInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAGetElementPtrInst');
  late final _LLVMIsAGetElementPtrInst = _LLVMIsAGetElementPtrInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAInsertElementInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAInsertElementInst(
      Val,
    );
  }

  late final _LLVMIsAInsertElementInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAInsertElementInst');
  late final _LLVMIsAInsertElementInst = _LLVMIsAInsertElementInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAInsertValueInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAInsertValueInst(
      Val,
    );
  }

  late final _LLVMIsAInsertValueInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAInsertValueInst');
  late final _LLVMIsAInsertValueInst = _LLVMIsAInsertValueInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsALandingPadInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsALandingPadInst(
      Val,
    );
  }

  late final _LLVMIsALandingPadInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsALandingPadInst');
  late final _LLVMIsALandingPadInst = _LLVMIsALandingPadInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAPHINode(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAPHINode(
      Val,
    );
  }

  late final _LLVMIsAPHINodePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAPHINode');
  late final _LLVMIsAPHINode =
      _LLVMIsAPHINodePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsASelectInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsASelectInst(
      Val,
    );
  }

  late final _LLVMIsASelectInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsASelectInst');
  late final _LLVMIsASelectInst =
      _LLVMIsASelectInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAShuffleVectorInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAShuffleVectorInst(
      Val,
    );
  }

  late final _LLVMIsAShuffleVectorInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAShuffleVectorInst');
  late final _LLVMIsAShuffleVectorInst = _LLVMIsAShuffleVectorInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAStoreInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAStoreInst(
      Val,
    );
  }

  late final _LLVMIsAStoreInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAStoreInst');
  late final _LLVMIsAStoreInst =
      _LLVMIsAStoreInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsABranchInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsABranchInst(
      Val,
    );
  }

  late final _LLVMIsABranchInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsABranchInst');
  late final _LLVMIsABranchInst =
      _LLVMIsABranchInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAIndirectBrInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAIndirectBrInst(
      Val,
    );
  }

  late final _LLVMIsAIndirectBrInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAIndirectBrInst');
  late final _LLVMIsAIndirectBrInst = _LLVMIsAIndirectBrInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAInvokeInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAInvokeInst(
      Val,
    );
  }

  late final _LLVMIsAInvokeInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAInvokeInst');
  late final _LLVMIsAInvokeInst =
      _LLVMIsAInvokeInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAReturnInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAReturnInst(
      Val,
    );
  }

  late final _LLVMIsAReturnInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAReturnInst');
  late final _LLVMIsAReturnInst =
      _LLVMIsAReturnInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsASwitchInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsASwitchInst(
      Val,
    );
  }

  late final _LLVMIsASwitchInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsASwitchInst');
  late final _LLVMIsASwitchInst =
      _LLVMIsASwitchInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAUnreachableInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAUnreachableInst(
      Val,
    );
  }

  late final _LLVMIsAUnreachableInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAUnreachableInst');
  late final _LLVMIsAUnreachableInst = _LLVMIsAUnreachableInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAResumeInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAResumeInst(
      Val,
    );
  }

  late final _LLVMIsAResumeInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAResumeInst');
  late final _LLVMIsAResumeInst =
      _LLVMIsAResumeInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACleanupReturnInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACleanupReturnInst(
      Val,
    );
  }

  late final _LLVMIsACleanupReturnInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACleanupReturnInst');
  late final _LLVMIsACleanupReturnInst = _LLVMIsACleanupReturnInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACatchReturnInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACatchReturnInst(
      Val,
    );
  }

  late final _LLVMIsACatchReturnInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACatchReturnInst');
  late final _LLVMIsACatchReturnInst = _LLVMIsACatchReturnInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACatchSwitchInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACatchSwitchInst(
      Val,
    );
  }

  late final _LLVMIsACatchSwitchInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACatchSwitchInst');
  late final _LLVMIsACatchSwitchInst = _LLVMIsACatchSwitchInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACallBrInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACallBrInst(
      Val,
    );
  }

  late final _LLVMIsACallBrInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACallBrInst');
  late final _LLVMIsACallBrInst =
      _LLVMIsACallBrInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFuncletPadInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFuncletPadInst(
      Val,
    );
  }

  late final _LLVMIsAFuncletPadInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFuncletPadInst');
  late final _LLVMIsAFuncletPadInst = _LLVMIsAFuncletPadInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACatchPadInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACatchPadInst(
      Val,
    );
  }

  late final _LLVMIsACatchPadInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACatchPadInst');
  late final _LLVMIsACatchPadInst =
      _LLVMIsACatchPadInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACleanupPadInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACleanupPadInst(
      Val,
    );
  }

  late final _LLVMIsACleanupPadInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACleanupPadInst');
  late final _LLVMIsACleanupPadInst = _LLVMIsACleanupPadInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAUnaryInstruction(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAUnaryInstruction(
      Val,
    );
  }

  late final _LLVMIsAUnaryInstructionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAUnaryInstruction');
  late final _LLVMIsAUnaryInstruction = _LLVMIsAUnaryInstructionPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAAllocaInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAAllocaInst(
      Val,
    );
  }

  late final _LLVMIsAAllocaInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAAllocaInst');
  late final _LLVMIsAAllocaInst =
      _LLVMIsAAllocaInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACastInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACastInst(
      Val,
    );
  }

  late final _LLVMIsACastInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACastInst');
  late final _LLVMIsACastInst =
      _LLVMIsACastInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAAddrSpaceCastInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAAddrSpaceCastInst(
      Val,
    );
  }

  late final _LLVMIsAAddrSpaceCastInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAAddrSpaceCastInst');
  late final _LLVMIsAAddrSpaceCastInst = _LLVMIsAAddrSpaceCastInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsABitCastInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsABitCastInst(
      Val,
    );
  }

  late final _LLVMIsABitCastInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsABitCastInst');
  late final _LLVMIsABitCastInst =
      _LLVMIsABitCastInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFPExtInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFPExtInst(
      Val,
    );
  }

  late final _LLVMIsAFPExtInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFPExtInst');
  late final _LLVMIsAFPExtInst =
      _LLVMIsAFPExtInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFPToSIInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFPToSIInst(
      Val,
    );
  }

  late final _LLVMIsAFPToSIInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFPToSIInst');
  late final _LLVMIsAFPToSIInst =
      _LLVMIsAFPToSIInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFPToUIInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFPToUIInst(
      Val,
    );
  }

  late final _LLVMIsAFPToUIInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFPToUIInst');
  late final _LLVMIsAFPToUIInst =
      _LLVMIsAFPToUIInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFPTruncInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFPTruncInst(
      Val,
    );
  }

  late final _LLVMIsAFPTruncInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFPTruncInst');
  late final _LLVMIsAFPTruncInst =
      _LLVMIsAFPTruncInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAIntToPtrInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAIntToPtrInst(
      Val,
    );
  }

  late final _LLVMIsAIntToPtrInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAIntToPtrInst');
  late final _LLVMIsAIntToPtrInst =
      _LLVMIsAIntToPtrInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAPtrToIntInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAPtrToIntInst(
      Val,
    );
  }

  late final _LLVMIsAPtrToIntInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAPtrToIntInst');
  late final _LLVMIsAPtrToIntInst =
      _LLVMIsAPtrToIntInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsASExtInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsASExtInst(
      Val,
    );
  }

  late final _LLVMIsASExtInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsASExtInst');
  late final _LLVMIsASExtInst =
      _LLVMIsASExtInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsASIToFPInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsASIToFPInst(
      Val,
    );
  }

  late final _LLVMIsASIToFPInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsASIToFPInst');
  late final _LLVMIsASIToFPInst =
      _LLVMIsASIToFPInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsATruncInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsATruncInst(
      Val,
    );
  }

  late final _LLVMIsATruncInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsATruncInst');
  late final _LLVMIsATruncInst =
      _LLVMIsATruncInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAUIToFPInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAUIToFPInst(
      Val,
    );
  }

  late final _LLVMIsAUIToFPInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAUIToFPInst');
  late final _LLVMIsAUIToFPInst =
      _LLVMIsAUIToFPInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAZExtInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAZExtInst(
      Val,
    );
  }

  late final _LLVMIsAZExtInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAZExtInst');
  late final _LLVMIsAZExtInst =
      _LLVMIsAZExtInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAExtractValueInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAExtractValueInst(
      Val,
    );
  }

  late final _LLVMIsAExtractValueInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAExtractValueInst');
  late final _LLVMIsAExtractValueInst = _LLVMIsAExtractValueInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsALoadInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsALoadInst(
      Val,
    );
  }

  late final _LLVMIsALoadInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsALoadInst');
  late final _LLVMIsALoadInst =
      _LLVMIsALoadInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAVAArgInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAVAArgInst(
      Val,
    );
  }

  late final _LLVMIsAVAArgInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAVAArgInst');
  late final _LLVMIsAVAArgInst =
      _LLVMIsAVAArgInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFreezeInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFreezeInst(
      Val,
    );
  }

  late final _LLVMIsAFreezeInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFreezeInst');
  late final _LLVMIsAFreezeInst =
      _LLVMIsAFreezeInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAAtomicCmpXchgInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAAtomicCmpXchgInst(
      Val,
    );
  }

  late final _LLVMIsAAtomicCmpXchgInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAAtomicCmpXchgInst');
  late final _LLVMIsAAtomicCmpXchgInst = _LLVMIsAAtomicCmpXchgInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAAtomicRMWInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAAtomicRMWInst(
      Val,
    );
  }

  late final _LLVMIsAAtomicRMWInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAAtomicRMWInst');
  late final _LLVMIsAAtomicRMWInst = _LLVMIsAAtomicRMWInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFenceInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFenceInst(
      Val,
    );
  }

  late final _LLVMIsAFenceInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFenceInst');
  late final _LLVMIsAFenceInst =
      _LLVMIsAFenceInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAMDNode(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAMDNode(
      Val,
    );
  }

  late final _LLVMIsAMDNodePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAMDNode');
  late final _LLVMIsAMDNode =
      _LLVMIsAMDNodePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAMDString(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAMDString(
      Val,
    );
  }

  late final _LLVMIsAMDStringPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAMDString');
  late final _LLVMIsAMDString =
      _LLVMIsAMDStringPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Deprecated: Use LLVMGetValueName2 instead.
  ffi.Pointer<ffi.Char> LLVMGetValueName(
    LLVMValueRef Val,
  ) {
    return _LLVMGetValueName(
      Val,
    );
  }

  late final _LLVMGetValueNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMValueRef)>>(
          'LLVMGetValueName');
  late final _LLVMGetValueName = _LLVMGetValueNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMValueRef)>();

  /// Deprecated: Use LLVMSetValueName2 instead.
  void LLVMSetValueName(
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMSetValueName(
      Val,
      Name,
    );
  }

  late final _LLVMSetValueNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMSetValueName');
  late final _LLVMSetValueName = _LLVMSetValueNamePtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  /// Obtain the first use of a value.
  ///
  /// Uses are obtained in an iterator fashion. First, call this function
  /// to obtain a reference to the first use. Then, call LLVMGetNextUse()
  /// on that instance and all subsequently obtained instances until
  /// LLVMGetNextUse() returns NULL.
  ///
  /// @see llvm::Value::use_begin()
  LLVMUseRef LLVMGetFirstUse(
    LLVMValueRef Val,
  ) {
    return _LLVMGetFirstUse(
      Val,
    );
  }

  late final _LLVMGetFirstUsePtr =
      _lookup<ffi.NativeFunction<LLVMUseRef Function(LLVMValueRef)>>(
          'LLVMGetFirstUse');
  late final _LLVMGetFirstUse =
      _LLVMGetFirstUsePtr.asFunction<LLVMUseRef Function(LLVMValueRef)>();

  /// Obtain the next use of a value.
  ///
  /// This effectively advances the iterator. It returns NULL if you are on
  /// the final use and no more are available.
  LLVMUseRef LLVMGetNextUse(
    LLVMUseRef U,
  ) {
    return _LLVMGetNextUse(
      U,
    );
  }

  late final _LLVMGetNextUsePtr =
      _lookup<ffi.NativeFunction<LLVMUseRef Function(LLVMUseRef)>>(
          'LLVMGetNextUse');
  late final _LLVMGetNextUse =
      _LLVMGetNextUsePtr.asFunction<LLVMUseRef Function(LLVMUseRef)>();

  /// Obtain the user value for a user.
  ///
  /// The returned value corresponds to a llvm::User type.
  ///
  /// @see llvm::Use::getUser()
  LLVMValueRef LLVMGetUser(
    LLVMUseRef U,
  ) {
    return _LLVMGetUser(
      U,
    );
  }

  late final _LLVMGetUserPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMUseRef)>>(
          'LLVMGetUser');
  late final _LLVMGetUser =
      _LLVMGetUserPtr.asFunction<LLVMValueRef Function(LLVMUseRef)>();

  /// Obtain the value this use corresponds to.
  ///
  /// @see llvm::Use::get().
  LLVMValueRef LLVMGetUsedValue(
    LLVMUseRef U,
  ) {
    return _LLVMGetUsedValue(
      U,
    );
  }

  late final _LLVMGetUsedValuePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMUseRef)>>(
          'LLVMGetUsedValue');
  late final _LLVMGetUsedValue =
      _LLVMGetUsedValuePtr.asFunction<LLVMValueRef Function(LLVMUseRef)>();

  /// Obtain an operand at a specific index in a llvm::User value.
  ///
  /// @see llvm::User::getOperand()
  LLVMValueRef LLVMGetOperand(
    LLVMValueRef Val,
    int Index,
  ) {
    return _LLVMGetOperand(
      Val,
      Index,
    );
  }

  late final _LLVMGetOperandPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetOperand');
  late final _LLVMGetOperand =
      _LLVMGetOperandPtr.asFunction<LLVMValueRef Function(LLVMValueRef, int)>();

  /// Obtain the use of an operand at a specific index in a llvm::User value.
  ///
  /// @see llvm::User::getOperandUse()
  LLVMUseRef LLVMGetOperandUse(
    LLVMValueRef Val,
    int Index,
  ) {
    return _LLVMGetOperandUse(
      Val,
      Index,
    );
  }

  late final _LLVMGetOperandUsePtr = _lookup<
      ffi.NativeFunction<
          LLVMUseRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetOperandUse');
  late final _LLVMGetOperandUse = _LLVMGetOperandUsePtr.asFunction<
      LLVMUseRef Function(LLVMValueRef, int)>();

  /// Set an operand at a specific index in a llvm::User value.
  ///
  /// @see llvm::User::setOperand()
  void LLVMSetOperand(
    LLVMValueRef User,
    int Index,
    LLVMValueRef Val,
  ) {
    return _LLVMSetOperand(
      User,
      Index,
      Val,
    );
  }

  late final _LLVMSetOperandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, ffi.UnsignedInt, LLVMValueRef)>>('LLVMSetOperand');
  late final _LLVMSetOperand = _LLVMSetOperandPtr.asFunction<
      void Function(LLVMValueRef, int, LLVMValueRef)>();

  /// Obtain the number of operands in a llvm::User value.
  ///
  /// @see llvm::User::getNumOperands()
  int LLVMGetNumOperands(
    LLVMValueRef Val,
  ) {
    return _LLVMGetNumOperands(
      Val,
    );
  }

  late final _LLVMGetNumOperandsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LLVMValueRef)>>(
          'LLVMGetNumOperands');
  late final _LLVMGetNumOperands =
      _LLVMGetNumOperandsPtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain a constant value referring to the null instance of a type.
  ///
  /// @see llvm::Constant::getNullValue()
  LLVMValueRef LLVMConstNull(
    LLVMTypeRef Ty,
  ) {
    return _LLVMConstNull(
      Ty,
    );
  }

  late final _LLVMConstNullPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMConstNull');
  late final _LLVMConstNull =
      _LLVMConstNullPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  /// Obtain a constant value referring to the instance of a type
  /// consisting of all ones.
  ///
  /// This is only valid for integer types.
  ///
  /// @see llvm::Constant::getAllOnesValue()
  LLVMValueRef LLVMConstAllOnes(
    LLVMTypeRef Ty,
  ) {
    return _LLVMConstAllOnes(
      Ty,
    );
  }

  late final _LLVMConstAllOnesPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMConstAllOnes');
  late final _LLVMConstAllOnes =
      _LLVMConstAllOnesPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  /// Obtain a constant value referring to an undefined value of a type.
  ///
  /// @see llvm::UndefValue::get()
  LLVMValueRef LLVMGetUndef(
    LLVMTypeRef Ty,
  ) {
    return _LLVMGetUndef(
      Ty,
    );
  }

  late final _LLVMGetUndefPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMGetUndef');
  late final _LLVMGetUndef =
      _LLVMGetUndefPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  /// Obtain a constant value referring to a poison value of a type.
  ///
  /// @see llvm::PoisonValue::get()
  LLVMValueRef LLVMGetPoison(
    LLVMTypeRef Ty,
  ) {
    return _LLVMGetPoison(
      Ty,
    );
  }

  late final _LLVMGetPoisonPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMGetPoison');
  late final _LLVMGetPoison =
      _LLVMGetPoisonPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  /// Determine whether a value instance is null.
  ///
  /// @see llvm::Constant::isNullValue()
  int LLVMIsNull(
    LLVMValueRef Val,
  ) {
    return _LLVMIsNull(
      Val,
    );
  }

  late final _LLVMIsNullPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsNull');
  late final _LLVMIsNull =
      _LLVMIsNullPtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain a constant that is a constant pointer pointing to NULL for a
  /// specified type.
  LLVMValueRef LLVMConstPointerNull(
    LLVMTypeRef Ty,
  ) {
    return _LLVMConstPointerNull(
      Ty,
    );
  }

  late final _LLVMConstPointerNullPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMConstPointerNull');
  late final _LLVMConstPointerNull =
      _LLVMConstPointerNullPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  /// Obtain a constant value for an integer type.
  ///
  /// The returned value corresponds to a llvm::ConstantInt.
  ///
  /// @see llvm::ConstantInt::get()
  ///
  /// @param IntTy Integer type to obtain value of.
  /// @param N The value the returned instance should refer to.
  /// @param SignExtend Whether to sign extend the produced value.
  LLVMValueRef LLVMConstInt(
    LLVMTypeRef IntTy,
    int N,
    int SignExtend,
  ) {
    return _LLVMConstInt(
      IntTy,
      N,
      SignExtend,
    );
  }

  late final _LLVMConstIntPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMTypeRef, ffi.UnsignedLongLong, LLVMBool)>>('LLVMConstInt');
  late final _LLVMConstInt = _LLVMConstIntPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, int, int)>();

  /// Obtain a constant value for an integer of arbitrary precision.
  ///
  /// @see llvm::ConstantInt::get()
  LLVMValueRef LLVMConstIntOfArbitraryPrecision(
    LLVMTypeRef IntTy,
    int NumWords,
    ffi.Pointer<ffi.Uint64> Words,
  ) {
    return _LLVMConstIntOfArbitraryPrecision(
      IntTy,
      NumWords,
      Words,
    );
  }

  late final _LLVMConstIntOfArbitraryPrecisionPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.UnsignedInt,
              ffi.Pointer<ffi.Uint64>)>>('LLVMConstIntOfArbitraryPrecision');
  late final _LLVMConstIntOfArbitraryPrecision =
      _LLVMConstIntOfArbitraryPrecisionPtr.asFunction<
          LLVMValueRef Function(LLVMTypeRef, int, ffi.Pointer<ffi.Uint64>)>();

  /// Obtain a constant value for an integer parsed from a string.
  ///
  /// A similar API, LLVMConstIntOfStringAndSize is also available. If the
  /// string's length is available, it is preferred to call that function
  /// instead.
  ///
  /// @see llvm::ConstantInt::get()
  LLVMValueRef LLVMConstIntOfString(
    LLVMTypeRef IntTy,
    ffi.Pointer<ffi.Char> Text,
    int Radix,
  ) {
    return _LLVMConstIntOfString(
      IntTy,
      Text,
      Radix,
    );
  }

  late final _LLVMConstIntOfStringPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('LLVMConstIntOfString');
  late final _LLVMConstIntOfString = _LLVMConstIntOfStringPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>, int)>();

  /// Obtain a constant value for an integer parsed from a string with
  /// specified length.
  ///
  /// @see llvm::ConstantInt::get()
  LLVMValueRef LLVMConstIntOfStringAndSize(
    LLVMTypeRef IntTy,
    ffi.Pointer<ffi.Char> Text,
    int SLen,
    int Radix,
  ) {
    return _LLVMConstIntOfStringAndSize(
      IntTy,
      Text,
      SLen,
      Radix,
    );
  }

  late final _LLVMConstIntOfStringAndSizePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.Uint8)>>('LLVMConstIntOfStringAndSize');
  late final _LLVMConstIntOfStringAndSize =
      _LLVMConstIntOfStringAndSizePtr.asFunction<
          LLVMValueRef Function(
              LLVMTypeRef, ffi.Pointer<ffi.Char>, int, int)>();

  /// Obtain a constant value referring to a double floating point value.
  LLVMValueRef LLVMConstReal(
    LLVMTypeRef RealTy,
    double N,
  ) {
    return _LLVMConstReal(
      RealTy,
      N,
    );
  }

  late final _LLVMConstRealPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef, ffi.Double)>>(
      'LLVMConstReal');
  late final _LLVMConstReal = _LLVMConstRealPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, double)>();

  /// Obtain a constant for a floating point value parsed from a string.
  ///
  /// A similar API, LLVMConstRealOfStringAndSize is also available. It
  /// should be used if the input string's length is known.
  LLVMValueRef LLVMConstRealOfString(
    LLVMTypeRef RealTy,
    ffi.Pointer<ffi.Char> Text,
  ) {
    return _LLVMConstRealOfString(
      RealTy,
      Text,
    );
  }

  late final _LLVMConstRealOfStringPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMTypeRef, ffi.Pointer<ffi.Char>)>>('LLVMConstRealOfString');
  late final _LLVMConstRealOfString = _LLVMConstRealOfStringPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  /// Obtain a constant for a floating point value parsed from a string.
  LLVMValueRef LLVMConstRealOfStringAndSize(
    LLVMTypeRef RealTy,
    ffi.Pointer<ffi.Char> Text,
    int SLen,
  ) {
    return _LLVMConstRealOfStringAndSize(
      RealTy,
      Text,
      SLen,
    );
  }

  late final _LLVMConstRealOfStringAndSizePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMConstRealOfStringAndSize');
  late final _LLVMConstRealOfStringAndSize =
      _LLVMConstRealOfStringAndSizePtr.asFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>, int)>();

  /// Obtain the zero extended value for an integer constant value.
  ///
  /// @see llvm::ConstantInt::getZExtValue()
  int LLVMConstIntGetZExtValue(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMConstIntGetZExtValue(
      ConstantVal,
    );
  }

  late final _LLVMConstIntGetZExtValuePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLongLong Function(LLVMValueRef)>>(
          'LLVMConstIntGetZExtValue');
  late final _LLVMConstIntGetZExtValue =
      _LLVMConstIntGetZExtValuePtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain the sign extended value for an integer constant value.
  ///
  /// @see llvm::ConstantInt::getSExtValue()
  int LLVMConstIntGetSExtValue(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMConstIntGetSExtValue(
      ConstantVal,
    );
  }

  late final _LLVMConstIntGetSExtValuePtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(LLVMValueRef)>>(
          'LLVMConstIntGetSExtValue');
  late final _LLVMConstIntGetSExtValue =
      _LLVMConstIntGetSExtValuePtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain the double value for an floating point constant value.
  /// losesInfo indicates if some precision was lost in the conversion.
  ///
  /// @see llvm::ConstantFP::getDoubleValue
  double LLVMConstRealGetDouble(
    LLVMValueRef ConstantVal,
    ffi.Pointer<LLVMBool> losesInfo,
  ) {
    return _LLVMConstRealGetDouble(
      ConstantVal,
      losesInfo,
    );
  }

  late final _LLVMConstRealGetDoublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              LLVMValueRef, ffi.Pointer<LLVMBool>)>>('LLVMConstRealGetDouble');
  late final _LLVMConstRealGetDouble = _LLVMConstRealGetDoublePtr.asFunction<
      double Function(LLVMValueRef, ffi.Pointer<LLVMBool>)>();

  /// Create a ConstantDataSequential and initialize it with a string.
  ///
  /// @see llvm::ConstantDataArray::getString()
  LLVMValueRef LLVMConstStringInContext(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Str,
    int Length,
    int DontNullTerminate,
  ) {
    return _LLVMConstStringInContext(
      C,
      Str,
      Length,
      DontNullTerminate,
    );
  }

  late final _LLVMConstStringInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, LLVMBool)>>('LLVMConstStringInContext');
  late final _LLVMConstStringInContext =
      _LLVMConstStringInContextPtr.asFunction<
          LLVMValueRef Function(
              LLVMContextRef, ffi.Pointer<ffi.Char>, int, int)>();

  /// Create a ConstantDataSequential with string content in the global context.
  ///
  /// This is the same as LLVMConstStringInContext except it operates on the
  /// global context.
  ///
  /// @see LLVMConstStringInContext()
  /// @see llvm::ConstantDataArray::getString()
  LLVMValueRef LLVMConstString(
    ffi.Pointer<ffi.Char> Str,
    int Length,
    int DontNullTerminate,
  ) {
    return _LLVMConstString(
      Str,
      Length,
      DontNullTerminate,
    );
  }

  late final _LLVMConstStringPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              LLVMBool)>>('LLVMConstString');
  late final _LLVMConstString = _LLVMConstStringPtr.asFunction<
      LLVMValueRef Function(ffi.Pointer<ffi.Char>, int, int)>();

  /// Returns true if the specified constant is an array of i8.
  ///
  /// @see ConstantDataSequential::getAsString()
  int LLVMIsConstantString(
    LLVMValueRef c,
  ) {
    return _LLVMIsConstantString(
      c,
    );
  }

  late final _LLVMIsConstantStringPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsConstantString');
  late final _LLVMIsConstantString =
      _LLVMIsConstantStringPtr.asFunction<int Function(LLVMValueRef)>();

  /// Get the given constant data sequential as a string.
  ///
  /// @see ConstantDataSequential::getAsString()
  ffi.Pointer<ffi.Char> LLVMGetAsString(
    LLVMValueRef c,
    ffi.Pointer<ffi.Size> Length,
  ) {
    return _LLVMGetAsString(
      c,
      Length,
    );
  }

  late final _LLVMGetAsStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMValueRef, ffi.Pointer<ffi.Size>)>>('LLVMGetAsString');
  late final _LLVMGetAsString = _LLVMGetAsStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMValueRef, ffi.Pointer<ffi.Size>)>();

  /// Create an anonymous ConstantStruct with the specified values.
  ///
  /// @see llvm::ConstantStruct::getAnon()
  LLVMValueRef LLVMConstStructInContext(
    LLVMContextRef C,
    ffi.Pointer<LLVMValueRef> ConstantVals,
    int Count,
    int Packed,
  ) {
    return _LLVMConstStructInContext(
      C,
      ConstantVals,
      Count,
      Packed,
    );
  }

  late final _LLVMConstStructInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMContextRef, ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt, LLVMBool)>>('LLVMConstStructInContext');
  late final _LLVMConstStructInContext =
      _LLVMConstStructInContextPtr.asFunction<
          LLVMValueRef Function(
              LLVMContextRef, ffi.Pointer<LLVMValueRef>, int, int)>();

  /// Create a ConstantStruct in the global Context.
  ///
  /// This is the same as LLVMConstStructInContext except it operates on the
  /// global Context.
  ///
  /// @see LLVMConstStructInContext()
  LLVMValueRef LLVMConstStruct(
    ffi.Pointer<LLVMValueRef> ConstantVals,
    int Count,
    int Packed,
  ) {
    return _LLVMConstStruct(
      ConstantVals,
      Count,
      Packed,
    );
  }

  late final _LLVMConstStructPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(ffi.Pointer<LLVMValueRef>, ffi.UnsignedInt,
              LLVMBool)>>('LLVMConstStruct');
  late final _LLVMConstStruct = _LLVMConstStructPtr.asFunction<
      LLVMValueRef Function(ffi.Pointer<LLVMValueRef>, int, int)>();

  /// Create a ConstantArray from values.
  ///
  /// @see llvm::ConstantArray::get()
  LLVMValueRef LLVMConstArray(
    LLVMTypeRef ElementTy,
    ffi.Pointer<LLVMValueRef> ConstantVals,
    int Length,
  ) {
    return _LLVMConstArray(
      ElementTy,
      ConstantVals,
      Length,
    );
  }

  late final _LLVMConstArrayPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt)>>('LLVMConstArray');
  late final _LLVMConstArray = _LLVMConstArrayPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<LLVMValueRef>, int)>();

  /// Create a non-anonymous ConstantStruct from values.
  ///
  /// @see llvm::ConstantStruct::get()
  LLVMValueRef LLVMConstNamedStruct(
    LLVMTypeRef StructTy,
    ffi.Pointer<LLVMValueRef> ConstantVals,
    int Count,
  ) {
    return _LLVMConstNamedStruct(
      StructTy,
      ConstantVals,
      Count,
    );
  }

  late final _LLVMConstNamedStructPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt)>>('LLVMConstNamedStruct');
  late final _LLVMConstNamedStruct = _LLVMConstNamedStructPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<LLVMValueRef>, int)>();

  /// Get element of a constant aggregate (struct, array or vector) at the
  /// specified index. Returns null if the index is out of range, or it's not
  /// possible to determine the element (e.g., because the constant is a
  /// constant expression.)
  ///
  /// @see llvm::Constant::getAggregateElement()
  LLVMValueRef LLVMGetAggregateElement(
    LLVMValueRef C,
    int Idx,
  ) {
    return _LLVMGetAggregateElement(
      C,
      Idx,
    );
  }

  late final _LLVMGetAggregateElementPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetAggregateElement');
  late final _LLVMGetAggregateElement = _LLVMGetAggregateElementPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, int)>();

  LLVMValueRef LLVMGetElementAsConstant(
    LLVMValueRef C,
    int idx,
  ) {
    return _LLVMGetElementAsConstant(
      C,
      idx,
    );
  }

  late final _LLVMGetElementAsConstantPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetElementAsConstant');
  late final _LLVMGetElementAsConstant = _LLVMGetElementAsConstantPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef, int)>();

  /// Create a ConstantVector from values.
  ///
  /// @see llvm::ConstantVector::get()
  LLVMValueRef LLVMConstVector(
    ffi.Pointer<LLVMValueRef> ScalarConstantVals,
    int Size,
  ) {
    return _LLVMConstVector(
      ScalarConstantVals,
      Size,
    );
  }

  late final _LLVMConstVectorPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              ffi.Pointer<LLVMValueRef>, ffi.UnsignedInt)>>('LLVMConstVector');
  late final _LLVMConstVector = _LLVMConstVectorPtr.asFunction<
      LLVMValueRef Function(ffi.Pointer<LLVMValueRef>, int)>();

  /// @defgroup LLVMCCoreValueConstantExpressions Constant Expressions
  ///
  /// Functions in this group correspond to APIs on llvm::ConstantExpr.
  ///
  /// @see llvm::ConstantExpr.
  ///
  /// @{
  int LLVMGetConstOpcode(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMGetConstOpcode(
      ConstantVal,
    );
  }

  late final _LLVMGetConstOpcodePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetConstOpcode');
  late final _LLVMGetConstOpcode =
      _LLVMGetConstOpcodePtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMAlignOf(
    LLVMTypeRef Ty,
  ) {
    return _LLVMAlignOf(
      Ty,
    );
  }

  late final _LLVMAlignOfPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMAlignOf');
  late final _LLVMAlignOf =
      _LLVMAlignOfPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  LLVMValueRef LLVMSizeOf(
    LLVMTypeRef Ty,
  ) {
    return _LLVMSizeOf(
      Ty,
    );
  }

  late final _LLVMSizeOfPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMSizeOf');
  late final _LLVMSizeOf =
      _LLVMSizeOfPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  LLVMValueRef LLVMConstNeg(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMConstNeg(
      ConstantVal,
    );
  }

  late final _LLVMConstNegPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMConstNeg');
  late final _LLVMConstNeg =
      _LLVMConstNegPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMConstNSWNeg(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMConstNSWNeg(
      ConstantVal,
    );
  }

  late final _LLVMConstNSWNegPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMConstNSWNeg');
  late final _LLVMConstNSWNeg =
      _LLVMConstNSWNegPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMConstNUWNeg(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMConstNUWNeg(
      ConstantVal,
    );
  }

  late final _LLVMConstNUWNegPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMConstNUWNeg');
  late final _LLVMConstNUWNeg =
      _LLVMConstNUWNegPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMConstNot(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMConstNot(
      ConstantVal,
    );
  }

  late final _LLVMConstNotPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMConstNot');
  late final _LLVMConstNot =
      _LLVMConstNotPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMConstAdd(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstAdd(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstAdd');
  late final _LLVMConstAdd = _LLVMConstAddPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstNSWAdd(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstNSWAdd(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstNSWAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstNSWAdd');
  late final _LLVMConstNSWAdd = _LLVMConstNSWAddPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstNUWAdd(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstNUWAdd(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstNUWAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstNUWAdd');
  late final _LLVMConstNUWAdd = _LLVMConstNUWAddPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstSub(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstSub(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstSub');
  late final _LLVMConstSub = _LLVMConstSubPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstNSWSub(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstNSWSub(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstNSWSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstNSWSub');
  late final _LLVMConstNSWSub = _LLVMConstNSWSubPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstNUWSub(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstNUWSub(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstNUWSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstNUWSub');
  late final _LLVMConstNUWSub = _LLVMConstNUWSubPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstMul(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstMul(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstMul');
  late final _LLVMConstMul = _LLVMConstMulPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstNSWMul(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstNSWMul(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstNSWMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstNSWMul');
  late final _LLVMConstNSWMul = _LLVMConstNSWMulPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstNUWMul(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstNUWMul(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstNUWMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstNUWMul');
  late final _LLVMConstNUWMul = _LLVMConstNUWMulPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstAnd(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstAnd(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstAndPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstAnd');
  late final _LLVMConstAnd = _LLVMConstAndPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstOr(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstOr(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstOrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstOr');
  late final _LLVMConstOr = _LLVMConstOrPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstXor(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstXor(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstXorPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstXor');
  late final _LLVMConstXor = _LLVMConstXorPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstICmp(
    int Predicate,
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstICmp(
      Predicate,
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstICmpPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              ffi.Int32, LLVMValueRef, LLVMValueRef)>>('LLVMConstICmp');
  late final _LLVMConstICmp = _LLVMConstICmpPtr.asFunction<
      LLVMValueRef Function(int, LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstFCmp(
    int Predicate,
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstFCmp(
      Predicate,
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstFCmpPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              ffi.Int32, LLVMValueRef, LLVMValueRef)>>('LLVMConstFCmp');
  late final _LLVMConstFCmp = _LLVMConstFCmpPtr.asFunction<
      LLVMValueRef Function(int, LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstShl(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstShl(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstShlPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstShl');
  late final _LLVMConstShl = _LLVMConstShlPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstLShr(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstLShr(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstLShrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstLShr');
  late final _LLVMConstLShr = _LLVMConstLShrPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstAShr(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstAShr(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstAShrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstAShr');
  late final _LLVMConstAShr = _LLVMConstAShrPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstGEP2(
    LLVMTypeRef Ty,
    LLVMValueRef ConstantVal,
    ffi.Pointer<LLVMValueRef> ConstantIndices,
    int NumIndices,
  ) {
    return _LLVMConstGEP2(
      Ty,
      ConstantVal,
      ConstantIndices,
      NumIndices,
    );
  }

  late final _LLVMConstGEP2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, LLVMValueRef,
              ffi.Pointer<LLVMValueRef>, ffi.UnsignedInt)>>('LLVMConstGEP2');
  late final _LLVMConstGEP2 = _LLVMConstGEP2Ptr.asFunction<
      LLVMValueRef Function(
          LLVMTypeRef, LLVMValueRef, ffi.Pointer<LLVMValueRef>, int)>();

  LLVMValueRef LLVMConstInBoundsGEP2(
    LLVMTypeRef Ty,
    LLVMValueRef ConstantVal,
    ffi.Pointer<LLVMValueRef> ConstantIndices,
    int NumIndices,
  ) {
    return _LLVMConstInBoundsGEP2(
      Ty,
      ConstantVal,
      ConstantIndices,
      NumIndices,
    );
  }

  late final _LLVMConstInBoundsGEP2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMTypeRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt)>>('LLVMConstInBoundsGEP2');
  late final _LLVMConstInBoundsGEP2 = _LLVMConstInBoundsGEP2Ptr.asFunction<
      LLVMValueRef Function(
          LLVMTypeRef, LLVMValueRef, ffi.Pointer<LLVMValueRef>, int)>();

  LLVMValueRef LLVMConstTrunc(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstTrunc(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstTruncPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstTrunc');
  late final _LLVMConstTrunc = _LLVMConstTruncPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstSExt(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstSExt(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstSExtPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstSExt');
  late final _LLVMConstSExt = _LLVMConstSExtPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstZExt(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstZExt(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstZExtPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstZExt');
  late final _LLVMConstZExt = _LLVMConstZExtPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstFPTrunc(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstFPTrunc(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstFPTruncPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstFPTrunc');
  late final _LLVMConstFPTrunc = _LLVMConstFPTruncPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstFPExt(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstFPExt(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstFPExtPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstFPExt');
  late final _LLVMConstFPExt = _LLVMConstFPExtPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstUIToFP(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstUIToFP(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstUIToFPPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstUIToFP');
  late final _LLVMConstUIToFP = _LLVMConstUIToFPPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstSIToFP(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstSIToFP(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstSIToFPPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstSIToFP');
  late final _LLVMConstSIToFP = _LLVMConstSIToFPPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstFPToUI(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstFPToUI(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstFPToUIPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstFPToUI');
  late final _LLVMConstFPToUI = _LLVMConstFPToUIPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstFPToSI(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstFPToSI(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstFPToSIPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstFPToSI');
  late final _LLVMConstFPToSI = _LLVMConstFPToSIPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstPtrToInt(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstPtrToInt(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstPtrToIntPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstPtrToInt');
  late final _LLVMConstPtrToInt = _LLVMConstPtrToIntPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstIntToPtr(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstIntToPtr(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstIntToPtrPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstIntToPtr');
  late final _LLVMConstIntToPtr = _LLVMConstIntToPtrPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstBitCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstBitCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstBitCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstBitCast');
  late final _LLVMConstBitCast = _LLVMConstBitCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstAddrSpaceCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstAddrSpaceCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstAddrSpaceCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstAddrSpaceCast');
  late final _LLVMConstAddrSpaceCast = _LLVMConstAddrSpaceCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstZExtOrBitCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstZExtOrBitCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstZExtOrBitCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstZExtOrBitCast');
  late final _LLVMConstZExtOrBitCast = _LLVMConstZExtOrBitCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstSExtOrBitCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstSExtOrBitCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstSExtOrBitCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstSExtOrBitCast');
  late final _LLVMConstSExtOrBitCast = _LLVMConstSExtOrBitCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstTruncOrBitCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstTruncOrBitCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstTruncOrBitCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstTruncOrBitCast');
  late final _LLVMConstTruncOrBitCast = _LLVMConstTruncOrBitCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstPointerCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstPointerCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstPointerCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstPointerCast');
  late final _LLVMConstPointerCast = _LLVMConstPointerCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstIntCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
    int isSigned,
  ) {
    return _LLVMConstIntCast(
      ConstantVal,
      ToType,
      isSigned,
    );
  }

  late final _LLVMConstIntCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMTypeRef, LLVMBool)>>('LLVMConstIntCast');
  late final _LLVMConstIntCast = _LLVMConstIntCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef, int)>();

  LLVMValueRef LLVMConstFPCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstFPCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstFPCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstFPCast');
  late final _LLVMConstFPCast = _LLVMConstFPCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstSelect(
    LLVMValueRef ConstantCondition,
    LLVMValueRef ConstantIfTrue,
    LLVMValueRef ConstantIfFalse,
  ) {
    return _LLVMConstSelect(
      ConstantCondition,
      ConstantIfTrue,
      ConstantIfFalse,
    );
  }

  late final _LLVMConstSelectPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef, LLVMValueRef)>>('LLVMConstSelect');
  late final _LLVMConstSelect = _LLVMConstSelectPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstExtractElement(
    LLVMValueRef VectorConstant,
    LLVMValueRef IndexConstant,
  ) {
    return _LLVMConstExtractElement(
      VectorConstant,
      IndexConstant,
    );
  }

  late final _LLVMConstExtractElementPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstExtractElement');
  late final _LLVMConstExtractElement = _LLVMConstExtractElementPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstInsertElement(
    LLVMValueRef VectorConstant,
    LLVMValueRef ElementValueConstant,
    LLVMValueRef IndexConstant,
  ) {
    return _LLVMConstInsertElement(
      VectorConstant,
      ElementValueConstant,
      IndexConstant,
    );
  }

  late final _LLVMConstInsertElementPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef,
              LLVMValueRef)>>('LLVMConstInsertElement');
  late final _LLVMConstInsertElement = _LLVMConstInsertElementPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstShuffleVector(
    LLVMValueRef VectorAConstant,
    LLVMValueRef VectorBConstant,
    LLVMValueRef MaskConstant,
  ) {
    return _LLVMConstShuffleVector(
      VectorAConstant,
      VectorBConstant,
      MaskConstant,
    );
  }

  late final _LLVMConstShuffleVectorPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef,
              LLVMValueRef)>>('LLVMConstShuffleVector');
  late final _LLVMConstShuffleVector = _LLVMConstShuffleVectorPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMBlockAddress(
    LLVMValueRef F,
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMBlockAddress(
      F,
      BB,
    );
  }

  late final _LLVMBlockAddressPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMBasicBlockRef)>>('LLVMBlockAddress');
  late final _LLVMBlockAddress = _LLVMBlockAddressPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMBasicBlockRef)>();

  /// Deprecated: Use LLVMGetInlineAsm instead.
  LLVMValueRef LLVMConstInlineAsm(
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> AsmString,
    ffi.Pointer<ffi.Char> Constraints,
    int HasSideEffects,
    int IsAlignStack,
  ) {
    return _LLVMConstInlineAsm(
      Ty,
      AsmString,
      Constraints,
      HasSideEffects,
      IsAlignStack,
    );
  }

  late final _LLVMConstInlineAsmPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMTypeRef,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              LLVMBool,
              LLVMBool)>>('LLVMConstInlineAsm');
  late final _LLVMConstInlineAsm = _LLVMConstInlineAsmPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, int)>();

  /// @defgroup LLVMCCoreValueConstantGlobals Global Values
  ///
  /// This group contains functions that operate on global values. Functions in
  /// this group relate to functions in the llvm::GlobalValue class tree.
  ///
  /// @see llvm::GlobalValue
  ///
  /// @{
  LLVMModuleRef LLVMGetGlobalParent(
    LLVMValueRef Global,
  ) {
    return _LLVMGetGlobalParent(
      Global,
    );
  }

  late final _LLVMGetGlobalParentPtr =
      _lookup<ffi.NativeFunction<LLVMModuleRef Function(LLVMValueRef)>>(
          'LLVMGetGlobalParent');
  late final _LLVMGetGlobalParent = _LLVMGetGlobalParentPtr.asFunction<
      LLVMModuleRef Function(LLVMValueRef)>();

  int LLVMIsDeclaration(
    LLVMValueRef Global,
  ) {
    return _LLVMIsDeclaration(
      Global,
    );
  }

  late final _LLVMIsDeclarationPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsDeclaration');
  late final _LLVMIsDeclaration =
      _LLVMIsDeclarationPtr.asFunction<int Function(LLVMValueRef)>();

  int LLVMGetLinkage(
    LLVMValueRef Global,
  ) {
    return _LLVMGetLinkage(
      Global,
    );
  }

  late final _LLVMGetLinkagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetLinkage');
  late final _LLVMGetLinkage =
      _LLVMGetLinkagePtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetLinkage(
    LLVMValueRef Global,
    int Linkage,
  ) {
    return _LLVMSetLinkage(
      Global,
      Linkage,
    );
  }

  late final _LLVMSetLinkagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetLinkage');
  late final _LLVMSetLinkage =
      _LLVMSetLinkagePtr.asFunction<void Function(LLVMValueRef, int)>();

  ffi.Pointer<ffi.Char> LLVMGetSection(
    LLVMValueRef Global,
  ) {
    return _LLVMGetSection(
      Global,
    );
  }

  late final _LLVMGetSectionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMValueRef)>>(
          'LLVMGetSection');
  late final _LLVMGetSection = _LLVMGetSectionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMValueRef)>();

  void LLVMSetSection(
    LLVMValueRef Global,
    ffi.Pointer<ffi.Char> Section,
  ) {
    return _LLVMSetSection(
      Global,
      Section,
    );
  }

  late final _LLVMSetSectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMSetSection');
  late final _LLVMSetSection = _LLVMSetSectionPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  int LLVMGetVisibility(
    LLVMValueRef Global,
  ) {
    return _LLVMGetVisibility(
      Global,
    );
  }

  late final _LLVMGetVisibilityPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetVisibility');
  late final _LLVMGetVisibility =
      _LLVMGetVisibilityPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetVisibility(
    LLVMValueRef Global,
    int Viz,
  ) {
    return _LLVMSetVisibility(
      Global,
      Viz,
    );
  }

  late final _LLVMSetVisibilityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetVisibility');
  late final _LLVMSetVisibility =
      _LLVMSetVisibilityPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetDLLStorageClass(
    LLVMValueRef Global,
  ) {
    return _LLVMGetDLLStorageClass(
      Global,
    );
  }

  late final _LLVMGetDLLStorageClassPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetDLLStorageClass');
  late final _LLVMGetDLLStorageClass =
      _LLVMGetDLLStorageClassPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetDLLStorageClass(
    LLVMValueRef Global,
    int Class,
  ) {
    return _LLVMSetDLLStorageClass(
      Global,
      Class,
    );
  }

  late final _LLVMSetDLLStorageClassPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetDLLStorageClass');
  late final _LLVMSetDLLStorageClass =
      _LLVMSetDLLStorageClassPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetUnnamedAddress(
    LLVMValueRef Global,
  ) {
    return _LLVMGetUnnamedAddress(
      Global,
    );
  }

  late final _LLVMGetUnnamedAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetUnnamedAddress');
  late final _LLVMGetUnnamedAddress =
      _LLVMGetUnnamedAddressPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetUnnamedAddress(
    LLVMValueRef Global,
    int UnnamedAddr,
  ) {
    return _LLVMSetUnnamedAddress(
      Global,
      UnnamedAddr,
    );
  }

  late final _LLVMSetUnnamedAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetUnnamedAddress');
  late final _LLVMSetUnnamedAddress =
      _LLVMSetUnnamedAddressPtr.asFunction<void Function(LLVMValueRef, int)>();

  /// Returns the "value type" of a global value.  This differs from the formal
  /// type of a global value which is always a pointer type.
  ///
  /// @see llvm::GlobalValue::getValueType()
  LLVMTypeRef LLVMGlobalGetValueType(
    LLVMValueRef Global,
  ) {
    return _LLVMGlobalGetValueType(
      Global,
    );
  }

  late final _LLVMGlobalGetValueTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMValueRef)>>(
          'LLVMGlobalGetValueType');
  late final _LLVMGlobalGetValueType = _LLVMGlobalGetValueTypePtr.asFunction<
      LLVMTypeRef Function(LLVMValueRef)>();

  /// Deprecated: Use LLVMGetUnnamedAddress instead.
  int LLVMHasUnnamedAddr(
    LLVMValueRef Global,
  ) {
    return _LLVMHasUnnamedAddr(
      Global,
    );
  }

  late final _LLVMHasUnnamedAddrPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMHasUnnamedAddr');
  late final _LLVMHasUnnamedAddr =
      _LLVMHasUnnamedAddrPtr.asFunction<int Function(LLVMValueRef)>();

  /// Deprecated: Use LLVMSetUnnamedAddress instead.
  void LLVMSetUnnamedAddr(
    LLVMValueRef Global,
    int HasUnnamedAddr,
  ) {
    return _LLVMSetUnnamedAddr(
      Global,
      HasUnnamedAddr,
    );
  }

  late final _LLVMSetUnnamedAddrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetUnnamedAddr');
  late final _LLVMSetUnnamedAddr =
      _LLVMSetUnnamedAddrPtr.asFunction<void Function(LLVMValueRef, int)>();

  /// Obtain the preferred alignment of the value.
  /// @see llvm::AllocaInst::getAlignment()
  /// @see llvm::LoadInst::getAlignment()
  /// @see llvm::StoreInst::getAlignment()
  /// @see llvm::AtomicRMWInst::setAlignment()
  /// @see llvm::AtomicCmpXchgInst::setAlignment()
  /// @see llvm::GlobalValue::getAlignment()
  int LLVMGetAlignment(
    LLVMValueRef V,
  ) {
    return _LLVMGetAlignment(
      V,
    );
  }

  late final _LLVMGetAlignmentPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetAlignment');
  late final _LLVMGetAlignment =
      _LLVMGetAlignmentPtr.asFunction<int Function(LLVMValueRef)>();

  /// Set the preferred alignment of the value.
  /// @see llvm::AllocaInst::setAlignment()
  /// @see llvm::LoadInst::setAlignment()
  /// @see llvm::StoreInst::setAlignment()
  /// @see llvm::AtomicRMWInst::setAlignment()
  /// @see llvm::AtomicCmpXchgInst::setAlignment()
  /// @see llvm::GlobalValue::setAlignment()
  void LLVMSetAlignment(
    LLVMValueRef V,
    int Bytes,
  ) {
    return _LLVMSetAlignment(
      V,
      Bytes,
    );
  }

  late final _LLVMSetAlignmentPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.UnsignedInt)>>(
      'LLVMSetAlignment');
  late final _LLVMSetAlignment =
      _LLVMSetAlignmentPtr.asFunction<void Function(LLVMValueRef, int)>();

  /// Sets a metadata attachment, erasing the existing metadata attachment if
  /// it already exists for the given kind.
  ///
  /// @see llvm::GlobalObject::setMetadata()
  void LLVMGlobalSetMetadata(
    LLVMValueRef Global,
    int Kind,
    LLVMMetadataRef MD,
  ) {
    return _LLVMGlobalSetMetadata(
      Global,
      Kind,
      MD,
    );
  }

  late final _LLVMGlobalSetMetadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.UnsignedInt,
              LLVMMetadataRef)>>('LLVMGlobalSetMetadata');
  late final _LLVMGlobalSetMetadata = _LLVMGlobalSetMetadataPtr.asFunction<
      void Function(LLVMValueRef, int, LLVMMetadataRef)>();

  /// Erases a metadata attachment of the given kind if it exists.
  ///
  /// @see llvm::GlobalObject::eraseMetadata()
  void LLVMGlobalEraseMetadata(
    LLVMValueRef Global,
    int Kind,
  ) {
    return _LLVMGlobalEraseMetadata(
      Global,
      Kind,
    );
  }

  late final _LLVMGlobalEraseMetadataPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.UnsignedInt)>>(
      'LLVMGlobalEraseMetadata');
  late final _LLVMGlobalEraseMetadata = _LLVMGlobalEraseMetadataPtr.asFunction<
      void Function(LLVMValueRef, int)>();

  /// Removes all metadata attachments from this value.
  ///
  /// @see llvm::GlobalObject::clearMetadata()
  void LLVMGlobalClearMetadata(
    LLVMValueRef Global,
  ) {
    return _LLVMGlobalClearMetadata(
      Global,
    );
  }

  late final _LLVMGlobalClearMetadataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMGlobalClearMetadata');
  late final _LLVMGlobalClearMetadata =
      _LLVMGlobalClearMetadataPtr.asFunction<void Function(LLVMValueRef)>();

  /// Retrieves an array of metadata entries representing the metadata attached to
  /// this value. The caller is responsible for freeing this array by calling
  /// \c LLVMDisposeValueMetadataEntries.
  ///
  /// @see llvm::GlobalObject::getAllMetadata()
  ffi.Pointer<LLVMValueMetadataEntry> LLVMGlobalCopyAllMetadata(
    LLVMValueRef Value,
    ffi.Pointer<ffi.Size> NumEntries,
  ) {
    return _LLVMGlobalCopyAllMetadata(
      Value,
      NumEntries,
    );
  }

  late final _LLVMGlobalCopyAllMetadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LLVMValueMetadataEntry> Function(LLVMValueRef,
              ffi.Pointer<ffi.Size>)>>('LLVMGlobalCopyAllMetadata');
  late final _LLVMGlobalCopyAllMetadata =
      _LLVMGlobalCopyAllMetadataPtr.asFunction<
          ffi.Pointer<LLVMValueMetadataEntry> Function(
              LLVMValueRef, ffi.Pointer<ffi.Size>)>();

  /// Destroys value metadata entries.
  void LLVMDisposeValueMetadataEntries(
    ffi.Pointer<LLVMValueMetadataEntry> Entries,
  ) {
    return _LLVMDisposeValueMetadataEntries(
      Entries,
    );
  }

  late final _LLVMDisposeValueMetadataEntriesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<LLVMValueMetadataEntry>)>>(
      'LLVMDisposeValueMetadataEntries');
  late final _LLVMDisposeValueMetadataEntries =
      _LLVMDisposeValueMetadataEntriesPtr.asFunction<
          void Function(ffi.Pointer<LLVMValueMetadataEntry>)>();

  /// Returns the kind of a value metadata entry at a specific index.
  int LLVMValueMetadataEntriesGetKind(
    ffi.Pointer<LLVMValueMetadataEntry> Entries,
    int Index,
  ) {
    return _LLVMValueMetadataEntriesGetKind(
      Entries,
      Index,
    );
  }

  late final _LLVMValueMetadataEntriesGetKindPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<LLVMValueMetadataEntry>,
              ffi.UnsignedInt)>>('LLVMValueMetadataEntriesGetKind');
  late final _LLVMValueMetadataEntriesGetKind =
      _LLVMValueMetadataEntriesGetKindPtr.asFunction<
          int Function(ffi.Pointer<LLVMValueMetadataEntry>, int)>();

  /// Returns the underlying metadata node of a value metadata entry at a
  /// specific index.
  LLVMMetadataRef LLVMValueMetadataEntriesGetMetadata(
    ffi.Pointer<LLVMValueMetadataEntry> Entries,
    int Index,
  ) {
    return _LLVMValueMetadataEntriesGetMetadata(
      Entries,
      Index,
    );
  }

  late final _LLVMValueMetadataEntriesGetMetadataPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(ffi.Pointer<LLVMValueMetadataEntry>,
              ffi.UnsignedInt)>>('LLVMValueMetadataEntriesGetMetadata');
  late final _LLVMValueMetadataEntriesGetMetadata =
      _LLVMValueMetadataEntriesGetMetadataPtr.asFunction<
          LLVMMetadataRef Function(ffi.Pointer<LLVMValueMetadataEntry>, int)>();

  /// @defgroup LLVMCoreValueConstantGlobalVariable Global Variables
  ///
  /// This group contains functions that operate on global variable values.
  ///
  /// @see llvm::GlobalVariable
  ///
  /// @{
  LLVMValueRef LLVMAddGlobal(
    LLVMModuleRef M,
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMAddGlobal(
      M,
      Ty,
      Name,
    );
  }

  late final _LLVMAddGlobalPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMModuleRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMAddGlobal');
  late final _LLVMAddGlobal = _LLVMAddGlobalPtr.asFunction<
      LLVMValueRef Function(
          LLVMModuleRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMAddGlobalInAddressSpace(
    LLVMModuleRef M,
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> Name,
    int AddressSpace,
  ) {
    return _LLVMAddGlobalInAddressSpace(
      M,
      Ty,
      Name,
      AddressSpace,
    );
  }

  late final _LLVMAddGlobalInAddressSpacePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMModuleRef,
              LLVMTypeRef,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMAddGlobalInAddressSpace');
  late final _LLVMAddGlobalInAddressSpace =
      _LLVMAddGlobalInAddressSpacePtr.asFunction<
          LLVMValueRef Function(
              LLVMModuleRef, LLVMTypeRef, ffi.Pointer<ffi.Char>, int)>();

  LLVMValueRef LLVMGetNamedGlobal(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMGetNamedGlobal(
      M,
      Name,
    );
  }

  late final _LLVMGetNamedGlobalPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>)>>('LLVMGetNamedGlobal');
  late final _LLVMGetNamedGlobal = _LLVMGetNamedGlobalPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMGetFirstGlobal(
    LLVMModuleRef M,
  ) {
    return _LLVMGetFirstGlobal(
      M,
    );
  }

  late final _LLVMGetFirstGlobalPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetFirstGlobal');
  late final _LLVMGetFirstGlobal =
      _LLVMGetFirstGlobalPtr.asFunction<LLVMValueRef Function(LLVMModuleRef)>();

  LLVMValueRef LLVMGetLastGlobal(
    LLVMModuleRef M,
  ) {
    return _LLVMGetLastGlobal(
      M,
    );
  }

  late final _LLVMGetLastGlobalPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetLastGlobal');
  late final _LLVMGetLastGlobal =
      _LLVMGetLastGlobalPtr.asFunction<LLVMValueRef Function(LLVMModuleRef)>();

  LLVMValueRef LLVMGetNextGlobal(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMGetNextGlobal(
      GlobalVar,
    );
  }

  late final _LLVMGetNextGlobalPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetNextGlobal');
  late final _LLVMGetNextGlobal =
      _LLVMGetNextGlobalPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetPreviousGlobal(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMGetPreviousGlobal(
      GlobalVar,
    );
  }

  late final _LLVMGetPreviousGlobalPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPreviousGlobal');
  late final _LLVMGetPreviousGlobal = _LLVMGetPreviousGlobalPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  void LLVMDeleteGlobal(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMDeleteGlobal(
      GlobalVar,
    );
  }

  late final _LLVMDeleteGlobalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMDeleteGlobal');
  late final _LLVMDeleteGlobal =
      _LLVMDeleteGlobalPtr.asFunction<void Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetInitializer(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMGetInitializer(
      GlobalVar,
    );
  }

  late final _LLVMGetInitializerPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetInitializer');
  late final _LLVMGetInitializer =
      _LLVMGetInitializerPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  void LLVMSetInitializer(
    LLVMValueRef GlobalVar,
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMSetInitializer(
      GlobalVar,
      ConstantVal,
    );
  }

  late final _LLVMSetInitializerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMSetInitializer');
  late final _LLVMSetInitializer = _LLVMSetInitializerPtr.asFunction<
      void Function(LLVMValueRef, LLVMValueRef)>();

  int LLVMIsThreadLocal(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMIsThreadLocal(
      GlobalVar,
    );
  }

  late final _LLVMIsThreadLocalPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsThreadLocal');
  late final _LLVMIsThreadLocal =
      _LLVMIsThreadLocalPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetThreadLocal(
    LLVMValueRef GlobalVar,
    int IsThreadLocal,
  ) {
    return _LLVMSetThreadLocal(
      GlobalVar,
      IsThreadLocal,
    );
  }

  late final _LLVMSetThreadLocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetThreadLocal');
  late final _LLVMSetThreadLocal =
      _LLVMSetThreadLocalPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMIsGlobalConstant(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMIsGlobalConstant(
      GlobalVar,
    );
  }

  late final _LLVMIsGlobalConstantPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsGlobalConstant');
  late final _LLVMIsGlobalConstant =
      _LLVMIsGlobalConstantPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetGlobalConstant(
    LLVMValueRef GlobalVar,
    int IsConstant,
  ) {
    return _LLVMSetGlobalConstant(
      GlobalVar,
      IsConstant,
    );
  }

  late final _LLVMSetGlobalConstantPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetGlobalConstant');
  late final _LLVMSetGlobalConstant =
      _LLVMSetGlobalConstantPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetThreadLocalMode(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMGetThreadLocalMode(
      GlobalVar,
    );
  }

  late final _LLVMGetThreadLocalModePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetThreadLocalMode');
  late final _LLVMGetThreadLocalMode =
      _LLVMGetThreadLocalModePtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetThreadLocalMode(
    LLVMValueRef GlobalVar,
    int Mode,
  ) {
    return _LLVMSetThreadLocalMode(
      GlobalVar,
      Mode,
    );
  }

  late final _LLVMSetThreadLocalModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetThreadLocalMode');
  late final _LLVMSetThreadLocalMode =
      _LLVMSetThreadLocalModePtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMIsExternallyInitialized(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMIsExternallyInitialized(
      GlobalVar,
    );
  }

  late final _LLVMIsExternallyInitializedPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsExternallyInitialized');
  late final _LLVMIsExternallyInitialized =
      _LLVMIsExternallyInitializedPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetExternallyInitialized(
    LLVMValueRef GlobalVar,
    int IsExtInit,
  ) {
    return _LLVMSetExternallyInitialized(
      GlobalVar,
      IsExtInit,
    );
  }

  late final _LLVMSetExternallyInitializedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetExternallyInitialized');
  late final _LLVMSetExternallyInitialized = _LLVMSetExternallyInitializedPtr
      .asFunction<void Function(LLVMValueRef, int)>();

  /// Add a GlobalAlias with the given value type, address space and aliasee.
  ///
  /// @see llvm::GlobalAlias::create()
  LLVMValueRef LLVMAddAlias2(
    LLVMModuleRef M,
    LLVMTypeRef ValueTy,
    int AddrSpace,
    LLVMValueRef Aliasee,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMAddAlias2(
      M,
      ValueTy,
      AddrSpace,
      Aliasee,
      Name,
    );
  }

  late final _LLVMAddAlias2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMModuleRef, LLVMTypeRef, ffi.UnsignedInt,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMAddAlias2');
  late final _LLVMAddAlias2 = _LLVMAddAlias2Ptr.asFunction<
      LLVMValueRef Function(LLVMModuleRef, LLVMTypeRef, int, LLVMValueRef,
          ffi.Pointer<ffi.Char>)>();

  /// Obtain a GlobalAlias value from a Module by its name.
  ///
  /// The returned value corresponds to a llvm::GlobalAlias value.
  ///
  /// @see llvm::Module::getNamedAlias()
  LLVMValueRef LLVMGetNamedGlobalAlias(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMGetNamedGlobalAlias(
      M,
      Name,
      NameLen,
    );
  }

  late final _LLVMGetNamedGlobalAliasPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMGetNamedGlobalAlias');
  late final _LLVMGetNamedGlobalAlias = _LLVMGetNamedGlobalAliasPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  /// Obtain an iterator to the first GlobalAlias in a Module.
  ///
  /// @see llvm::Module::alias_begin()
  LLVMValueRef LLVMGetFirstGlobalAlias(
    LLVMModuleRef M,
  ) {
    return _LLVMGetFirstGlobalAlias(
      M,
    );
  }

  late final _LLVMGetFirstGlobalAliasPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetFirstGlobalAlias');
  late final _LLVMGetFirstGlobalAlias = _LLVMGetFirstGlobalAliasPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef)>();

  /// Obtain an iterator to the last GlobalAlias in a Module.
  ///
  /// @see llvm::Module::alias_end()
  LLVMValueRef LLVMGetLastGlobalAlias(
    LLVMModuleRef M,
  ) {
    return _LLVMGetLastGlobalAlias(
      M,
    );
  }

  late final _LLVMGetLastGlobalAliasPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetLastGlobalAlias');
  late final _LLVMGetLastGlobalAlias = _LLVMGetLastGlobalAliasPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef)>();

  /// Advance a GlobalAlias iterator to the next GlobalAlias.
  ///
  /// Returns NULL if the iterator was already at the end and there are no more
  /// global aliases.
  LLVMValueRef LLVMGetNextGlobalAlias(
    LLVMValueRef GA,
  ) {
    return _LLVMGetNextGlobalAlias(
      GA,
    );
  }

  late final _LLVMGetNextGlobalAliasPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetNextGlobalAlias');
  late final _LLVMGetNextGlobalAlias = _LLVMGetNextGlobalAliasPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  /// Decrement a GlobalAlias iterator to the previous GlobalAlias.
  ///
  /// Returns NULL if the iterator was already at the beginning and there are
  /// no previous global aliases.
  LLVMValueRef LLVMGetPreviousGlobalAlias(
    LLVMValueRef GA,
  ) {
    return _LLVMGetPreviousGlobalAlias(
      GA,
    );
  }

  late final _LLVMGetPreviousGlobalAliasPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPreviousGlobalAlias');
  late final _LLVMGetPreviousGlobalAlias = _LLVMGetPreviousGlobalAliasPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Retrieve the target value of an alias.
  LLVMValueRef LLVMAliasGetAliasee(
    LLVMValueRef Alias,
  ) {
    return _LLVMAliasGetAliasee(
      Alias,
    );
  }

  late final _LLVMAliasGetAliaseePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMAliasGetAliasee');
  late final _LLVMAliasGetAliasee =
      _LLVMAliasGetAliaseePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Set the target value of an alias.
  void LLVMAliasSetAliasee(
    LLVMValueRef Alias,
    LLVMValueRef Aliasee,
  ) {
    return _LLVMAliasSetAliasee(
      Alias,
      Aliasee,
    );
  }

  late final _LLVMAliasSetAliaseePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMAliasSetAliasee');
  late final _LLVMAliasSetAliasee = _LLVMAliasSetAliaseePtr.asFunction<
      void Function(LLVMValueRef, LLVMValueRef)>();

  /// Remove a function from its containing module and deletes it.
  ///
  /// @see llvm::Function::eraseFromParent()
  void LLVMDeleteFunction(
    LLVMValueRef Fn,
  ) {
    return _LLVMDeleteFunction(
      Fn,
    );
  }

  late final _LLVMDeleteFunctionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMDeleteFunction');
  late final _LLVMDeleteFunction =
      _LLVMDeleteFunctionPtr.asFunction<void Function(LLVMValueRef)>();

  /// Check whether the given function has a personality function.
  ///
  /// @see llvm::Function::hasPersonalityFn()
  int LLVMHasPersonalityFn(
    LLVMValueRef Fn,
  ) {
    return _LLVMHasPersonalityFn(
      Fn,
    );
  }

  late final _LLVMHasPersonalityFnPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMHasPersonalityFn');
  late final _LLVMHasPersonalityFn =
      _LLVMHasPersonalityFnPtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain the personality function attached to the function.
  ///
  /// @see llvm::Function::getPersonalityFn()
  LLVMValueRef LLVMGetPersonalityFn(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetPersonalityFn(
      Fn,
    );
  }

  late final _LLVMGetPersonalityFnPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPersonalityFn');
  late final _LLVMGetPersonalityFn = _LLVMGetPersonalityFnPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  /// Set the personality function attached to the function.
  ///
  /// @see llvm::Function::setPersonalityFn()
  void LLVMSetPersonalityFn(
    LLVMValueRef Fn,
    LLVMValueRef PersonalityFn,
  ) {
    return _LLVMSetPersonalityFn(
      Fn,
      PersonalityFn,
    );
  }

  late final _LLVMSetPersonalityFnPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMSetPersonalityFn');
  late final _LLVMSetPersonalityFn = _LLVMSetPersonalityFnPtr.asFunction<
      void Function(LLVMValueRef, LLVMValueRef)>();

  /// Obtain the intrinsic ID number which matches the given function name.
  ///
  /// @see llvm::Function::lookupIntrinsicID()
  int LLVMLookupIntrinsicID(
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMLookupIntrinsicID(
      Name,
      NameLen,
    );
  }

  late final _LLVMLookupIntrinsicIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('LLVMLookupIntrinsicID');
  late final _LLVMLookupIntrinsicID = _LLVMLookupIntrinsicIDPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  /// Obtain the ID number from a function instance.
  ///
  /// @see llvm::Function::getIntrinsicID()
  int LLVMGetIntrinsicID(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetIntrinsicID(
      Fn,
    );
  }

  late final _LLVMGetIntrinsicIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetIntrinsicID');
  late final _LLVMGetIntrinsicID =
      _LLVMGetIntrinsicIDPtr.asFunction<int Function(LLVMValueRef)>();

  /// Create or insert the declaration of an intrinsic.  For overloaded intrinsics,
  /// parameter types must be provided to uniquely identify an overload.
  ///
  /// @see llvm::Intrinsic::getDeclaration()
  LLVMValueRef LLVMGetIntrinsicDeclaration(
    LLVMModuleRef Mod,
    int ID,
    ffi.Pointer<LLVMTypeRef> ParamTypes,
    int ParamCount,
  ) {
    return _LLVMGetIntrinsicDeclaration(
      Mod,
      ID,
      ParamTypes,
      ParamCount,
    );
  }

  late final _LLVMGetIntrinsicDeclarationPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMModuleRef,
              ffi.UnsignedInt,
              ffi.Pointer<LLVMTypeRef>,
              ffi.Size)>>('LLVMGetIntrinsicDeclaration');
  late final _LLVMGetIntrinsicDeclaration =
      _LLVMGetIntrinsicDeclarationPtr.asFunction<
          LLVMValueRef Function(
              LLVMModuleRef, int, ffi.Pointer<LLVMTypeRef>, int)>();

  /// Retrieves the type of an intrinsic.  For overloaded intrinsics, parameter
  /// types must be provided to uniquely identify an overload.
  ///
  /// @see llvm::Intrinsic::getType()
  LLVMTypeRef LLVMIntrinsicGetType(
    LLVMContextRef Ctx,
    int ID,
    ffi.Pointer<LLVMTypeRef> ParamTypes,
    int ParamCount,
  ) {
    return _LLVMIntrinsicGetType(
      Ctx,
      ID,
      ParamTypes,
      ParamCount,
    );
  }

  late final _LLVMIntrinsicGetTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(LLVMContextRef, ffi.UnsignedInt,
              ffi.Pointer<LLVMTypeRef>, ffi.Size)>>('LLVMIntrinsicGetType');
  late final _LLVMIntrinsicGetType = _LLVMIntrinsicGetTypePtr.asFunction<
      LLVMTypeRef Function(
          LLVMContextRef, int, ffi.Pointer<LLVMTypeRef>, int)>();

  /// Retrieves the name of an intrinsic.
  ///
  /// @see llvm::Intrinsic::getName()
  ffi.Pointer<ffi.Char> LLVMIntrinsicGetName(
    int ID,
    ffi.Pointer<ffi.Size> NameLength,
  ) {
    return _LLVMIntrinsicGetName(
      ID,
      NameLength,
    );
  }

  late final _LLVMIntrinsicGetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Size>)>>('LLVMIntrinsicGetName');
  late final _LLVMIntrinsicGetName = _LLVMIntrinsicGetNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Size>)>();

  /// Deprecated: Use LLVMIntrinsicCopyOverloadedName2 instead.
  ffi.Pointer<ffi.Char> LLVMIntrinsicCopyOverloadedName(
    int ID,
    ffi.Pointer<LLVMTypeRef> ParamTypes,
    int ParamCount,
    ffi.Pointer<ffi.Size> NameLength,
  ) {
    return _LLVMIntrinsicCopyOverloadedName(
      ID,
      ParamTypes,
      ParamCount,
      NameLength,
    );
  }

  late final _LLVMIntrinsicCopyOverloadedNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt,
              ffi.Pointer<LLVMTypeRef>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('LLVMIntrinsicCopyOverloadedName');
  late final _LLVMIntrinsicCopyOverloadedName =
      _LLVMIntrinsicCopyOverloadedNamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              int, ffi.Pointer<LLVMTypeRef>, int, ffi.Pointer<ffi.Size>)>();

  /// Copies the name of an overloaded intrinsic identified by a given list of
  /// parameter types.
  ///
  /// Unlike LLVMIntrinsicGetName, the caller is responsible for freeing the
  /// returned string.
  ///
  /// This version also supports unnamed types.
  ///
  /// @see llvm::Intrinsic::getName()
  ffi.Pointer<ffi.Char> LLVMIntrinsicCopyOverloadedName2(
    LLVMModuleRef Mod,
    int ID,
    ffi.Pointer<LLVMTypeRef> ParamTypes,
    int ParamCount,
    ffi.Pointer<ffi.Size> NameLength,
  ) {
    return _LLVMIntrinsicCopyOverloadedName2(
      Mod,
      ID,
      ParamTypes,
      ParamCount,
      NameLength,
    );
  }

  late final _LLVMIntrinsicCopyOverloadedName2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMModuleRef,
              ffi.UnsignedInt,
              ffi.Pointer<LLVMTypeRef>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('LLVMIntrinsicCopyOverloadedName2');
  late final _LLVMIntrinsicCopyOverloadedName2 =
      _LLVMIntrinsicCopyOverloadedName2Ptr.asFunction<
          ffi.Pointer<ffi.Char> Function(LLVMModuleRef, int,
              ffi.Pointer<LLVMTypeRef>, int, ffi.Pointer<ffi.Size>)>();

  /// Obtain if the intrinsic identified by the given ID is overloaded.
  ///
  /// @see llvm::Intrinsic::isOverloaded()
  int LLVMIntrinsicIsOverloaded(
    int ID,
  ) {
    return _LLVMIntrinsicIsOverloaded(
      ID,
    );
  }

  late final _LLVMIntrinsicIsOverloadedPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(ffi.UnsignedInt)>>(
          'LLVMIntrinsicIsOverloaded');
  late final _LLVMIntrinsicIsOverloaded =
      _LLVMIntrinsicIsOverloadedPtr.asFunction<int Function(int)>();

  /// Obtain the calling function of a function.
  ///
  /// The returned value corresponds to the LLVMCallConv enumeration.
  ///
  /// @see llvm::Function::getCallingConv()
  int LLVMGetFunctionCallConv(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetFunctionCallConv(
      Fn,
    );
  }

  late final _LLVMGetFunctionCallConvPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetFunctionCallConv');
  late final _LLVMGetFunctionCallConv =
      _LLVMGetFunctionCallConvPtr.asFunction<int Function(LLVMValueRef)>();

  /// Set the calling convention of a function.
  ///
  /// @see llvm::Function::setCallingConv()
  ///
  /// @param Fn Function to operate on
  /// @param CC LLVMCallConv to set calling convention to
  void LLVMSetFunctionCallConv(
    LLVMValueRef Fn,
    int CC,
  ) {
    return _LLVMSetFunctionCallConv(
      Fn,
      CC,
    );
  }

  late final _LLVMSetFunctionCallConvPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.UnsignedInt)>>(
      'LLVMSetFunctionCallConv');
  late final _LLVMSetFunctionCallConv = _LLVMSetFunctionCallConvPtr.asFunction<
      void Function(LLVMValueRef, int)>();

  /// Obtain the name of the garbage collector to use during code
  /// generation.
  ///
  /// @see llvm::Function::getGC()
  ffi.Pointer<ffi.Char> LLVMGetGC(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetGC(
      Fn,
    );
  }

  late final _LLVMGetGCPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMValueRef)>>(
          'LLVMGetGC');
  late final _LLVMGetGC =
      _LLVMGetGCPtr.asFunction<ffi.Pointer<ffi.Char> Function(LLVMValueRef)>();

  /// Define the garbage collector to use during code generation.
  ///
  /// @see llvm::Function::setGC()
  void LLVMSetGC(
    LLVMValueRef Fn,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMSetGC(
      Fn,
      Name,
    );
  }

  late final _LLVMSetGCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMSetGC');
  late final _LLVMSetGC = _LLVMSetGCPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  /// Add an attribute to a function.
  ///
  /// @see llvm::Function::addAttribute()
  void LLVMAddAttributeAtIndex(
    LLVMValueRef F,
    int Idx,
    LLVMAttributeRef A,
  ) {
    return _LLVMAddAttributeAtIndex(
      F,
      Idx,
      A,
    );
  }

  late final _LLVMAddAttributeAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              LLVMAttributeRef)>>('LLVMAddAttributeAtIndex');
  late final _LLVMAddAttributeAtIndex = _LLVMAddAttributeAtIndexPtr.asFunction<
      void Function(LLVMValueRef, int, LLVMAttributeRef)>();

  int LLVMGetAttributeCountAtIndex(
    LLVMValueRef F,
    int Idx,
  ) {
    return _LLVMGetAttributeCountAtIndex(
      F,
      Idx,
    );
  }

  late final _LLVMGetAttributeCountAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(LLVMValueRef,
              LLVMAttributeIndex)>>('LLVMGetAttributeCountAtIndex');
  late final _LLVMGetAttributeCountAtIndex = _LLVMGetAttributeCountAtIndexPtr
      .asFunction<int Function(LLVMValueRef, int)>();

  void LLVMGetAttributesAtIndex(
    LLVMValueRef F,
    int Idx,
    ffi.Pointer<LLVMAttributeRef> Attrs,
  ) {
    return _LLVMGetAttributesAtIndex(
      F,
      Idx,
      Attrs,
    );
  }

  late final _LLVMGetAttributesAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.Pointer<LLVMAttributeRef>)>>('LLVMGetAttributesAtIndex');
  late final _LLVMGetAttributesAtIndex =
      _LLVMGetAttributesAtIndexPtr.asFunction<
          void Function(LLVMValueRef, int, ffi.Pointer<LLVMAttributeRef>)>();

  LLVMAttributeRef LLVMGetEnumAttributeAtIndex(
    LLVMValueRef F,
    int Idx,
    int KindID,
  ) {
    return _LLVMGetEnumAttributeAtIndex(
      F,
      Idx,
      KindID,
    );
  }

  late final _LLVMGetEnumAttributeAtIndexPtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.UnsignedInt)>>('LLVMGetEnumAttributeAtIndex');
  late final _LLVMGetEnumAttributeAtIndex = _LLVMGetEnumAttributeAtIndexPtr
      .asFunction<LLVMAttributeRef Function(LLVMValueRef, int, int)>();

  LLVMAttributeRef LLVMGetStringAttributeAtIndex(
    LLVMValueRef F,
    int Idx,
    ffi.Pointer<ffi.Char> K,
    int KLen,
  ) {
    return _LLVMGetStringAttributeAtIndex(
      F,
      Idx,
      K,
      KLen,
    );
  }

  late final _LLVMGetStringAttributeAtIndexPtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(
              LLVMValueRef,
              LLVMAttributeIndex,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMGetStringAttributeAtIndex');
  late final _LLVMGetStringAttributeAtIndex =
      _LLVMGetStringAttributeAtIndexPtr.asFunction<
          LLVMAttributeRef Function(
              LLVMValueRef, int, ffi.Pointer<ffi.Char>, int)>();

  void LLVMRemoveEnumAttributeAtIndex(
    LLVMValueRef F,
    int Idx,
    int KindID,
  ) {
    return _LLVMRemoveEnumAttributeAtIndex(
      F,
      Idx,
      KindID,
    );
  }

  late final _LLVMRemoveEnumAttributeAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.UnsignedInt)>>('LLVMRemoveEnumAttributeAtIndex');
  late final _LLVMRemoveEnumAttributeAtIndex =
      _LLVMRemoveEnumAttributeAtIndexPtr.asFunction<
          void Function(LLVMValueRef, int, int)>();

  void LLVMRemoveStringAttributeAtIndex(
    LLVMValueRef F,
    int Idx,
    ffi.Pointer<ffi.Char> K,
    int KLen,
  ) {
    return _LLVMRemoveStringAttributeAtIndex(
      F,
      Idx,
      K,
      KLen,
    );
  }

  late final _LLVMRemoveStringAttributeAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef,
              LLVMAttributeIndex,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMRemoveStringAttributeAtIndex');
  late final _LLVMRemoveStringAttributeAtIndex =
      _LLVMRemoveStringAttributeAtIndexPtr.asFunction<
          void Function(LLVMValueRef, int, ffi.Pointer<ffi.Char>, int)>();

  /// Add a target-dependent attribute to a function
  /// @see llvm::AttrBuilder::addAttribute()
  void LLVMAddTargetDependentFunctionAttr(
    LLVMValueRef Fn,
    ffi.Pointer<ffi.Char> A,
    ffi.Pointer<ffi.Char> V,
  ) {
    return _LLVMAddTargetDependentFunctionAttr(
      Fn,
      A,
      V,
    );
  }

  late final _LLVMAddTargetDependentFunctionAttrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('LLVMAddTargetDependentFunctionAttr');
  late final _LLVMAddTargetDependentFunctionAttr =
      _LLVMAddTargetDependentFunctionAttrPtr.asFunction<
          void Function(
              LLVMValueRef, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Obtain the number of parameters in a function.
  ///
  /// @see llvm::Function::arg_size()
  int LLVMCountParams(
    LLVMValueRef Fn,
  ) {
    return _LLVMCountParams(
      Fn,
    );
  }

  late final _LLVMCountParamsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMCountParams');
  late final _LLVMCountParams =
      _LLVMCountParamsPtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain the parameters in a function.
  ///
  /// The takes a pointer to a pre-allocated array of LLVMValueRef that is
  /// at least LLVMCountParams() long. This array will be filled with
  /// LLVMValueRef instances which correspond to the parameters the
  /// function receives. Each LLVMValueRef corresponds to a llvm::Argument
  /// instance.
  ///
  /// @see llvm::Function::arg_begin()
  void LLVMGetParams(
    LLVMValueRef Fn,
    ffi.Pointer<LLVMValueRef> Params,
  ) {
    return _LLVMGetParams(
      Fn,
      Params,
    );
  }

  late final _LLVMGetParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, ffi.Pointer<LLVMValueRef>)>>('LLVMGetParams');
  late final _LLVMGetParams = _LLVMGetParamsPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<LLVMValueRef>)>();

  /// Obtain the parameter at the specified index.
  ///
  /// Parameters are indexed from 0.
  ///
  /// @see llvm::Function::arg_begin()
  LLVMValueRef LLVMGetParam(
    LLVMValueRef Fn,
    int Index,
  ) {
    return _LLVMGetParam(
      Fn,
      Index,
    );
  }

  late final _LLVMGetParamPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetParam');
  late final _LLVMGetParam =
      _LLVMGetParamPtr.asFunction<LLVMValueRef Function(LLVMValueRef, int)>();

  /// Obtain the function to which this argument belongs.
  ///
  /// Unlike other functions in this group, this one takes an LLVMValueRef
  /// that corresponds to a llvm::Attribute.
  ///
  /// The returned LLVMValueRef is the llvm::Function to which this
  /// argument belongs.
  LLVMValueRef LLVMGetParamParent(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetParamParent(
      Inst,
    );
  }

  late final _LLVMGetParamParentPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetParamParent');
  late final _LLVMGetParamParent =
      _LLVMGetParamParentPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Obtain the first parameter to a function.
  ///
  /// @see llvm::Function::arg_begin()
  LLVMValueRef LLVMGetFirstParam(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetFirstParam(
      Fn,
    );
  }

  late final _LLVMGetFirstParamPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetFirstParam');
  late final _LLVMGetFirstParam =
      _LLVMGetFirstParamPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Obtain the last parameter to a function.
  ///
  /// @see llvm::Function::arg_end()
  LLVMValueRef LLVMGetLastParam(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetLastParam(
      Fn,
    );
  }

  late final _LLVMGetLastParamPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetLastParam');
  late final _LLVMGetLastParam =
      _LLVMGetLastParamPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Obtain the next parameter to a function.
  ///
  /// This takes an LLVMValueRef obtained from LLVMGetFirstParam() (which is
  /// actually a wrapped iterator) and obtains the next parameter from the
  /// underlying iterator.
  LLVMValueRef LLVMGetNextParam(
    LLVMValueRef Arg,
  ) {
    return _LLVMGetNextParam(
      Arg,
    );
  }

  late final _LLVMGetNextParamPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetNextParam');
  late final _LLVMGetNextParam =
      _LLVMGetNextParamPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Obtain the previous parameter to a function.
  ///
  /// This is the opposite of LLVMGetNextParam().
  LLVMValueRef LLVMGetPreviousParam(
    LLVMValueRef Arg,
  ) {
    return _LLVMGetPreviousParam(
      Arg,
    );
  }

  late final _LLVMGetPreviousParamPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPreviousParam');
  late final _LLVMGetPreviousParam = _LLVMGetPreviousParamPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  /// Set the alignment for a function parameter.
  ///
  /// @see llvm::Argument::addAttr()
  /// @see llvm::AttrBuilder::addAlignmentAttr()
  void LLVMSetParamAlignment(
    LLVMValueRef Arg,
    int Align,
  ) {
    return _LLVMSetParamAlignment(
      Arg,
      Align,
    );
  }

  late final _LLVMSetParamAlignmentPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.UnsignedInt)>>(
      'LLVMSetParamAlignment');
  late final _LLVMSetParamAlignment =
      _LLVMSetParamAlignmentPtr.asFunction<void Function(LLVMValueRef, int)>();

  /// Add a global indirect function to a module under a specified name.
  ///
  /// @see llvm::GlobalIFunc::create()
  LLVMValueRef LLVMAddGlobalIFunc(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMTypeRef Ty,
    int AddrSpace,
    LLVMValueRef Resolver,
  ) {
    return _LLVMAddGlobalIFunc(
      M,
      Name,
      NameLen,
      Ty,
      AddrSpace,
      Resolver,
    );
  }

  late final _LLVMAddGlobalIFuncPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMModuleRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMTypeRef,
              ffi.UnsignedInt,
              LLVMValueRef)>>('LLVMAddGlobalIFunc');
  late final _LLVMAddGlobalIFunc = _LLVMAddGlobalIFuncPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int,
          LLVMTypeRef, int, LLVMValueRef)>();

  /// Obtain a GlobalIFunc value from a Module by its name.
  ///
  /// The returned value corresponds to a llvm::GlobalIFunc value.
  ///
  /// @see llvm::Module::getNamedIFunc()
  LLVMValueRef LLVMGetNamedGlobalIFunc(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMGetNamedGlobalIFunc(
      M,
      Name,
      NameLen,
    );
  }

  late final _LLVMGetNamedGlobalIFuncPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMGetNamedGlobalIFunc');
  late final _LLVMGetNamedGlobalIFunc = _LLVMGetNamedGlobalIFuncPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  /// Obtain an iterator to the first GlobalIFunc in a Module.
  ///
  /// @see llvm::Module::ifunc_begin()
  LLVMValueRef LLVMGetFirstGlobalIFunc(
    LLVMModuleRef M,
  ) {
    return _LLVMGetFirstGlobalIFunc(
      M,
    );
  }

  late final _LLVMGetFirstGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetFirstGlobalIFunc');
  late final _LLVMGetFirstGlobalIFunc = _LLVMGetFirstGlobalIFuncPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef)>();

  /// Obtain an iterator to the last GlobalIFunc in a Module.
  ///
  /// @see llvm::Module::ifunc_end()
  LLVMValueRef LLVMGetLastGlobalIFunc(
    LLVMModuleRef M,
  ) {
    return _LLVMGetLastGlobalIFunc(
      M,
    );
  }

  late final _LLVMGetLastGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetLastGlobalIFunc');
  late final _LLVMGetLastGlobalIFunc = _LLVMGetLastGlobalIFuncPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef)>();

  /// Advance a GlobalIFunc iterator to the next GlobalIFunc.
  ///
  /// Returns NULL if the iterator was already at the end and there are no more
  /// global aliases.
  LLVMValueRef LLVMGetNextGlobalIFunc(
    LLVMValueRef IFunc,
  ) {
    return _LLVMGetNextGlobalIFunc(
      IFunc,
    );
  }

  late final _LLVMGetNextGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetNextGlobalIFunc');
  late final _LLVMGetNextGlobalIFunc = _LLVMGetNextGlobalIFuncPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  /// Decrement a GlobalIFunc iterator to the previous GlobalIFunc.
  ///
  /// Returns NULL if the iterator was already at the beginning and there are
  /// no previous global aliases.
  LLVMValueRef LLVMGetPreviousGlobalIFunc(
    LLVMValueRef IFunc,
  ) {
    return _LLVMGetPreviousGlobalIFunc(
      IFunc,
    );
  }

  late final _LLVMGetPreviousGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPreviousGlobalIFunc');
  late final _LLVMGetPreviousGlobalIFunc = _LLVMGetPreviousGlobalIFuncPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Retrieves the resolver function associated with this indirect function, or
  /// NULL if it doesn't not exist.
  ///
  /// @see llvm::GlobalIFunc::getResolver()
  LLVMValueRef LLVMGetGlobalIFuncResolver(
    LLVMValueRef IFunc,
  ) {
    return _LLVMGetGlobalIFuncResolver(
      IFunc,
    );
  }

  late final _LLVMGetGlobalIFuncResolverPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetGlobalIFuncResolver');
  late final _LLVMGetGlobalIFuncResolver = _LLVMGetGlobalIFuncResolverPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Sets the resolver function associated with this indirect function.
  ///
  /// @see llvm::GlobalIFunc::setResolver()
  void LLVMSetGlobalIFuncResolver(
    LLVMValueRef IFunc,
    LLVMValueRef Resolver,
  ) {
    return _LLVMSetGlobalIFuncResolver(
      IFunc,
      Resolver,
    );
  }

  late final _LLVMSetGlobalIFuncResolverPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMSetGlobalIFuncResolver');
  late final _LLVMSetGlobalIFuncResolver = _LLVMSetGlobalIFuncResolverPtr
      .asFunction<void Function(LLVMValueRef, LLVMValueRef)>();

  /// Remove a global indirect function from its parent module and delete it.
  ///
  /// @see llvm::GlobalIFunc::eraseFromParent()
  void LLVMEraseGlobalIFunc(
    LLVMValueRef IFunc,
  ) {
    return _LLVMEraseGlobalIFunc(
      IFunc,
    );
  }

  late final _LLVMEraseGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMEraseGlobalIFunc');
  late final _LLVMEraseGlobalIFunc =
      _LLVMEraseGlobalIFuncPtr.asFunction<void Function(LLVMValueRef)>();

  /// Remove a global indirect function from its parent module.
  ///
  /// This unlinks the global indirect function from its containing module but
  /// keeps it alive.
  ///
  /// @see llvm::GlobalIFunc::removeFromParent()
  void LLVMRemoveGlobalIFunc(
    LLVMValueRef IFunc,
  ) {
    return _LLVMRemoveGlobalIFunc(
      IFunc,
    );
  }

  late final _LLVMRemoveGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMRemoveGlobalIFunc');
  late final _LLVMRemoveGlobalIFunc =
      _LLVMRemoveGlobalIFuncPtr.asFunction<void Function(LLVMValueRef)>();

  /// Create an MDString value from a given string value.
  ///
  /// The MDString value does not take ownership of the given string, it remains
  /// the responsibility of the caller to free it.
  ///
  /// @see llvm::MDString::get()
  LLVMMetadataRef LLVMMDStringInContext2(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Str,
    int SLen,
  ) {
    return _LLVMMDStringInContext2(
      C,
      Str,
      SLen,
    );
  }

  late final _LLVMMDStringInContext2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMMDStringInContext2');
  late final _LLVMMDStringInContext2 = _LLVMMDStringInContext2Ptr.asFunction<
      LLVMMetadataRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>, int)>();

  /// Create an MDNode value with the given array of operands.
  ///
  /// @see llvm::MDNode::get()
  LLVMMetadataRef LLVMMDNodeInContext2(
    LLVMContextRef C,
    ffi.Pointer<LLVMMetadataRef> MDs,
    int Count,
  ) {
    return _LLVMMDNodeInContext2(
      C,
      MDs,
      Count,
    );
  }

  late final _LLVMMDNodeInContext2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMContextRef, ffi.Pointer<LLVMMetadataRef>,
              ffi.Size)>>('LLVMMDNodeInContext2');
  late final _LLVMMDNodeInContext2 = _LLVMMDNodeInContext2Ptr.asFunction<
      LLVMMetadataRef Function(
          LLVMContextRef, ffi.Pointer<LLVMMetadataRef>, int)>();

  /// Obtain a Metadata as a Value.
  LLVMValueRef LLVMMetadataAsValue(
    LLVMContextRef C,
    LLVMMetadataRef MD,
  ) {
    return _LLVMMetadataAsValue(
      C,
      MD,
    );
  }

  late final _LLVMMetadataAsValuePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMContextRef, LLVMMetadataRef)>>('LLVMMetadataAsValue');
  late final _LLVMMetadataAsValue = _LLVMMetadataAsValuePtr.asFunction<
      LLVMValueRef Function(LLVMContextRef, LLVMMetadataRef)>();

  /// Obtain a Value as a Metadata.
  LLVMMetadataRef LLVMValueAsMetadata(
    LLVMValueRef Val,
  ) {
    return _LLVMValueAsMetadata(
      Val,
    );
  }

  late final _LLVMValueAsMetadataPtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMValueRef)>>(
          'LLVMValueAsMetadata');
  late final _LLVMValueAsMetadata = _LLVMValueAsMetadataPtr.asFunction<
      LLVMMetadataRef Function(LLVMValueRef)>();

  /// Obtain the underlying string from a MDString value.
  ///
  /// @param V Instance to obtain string from.
  /// @param Length Memory address which will hold length of returned string.
  /// @return String data in MDString.
  ffi.Pointer<ffi.Char> LLVMGetMDString(
    LLVMValueRef V,
    ffi.Pointer<ffi.UnsignedInt> Length,
  ) {
    return _LLVMGetMDString(
      V,
      Length,
    );
  }

  late final _LLVMGetMDStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMValueRef, ffi.Pointer<ffi.UnsignedInt>)>>('LLVMGetMDString');
  late final _LLVMGetMDString = _LLVMGetMDStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          LLVMValueRef, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Obtain the number of operands from an MDNode value.
  ///
  /// @param V MDNode to get number of operands from.
  /// @return Number of operands of the MDNode.
  int LLVMGetMDNodeNumOperands(
    LLVMValueRef V,
  ) {
    return _LLVMGetMDNodeNumOperands(
      V,
    );
  }

  late final _LLVMGetMDNodeNumOperandsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetMDNodeNumOperands');
  late final _LLVMGetMDNodeNumOperands =
      _LLVMGetMDNodeNumOperandsPtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain the given MDNode's operands.
  ///
  /// The passed LLVMValueRef pointer should point to enough memory to hold all of
  /// the operands of the given MDNode (see LLVMGetMDNodeNumOperands) as
  /// LLVMValueRefs. This memory will be populated with the LLVMValueRefs of the
  /// MDNode's operands.
  ///
  /// @param V MDNode to get the operands from.
  /// @param Dest Destination array for operands.
  void LLVMGetMDNodeOperands(
    LLVMValueRef V,
    ffi.Pointer<LLVMValueRef> Dest,
  ) {
    return _LLVMGetMDNodeOperands(
      V,
      Dest,
    );
  }

  late final _LLVMGetMDNodeOperandsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef,
              ffi.Pointer<LLVMValueRef>)>>('LLVMGetMDNodeOperands');
  late final _LLVMGetMDNodeOperands = _LLVMGetMDNodeOperandsPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<LLVMValueRef>)>();

  /// Deprecated: Use LLVMMDStringInContext2 instead.
  LLVMValueRef LLVMMDStringInContext(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Str,
    int SLen,
  ) {
    return _LLVMMDStringInContext(
      C,
      Str,
      SLen,
    );
  }

  late final _LLVMMDStringInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMMDStringInContext');
  late final _LLVMMDStringInContext = _LLVMMDStringInContextPtr.asFunction<
      LLVMValueRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>, int)>();

  /// Deprecated: Use LLVMMDStringInContext2 instead.
  LLVMValueRef LLVMMDString(
    ffi.Pointer<ffi.Char> Str,
    int SLen,
  ) {
    return _LLVMMDString(
      Str,
      SLen,
    );
  }

  late final _LLVMMDStringPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('LLVMMDString');
  late final _LLVMMDString = _LLVMMDStringPtr.asFunction<
      LLVMValueRef Function(ffi.Pointer<ffi.Char>, int)>();

  /// Deprecated: Use LLVMMDNodeInContext2 instead.
  LLVMValueRef LLVMMDNodeInContext(
    LLVMContextRef C,
    ffi.Pointer<LLVMValueRef> Vals,
    int Count,
  ) {
    return _LLVMMDNodeInContext(
      C,
      Vals,
      Count,
    );
  }

  late final _LLVMMDNodeInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMContextRef, ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt)>>('LLVMMDNodeInContext');
  late final _LLVMMDNodeInContext = _LLVMMDNodeInContextPtr.asFunction<
      LLVMValueRef Function(LLVMContextRef, ffi.Pointer<LLVMValueRef>, int)>();

  /// Deprecated: Use LLVMMDNodeInContext2 instead.
  LLVMValueRef LLVMMDNode(
    ffi.Pointer<LLVMValueRef> Vals,
    int Count,
  ) {
    return _LLVMMDNode(
      Vals,
      Count,
    );
  }

  late final _LLVMMDNodePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              ffi.Pointer<LLVMValueRef>, ffi.UnsignedInt)>>('LLVMMDNode');
  late final _LLVMMDNode = _LLVMMDNodePtr.asFunction<
      LLVMValueRef Function(ffi.Pointer<LLVMValueRef>, int)>();

  /// Convert a basic block instance to a value type.
  LLVMValueRef LLVMBasicBlockAsValue(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMBasicBlockAsValue(
      BB,
    );
  }

  late final _LLVMBasicBlockAsValuePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBasicBlockRef)>>(
          'LLVMBasicBlockAsValue');
  late final _LLVMBasicBlockAsValue = _LLVMBasicBlockAsValuePtr.asFunction<
      LLVMValueRef Function(LLVMBasicBlockRef)>();

  /// Determine whether an LLVMValueRef is itself a basic block.
  int LLVMValueIsBasicBlock(
    LLVMValueRef Val,
  ) {
    return _LLVMValueIsBasicBlock(
      Val,
    );
  }

  late final _LLVMValueIsBasicBlockPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMValueIsBasicBlock');
  late final _LLVMValueIsBasicBlock =
      _LLVMValueIsBasicBlockPtr.asFunction<int Function(LLVMValueRef)>();

  /// Convert an LLVMValueRef to an LLVMBasicBlockRef instance.
  LLVMBasicBlockRef LLVMValueAsBasicBlock(
    LLVMValueRef Val,
  ) {
    return _LLVMValueAsBasicBlock(
      Val,
    );
  }

  late final _LLVMValueAsBasicBlockPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMValueAsBasicBlock');
  late final _LLVMValueAsBasicBlock = _LLVMValueAsBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef)>();

  /// Obtain the string name of a basic block.
  ffi.Pointer<ffi.Char> LLVMGetBasicBlockName(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetBasicBlockName(
      BB,
    );
  }

  late final _LLVMGetBasicBlockNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMBasicBlockRef)>>('LLVMGetBasicBlockName');
  late final _LLVMGetBasicBlockName = _LLVMGetBasicBlockNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMBasicBlockRef)>();

  /// Obtain the function to which a basic block belongs.
  ///
  /// @see llvm::BasicBlock::getParent()
  LLVMValueRef LLVMGetBasicBlockParent(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetBasicBlockParent(
      BB,
    );
  }

  late final _LLVMGetBasicBlockParentPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBasicBlockRef)>>(
          'LLVMGetBasicBlockParent');
  late final _LLVMGetBasicBlockParent = _LLVMGetBasicBlockParentPtr.asFunction<
      LLVMValueRef Function(LLVMBasicBlockRef)>();

  /// Obtain the terminator instruction for a basic block.
  ///
  /// If the basic block does not have a terminator (it is not well-formed
  /// if it doesn't), then NULL is returned.
  ///
  /// The returned LLVMValueRef corresponds to an llvm::Instruction.
  ///
  /// @see llvm::BasicBlock::getTerminator()
  LLVMValueRef LLVMGetBasicBlockTerminator(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetBasicBlockTerminator(
      BB,
    );
  }

  late final _LLVMGetBasicBlockTerminatorPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBasicBlockRef)>>(
          'LLVMGetBasicBlockTerminator');
  late final _LLVMGetBasicBlockTerminator = _LLVMGetBasicBlockTerminatorPtr
      .asFunction<LLVMValueRef Function(LLVMBasicBlockRef)>();

  /// Obtain the number of basic blocks in a function.
  ///
  /// @param Fn Function value to operate on.
  int LLVMCountBasicBlocks(
    LLVMValueRef Fn,
  ) {
    return _LLVMCountBasicBlocks(
      Fn,
    );
  }

  late final _LLVMCountBasicBlocksPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMCountBasicBlocks');
  late final _LLVMCountBasicBlocks =
      _LLVMCountBasicBlocksPtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain all of the basic blocks in a function.
  ///
  /// This operates on a function value. The BasicBlocks parameter is a
  /// pointer to a pre-allocated array of LLVMBasicBlockRef of at least
  /// LLVMCountBasicBlocks() in length. This array is populated with
  /// LLVMBasicBlockRef instances.
  void LLVMGetBasicBlocks(
    LLVMValueRef Fn,
    ffi.Pointer<LLVMBasicBlockRef> BasicBlocks,
  ) {
    return _LLVMGetBasicBlocks(
      Fn,
      BasicBlocks,
    );
  }

  late final _LLVMGetBasicBlocksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef,
              ffi.Pointer<LLVMBasicBlockRef>)>>('LLVMGetBasicBlocks');
  late final _LLVMGetBasicBlocks = _LLVMGetBasicBlocksPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<LLVMBasicBlockRef>)>();

  /// Obtain the first basic block in a function.
  ///
  /// The returned basic block can be used as an iterator. You will likely
  /// eventually call into LLVMGetNextBasicBlock() with it.
  ///
  /// @see llvm::Function::begin()
  LLVMBasicBlockRef LLVMGetFirstBasicBlock(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetFirstBasicBlock(
      Fn,
    );
  }

  late final _LLVMGetFirstBasicBlockPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetFirstBasicBlock');
  late final _LLVMGetFirstBasicBlock = _LLVMGetFirstBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef)>();

  /// Obtain the last basic block in a function.
  ///
  /// @see llvm::Function::end()
  LLVMBasicBlockRef LLVMGetLastBasicBlock(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetLastBasicBlock(
      Fn,
    );
  }

  late final _LLVMGetLastBasicBlockPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetLastBasicBlock');
  late final _LLVMGetLastBasicBlock = _LLVMGetLastBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef)>();

  /// Advance a basic block iterator.
  LLVMBasicBlockRef LLVMGetNextBasicBlock(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetNextBasicBlock(
      BB,
    );
  }

  late final _LLVMGetNextBasicBlockPtr = _lookup<
          ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMBasicBlockRef)>>(
      'LLVMGetNextBasicBlock');
  late final _LLVMGetNextBasicBlock = _LLVMGetNextBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMBasicBlockRef)>();

  /// Go backwards in a basic block iterator.
  LLVMBasicBlockRef LLVMGetPreviousBasicBlock(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetPreviousBasicBlock(
      BB,
    );
  }

  late final _LLVMGetPreviousBasicBlockPtr = _lookup<
          ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMBasicBlockRef)>>(
      'LLVMGetPreviousBasicBlock');
  late final _LLVMGetPreviousBasicBlock = _LLVMGetPreviousBasicBlockPtr
      .asFunction<LLVMBasicBlockRef Function(LLVMBasicBlockRef)>();

  /// Obtain the basic block that corresponds to the entry point of a
  /// function.
  ///
  /// @see llvm::Function::getEntryBlock()
  LLVMBasicBlockRef LLVMGetEntryBasicBlock(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetEntryBasicBlock(
      Fn,
    );
  }

  late final _LLVMGetEntryBasicBlockPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetEntryBasicBlock');
  late final _LLVMGetEntryBasicBlock = _LLVMGetEntryBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef)>();

  /// Insert the given basic block after the insertion point of the given builder.
  ///
  /// The insertion point must be valid.
  ///
  /// @see llvm::Function::BasicBlockListType::insertAfter()
  void LLVMInsertExistingBasicBlockAfterInsertBlock(
    LLVMBuilderRef Builder,
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMInsertExistingBasicBlockAfterInsertBlock(
      Builder,
      BB,
    );
  }

  late final _LLVMInsertExistingBasicBlockAfterInsertBlockPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(LLVMBuilderRef, LLVMBasicBlockRef)>>(
      'LLVMInsertExistingBasicBlockAfterInsertBlock');
  late final _LLVMInsertExistingBasicBlockAfterInsertBlock =
      _LLVMInsertExistingBasicBlockAfterInsertBlockPtr.asFunction<
          void Function(LLVMBuilderRef, LLVMBasicBlockRef)>();

  /// Append the given basic block to the basic block list of the given function.
  ///
  /// @see llvm::Function::BasicBlockListType::push_back()
  void LLVMAppendExistingBasicBlock(
    LLVMValueRef Fn,
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMAppendExistingBasicBlock(
      Fn,
      BB,
    );
  }

  late final _LLVMAppendExistingBasicBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef,
              LLVMBasicBlockRef)>>('LLVMAppendExistingBasicBlock');
  late final _LLVMAppendExistingBasicBlock = _LLVMAppendExistingBasicBlockPtr
      .asFunction<void Function(LLVMValueRef, LLVMBasicBlockRef)>();

  /// Create a new basic block without inserting it into a function.
  ///
  /// @see llvm::BasicBlock::Create()
  LLVMBasicBlockRef LLVMCreateBasicBlockInContext(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMCreateBasicBlockInContext(
      C,
      Name,
    );
  }

  late final _LLVMCreateBasicBlockInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(LLVMContextRef,
              ffi.Pointer<ffi.Char>)>>('LLVMCreateBasicBlockInContext');
  late final _LLVMCreateBasicBlockInContext =
      _LLVMCreateBasicBlockInContextPtr.asFunction<
          LLVMBasicBlockRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>)>();

  /// Append a basic block to the end of a function.
  ///
  /// @see llvm::BasicBlock::Create()
  LLVMBasicBlockRef LLVMAppendBasicBlockInContext(
    LLVMContextRef C,
    LLVMValueRef Fn,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMAppendBasicBlockInContext(
      C,
      Fn,
      Name,
    );
  }

  late final _LLVMAppendBasicBlockInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(LLVMContextRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMAppendBasicBlockInContext');
  late final _LLVMAppendBasicBlockInContext =
      _LLVMAppendBasicBlockInContextPtr.asFunction<
          LLVMBasicBlockRef Function(
              LLVMContextRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  /// Append a basic block to the end of a function using the global
  /// context.
  ///
  /// @see llvm::BasicBlock::Create()
  LLVMBasicBlockRef LLVMAppendBasicBlock(
    LLVMValueRef Fn,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMAppendBasicBlock(
      Fn,
      Name,
    );
  }

  late final _LLVMAppendBasicBlockPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMAppendBasicBlock');
  late final _LLVMAppendBasicBlock = _LLVMAppendBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  /// Insert a basic block in a function before another basic block.
  ///
  /// The function to add to is determined by the function of the
  /// passed basic block.
  ///
  /// @see llvm::BasicBlock::Create()
  LLVMBasicBlockRef LLVMInsertBasicBlockInContext(
    LLVMContextRef C,
    LLVMBasicBlockRef BB,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMInsertBasicBlockInContext(
      C,
      BB,
      Name,
    );
  }

  late final _LLVMInsertBasicBlockInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(LLVMContextRef, LLVMBasicBlockRef,
              ffi.Pointer<ffi.Char>)>>('LLVMInsertBasicBlockInContext');
  late final _LLVMInsertBasicBlockInContext =
      _LLVMInsertBasicBlockInContextPtr.asFunction<
          LLVMBasicBlockRef Function(
              LLVMContextRef, LLVMBasicBlockRef, ffi.Pointer<ffi.Char>)>();

  /// Insert a basic block in a function using the global context.
  ///
  /// @see llvm::BasicBlock::Create()
  LLVMBasicBlockRef LLVMInsertBasicBlock(
    LLVMBasicBlockRef InsertBeforeBB,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMInsertBasicBlock(
      InsertBeforeBB,
      Name,
    );
  }

  late final _LLVMInsertBasicBlockPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(LLVMBasicBlockRef,
              ffi.Pointer<ffi.Char>)>>('LLVMInsertBasicBlock');
  late final _LLVMInsertBasicBlock = _LLVMInsertBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMBasicBlockRef, ffi.Pointer<ffi.Char>)>();

  /// Remove a basic block from a function and delete it.
  ///
  /// This deletes the basic block from its containing function and deletes
  /// the basic block itself.
  ///
  /// @see llvm::BasicBlock::eraseFromParent()
  void LLVMDeleteBasicBlock(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMDeleteBasicBlock(
      BB,
    );
  }

  late final _LLVMDeleteBasicBlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMBasicBlockRef)>>(
          'LLVMDeleteBasicBlock');
  late final _LLVMDeleteBasicBlock =
      _LLVMDeleteBasicBlockPtr.asFunction<void Function(LLVMBasicBlockRef)>();

  /// Remove a basic block from a function.
  ///
  /// This deletes the basic block from its containing function but keep
  /// the basic block alive.
  ///
  /// @see llvm::BasicBlock::removeFromParent()
  void LLVMRemoveBasicBlockFromParent(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMRemoveBasicBlockFromParent(
      BB,
    );
  }

  late final _LLVMRemoveBasicBlockFromParentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMBasicBlockRef)>>(
          'LLVMRemoveBasicBlockFromParent');
  late final _LLVMRemoveBasicBlockFromParent =
      _LLVMRemoveBasicBlockFromParentPtr.asFunction<
          void Function(LLVMBasicBlockRef)>();

  /// Move a basic block to before another one.
  ///
  /// @see llvm::BasicBlock::moveBefore()
  void LLVMMoveBasicBlockBefore(
    LLVMBasicBlockRef BB,
    LLVMBasicBlockRef MovePos,
  ) {
    return _LLVMMoveBasicBlockBefore(
      BB,
      MovePos,
    );
  }

  late final _LLVMMoveBasicBlockBeforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMBasicBlockRef,
              LLVMBasicBlockRef)>>('LLVMMoveBasicBlockBefore');
  late final _LLVMMoveBasicBlockBefore = _LLVMMoveBasicBlockBeforePtr
      .asFunction<void Function(LLVMBasicBlockRef, LLVMBasicBlockRef)>();

  /// Move a basic block to after another one.
  ///
  /// @see llvm::BasicBlock::moveAfter()
  void LLVMMoveBasicBlockAfter(
    LLVMBasicBlockRef BB,
    LLVMBasicBlockRef MovePos,
  ) {
    return _LLVMMoveBasicBlockAfter(
      BB,
      MovePos,
    );
  }

  late final _LLVMMoveBasicBlockAfterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMBasicBlockRef,
              LLVMBasicBlockRef)>>('LLVMMoveBasicBlockAfter');
  late final _LLVMMoveBasicBlockAfter = _LLVMMoveBasicBlockAfterPtr.asFunction<
      void Function(LLVMBasicBlockRef, LLVMBasicBlockRef)>();

  /// Obtain the first instruction in a basic block.
  ///
  /// The returned LLVMValueRef corresponds to a llvm::Instruction
  /// instance.
  LLVMValueRef LLVMGetFirstInstruction(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetFirstInstruction(
      BB,
    );
  }

  late final _LLVMGetFirstInstructionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBasicBlockRef)>>(
          'LLVMGetFirstInstruction');
  late final _LLVMGetFirstInstruction = _LLVMGetFirstInstructionPtr.asFunction<
      LLVMValueRef Function(LLVMBasicBlockRef)>();

  /// Obtain the last instruction in a basic block.
  ///
  /// The returned LLVMValueRef corresponds to an LLVM:Instruction.
  LLVMValueRef LLVMGetLastInstruction(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetLastInstruction(
      BB,
    );
  }

  late final _LLVMGetLastInstructionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBasicBlockRef)>>(
          'LLVMGetLastInstruction');
  late final _LLVMGetLastInstruction = _LLVMGetLastInstructionPtr.asFunction<
      LLVMValueRef Function(LLVMBasicBlockRef)>();

  /// Determine whether an instruction has any metadata attached.
  int LLVMHasMetadata(
    LLVMValueRef Val,
  ) {
    return _LLVMHasMetadata(
      Val,
    );
  }

  late final _LLVMHasMetadataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LLVMValueRef)>>(
          'LLVMHasMetadata');
  late final _LLVMHasMetadata =
      _LLVMHasMetadataPtr.asFunction<int Function(LLVMValueRef)>();

  /// Return metadata associated with an instruction value.
  LLVMValueRef LLVMGetMetadata(
    LLVMValueRef Val,
    int KindID,
  ) {
    return _LLVMGetMetadata(
      Val,
      KindID,
    );
  }

  late final _LLVMGetMetadataPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetMetadata');
  late final _LLVMGetMetadata = _LLVMGetMetadataPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, int)>();

  /// Set metadata associated with an instruction value.
  void LLVMSetMetadata(
    LLVMValueRef Val,
    int KindID,
    LLVMValueRef Node,
  ) {
    return _LLVMSetMetadata(
      Val,
      KindID,
      Node,
    );
  }

  late final _LLVMSetMetadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, ffi.UnsignedInt, LLVMValueRef)>>('LLVMSetMetadata');
  late final _LLVMSetMetadata = _LLVMSetMetadataPtr.asFunction<
      void Function(LLVMValueRef, int, LLVMValueRef)>();

  /// Returns the metadata associated with an instruction value, but filters out
  /// all the debug locations.
  ///
  /// @see llvm::Instruction::getAllMetadataOtherThanDebugLoc()
  ffi.Pointer<LLVMValueMetadataEntry>
      LLVMInstructionGetAllMetadataOtherThanDebugLoc(
    LLVMValueRef Instr,
    ffi.Pointer<ffi.Size> NumEntries,
  ) {
    return _LLVMInstructionGetAllMetadataOtherThanDebugLoc(
      Instr,
      NumEntries,
    );
  }

  late final _LLVMInstructionGetAllMetadataOtherThanDebugLocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<LLVMValueMetadataEntry> Function(
                  LLVMValueRef, ffi.Pointer<ffi.Size>)>>(
      'LLVMInstructionGetAllMetadataOtherThanDebugLoc');
  late final _LLVMInstructionGetAllMetadataOtherThanDebugLoc =
      _LLVMInstructionGetAllMetadataOtherThanDebugLocPtr.asFunction<
          ffi.Pointer<LLVMValueMetadataEntry> Function(
              LLVMValueRef, ffi.Pointer<ffi.Size>)>();

  /// Obtain the basic block to which an instruction belongs.
  ///
  /// @see llvm::Instruction::getParent()
  LLVMBasicBlockRef LLVMGetInstructionParent(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetInstructionParent(
      Inst,
    );
  }

  late final _LLVMGetInstructionParentPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetInstructionParent');
  late final _LLVMGetInstructionParent = _LLVMGetInstructionParentPtr
      .asFunction<LLVMBasicBlockRef Function(LLVMValueRef)>();

  /// Obtain the instruction that occurs after the one specified.
  ///
  /// The next instruction will be from the same basic block.
  ///
  /// If this is the last instruction in a basic block, NULL will be
  /// returned.
  LLVMValueRef LLVMGetNextInstruction(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetNextInstruction(
      Inst,
    );
  }

  late final _LLVMGetNextInstructionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetNextInstruction');
  late final _LLVMGetNextInstruction = _LLVMGetNextInstructionPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  /// Obtain the instruction that occurred before this one.
  ///
  /// If the instruction is the first instruction in a basic block, NULL
  /// will be returned.
  LLVMValueRef LLVMGetPreviousInstruction(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetPreviousInstruction(
      Inst,
    );
  }

  late final _LLVMGetPreviousInstructionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPreviousInstruction');
  late final _LLVMGetPreviousInstruction = _LLVMGetPreviousInstructionPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Remove an instruction.
  ///
  /// The instruction specified is removed from its containing building
  /// block but is kept alive.
  ///
  /// @see llvm::Instruction::removeFromParent()
  void LLVMInstructionRemoveFromParent(
    LLVMValueRef Inst,
  ) {
    return _LLVMInstructionRemoveFromParent(
      Inst,
    );
  }

  late final _LLVMInstructionRemoveFromParentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMInstructionRemoveFromParent');
  late final _LLVMInstructionRemoveFromParent =
      _LLVMInstructionRemoveFromParentPtr.asFunction<
          void Function(LLVMValueRef)>();

  /// Remove and delete an instruction.
  ///
  /// The instruction specified is removed from its containing building
  /// block and then deleted.
  ///
  /// @see llvm::Instruction::eraseFromParent()
  void LLVMInstructionEraseFromParent(
    LLVMValueRef Inst,
  ) {
    return _LLVMInstructionEraseFromParent(
      Inst,
    );
  }

  late final _LLVMInstructionEraseFromParentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMInstructionEraseFromParent');
  late final _LLVMInstructionEraseFromParent =
      _LLVMInstructionEraseFromParentPtr.asFunction<
          void Function(LLVMValueRef)>();

  /// Delete an instruction.
  ///
  /// The instruction specified is deleted. It must have previously been
  /// removed from its containing building block.
  ///
  /// @see llvm::Value::deleteValue()
  void LLVMDeleteInstruction(
    LLVMValueRef Inst,
  ) {
    return _LLVMDeleteInstruction(
      Inst,
    );
  }

  late final _LLVMDeleteInstructionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMDeleteInstruction');
  late final _LLVMDeleteInstruction =
      _LLVMDeleteInstructionPtr.asFunction<void Function(LLVMValueRef)>();

  /// Obtain the code opcode for an individual instruction.
  ///
  /// @see llvm::Instruction::getOpCode()
  int LLVMGetInstructionOpcode(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetInstructionOpcode(
      Inst,
    );
  }

  late final _LLVMGetInstructionOpcodePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetInstructionOpcode');
  late final _LLVMGetInstructionOpcode =
      _LLVMGetInstructionOpcodePtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain the predicate of an instruction.
  ///
  /// This is only valid for instructions that correspond to llvm::ICmpInst
  /// or llvm::ConstantExpr whose opcode is llvm::Instruction::ICmp.
  ///
  /// @see llvm::ICmpInst::getPredicate()
  int LLVMGetICmpPredicate(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetICmpPredicate(
      Inst,
    );
  }

  late final _LLVMGetICmpPredicatePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetICmpPredicate');
  late final _LLVMGetICmpPredicate =
      _LLVMGetICmpPredicatePtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain the float predicate of an instruction.
  ///
  /// This is only valid for instructions that correspond to llvm::FCmpInst
  /// or llvm::ConstantExpr whose opcode is llvm::Instruction::FCmp.
  ///
  /// @see llvm::FCmpInst::getPredicate()
  int LLVMGetFCmpPredicate(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetFCmpPredicate(
      Inst,
    );
  }

  late final _LLVMGetFCmpPredicatePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetFCmpPredicate');
  late final _LLVMGetFCmpPredicate =
      _LLVMGetFCmpPredicatePtr.asFunction<int Function(LLVMValueRef)>();

  /// Create a copy of 'this' instruction that is identical in all ways
  /// except the following:
  /// * The instruction has no parent
  /// * The instruction has no name
  ///
  /// @see llvm::Instruction::clone()
  LLVMValueRef LLVMInstructionClone(
    LLVMValueRef Inst,
  ) {
    return _LLVMInstructionClone(
      Inst,
    );
  }

  late final _LLVMInstructionClonePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMInstructionClone');
  late final _LLVMInstructionClone = _LLVMInstructionClonePtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  /// Determine whether an instruction is a terminator. This routine is named to
  /// be compatible with historical functions that did this by querying the
  /// underlying C++ type.
  ///
  /// @see llvm::Instruction::isTerminator()
  LLVMValueRef LLVMIsATerminatorInst(
    LLVMValueRef Inst,
  ) {
    return _LLVMIsATerminatorInst(
      Inst,
    );
  }

  late final _LLVMIsATerminatorInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsATerminatorInst');
  late final _LLVMIsATerminatorInst = _LLVMIsATerminatorInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  /// Obtain the argument count for a call instruction.
  ///
  /// This expects an LLVMValueRef that corresponds to a llvm::CallInst,
  /// llvm::InvokeInst, or llvm:FuncletPadInst.
  ///
  /// @see llvm::CallInst::getNumArgOperands()
  /// @see llvm::InvokeInst::getNumArgOperands()
  /// @see llvm::FuncletPadInst::getNumArgOperands()
  int LLVMGetNumArgOperands(
    LLVMValueRef Instr,
  ) {
    return _LLVMGetNumArgOperands(
      Instr,
    );
  }

  late final _LLVMGetNumArgOperandsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetNumArgOperands');
  late final _LLVMGetNumArgOperands =
      _LLVMGetNumArgOperandsPtr.asFunction<int Function(LLVMValueRef)>();

  /// Set the calling convention for a call instruction.
  ///
  /// This expects an LLVMValueRef that corresponds to a llvm::CallInst or
  /// llvm::InvokeInst.
  ///
  /// @see llvm::CallInst::setCallingConv()
  /// @see llvm::InvokeInst::setCallingConv()
  void LLVMSetInstructionCallConv(
    LLVMValueRef Instr,
    int CC,
  ) {
    return _LLVMSetInstructionCallConv(
      Instr,
      CC,
    );
  }

  late final _LLVMSetInstructionCallConvPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.UnsignedInt)>>(
      'LLVMSetInstructionCallConv');
  late final _LLVMSetInstructionCallConv = _LLVMSetInstructionCallConvPtr
      .asFunction<void Function(LLVMValueRef, int)>();

  /// Obtain the calling convention for a call instruction.
  ///
  /// This is the opposite of LLVMSetInstructionCallConv(). Reads its
  /// usage.
  ///
  /// @see LLVMSetInstructionCallConv()
  int LLVMGetInstructionCallConv(
    LLVMValueRef Instr,
  ) {
    return _LLVMGetInstructionCallConv(
      Instr,
    );
  }

  late final _LLVMGetInstructionCallConvPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetInstructionCallConv');
  late final _LLVMGetInstructionCallConv =
      _LLVMGetInstructionCallConvPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetInstrParamAlignment(
    LLVMValueRef Instr,
    int Idx,
    int Align,
  ) {
    return _LLVMSetInstrParamAlignment(
      Instr,
      Idx,
      Align,
    );
  }

  late final _LLVMSetInstrParamAlignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.UnsignedInt)>>('LLVMSetInstrParamAlignment');
  late final _LLVMSetInstrParamAlignment = _LLVMSetInstrParamAlignmentPtr
      .asFunction<void Function(LLVMValueRef, int, int)>();

  void LLVMAddCallSiteAttribute(
    LLVMValueRef C,
    int Idx,
    LLVMAttributeRef A,
  ) {
    return _LLVMAddCallSiteAttribute(
      C,
      Idx,
      A,
    );
  }

  late final _LLVMAddCallSiteAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              LLVMAttributeRef)>>('LLVMAddCallSiteAttribute');
  late final _LLVMAddCallSiteAttribute = _LLVMAddCallSiteAttributePtr
      .asFunction<void Function(LLVMValueRef, int, LLVMAttributeRef)>();

  int LLVMGetCallSiteAttributeCount(
    LLVMValueRef C,
    int Idx,
  ) {
    return _LLVMGetCallSiteAttributeCount(
      C,
      Idx,
    );
  }

  late final _LLVMGetCallSiteAttributeCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(LLVMValueRef,
              LLVMAttributeIndex)>>('LLVMGetCallSiteAttributeCount');
  late final _LLVMGetCallSiteAttributeCount = _LLVMGetCallSiteAttributeCountPtr
      .asFunction<int Function(LLVMValueRef, int)>();

  void LLVMGetCallSiteAttributes(
    LLVMValueRef C,
    int Idx,
    ffi.Pointer<LLVMAttributeRef> Attrs,
  ) {
    return _LLVMGetCallSiteAttributes(
      C,
      Idx,
      Attrs,
    );
  }

  late final _LLVMGetCallSiteAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.Pointer<LLVMAttributeRef>)>>('LLVMGetCallSiteAttributes');
  late final _LLVMGetCallSiteAttributes =
      _LLVMGetCallSiteAttributesPtr.asFunction<
          void Function(LLVMValueRef, int, ffi.Pointer<LLVMAttributeRef>)>();

  LLVMAttributeRef LLVMGetCallSiteEnumAttribute(
    LLVMValueRef C,
    int Idx,
    int KindID,
  ) {
    return _LLVMGetCallSiteEnumAttribute(
      C,
      Idx,
      KindID,
    );
  }

  late final _LLVMGetCallSiteEnumAttributePtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.UnsignedInt)>>('LLVMGetCallSiteEnumAttribute');
  late final _LLVMGetCallSiteEnumAttribute = _LLVMGetCallSiteEnumAttributePtr
      .asFunction<LLVMAttributeRef Function(LLVMValueRef, int, int)>();

  LLVMAttributeRef LLVMGetCallSiteStringAttribute(
    LLVMValueRef C,
    int Idx,
    ffi.Pointer<ffi.Char> K,
    int KLen,
  ) {
    return _LLVMGetCallSiteStringAttribute(
      C,
      Idx,
      K,
      KLen,
    );
  }

  late final _LLVMGetCallSiteStringAttributePtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(
              LLVMValueRef,
              LLVMAttributeIndex,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMGetCallSiteStringAttribute');
  late final _LLVMGetCallSiteStringAttribute =
      _LLVMGetCallSiteStringAttributePtr.asFunction<
          LLVMAttributeRef Function(
              LLVMValueRef, int, ffi.Pointer<ffi.Char>, int)>();

  void LLVMRemoveCallSiteEnumAttribute(
    LLVMValueRef C,
    int Idx,
    int KindID,
  ) {
    return _LLVMRemoveCallSiteEnumAttribute(
      C,
      Idx,
      KindID,
    );
  }

  late final _LLVMRemoveCallSiteEnumAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.UnsignedInt)>>('LLVMRemoveCallSiteEnumAttribute');
  late final _LLVMRemoveCallSiteEnumAttribute =
      _LLVMRemoveCallSiteEnumAttributePtr.asFunction<
          void Function(LLVMValueRef, int, int)>();

  void LLVMRemoveCallSiteStringAttribute(
    LLVMValueRef C,
    int Idx,
    ffi.Pointer<ffi.Char> K,
    int KLen,
  ) {
    return _LLVMRemoveCallSiteStringAttribute(
      C,
      Idx,
      K,
      KLen,
    );
  }

  late final _LLVMRemoveCallSiteStringAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef,
              LLVMAttributeIndex,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMRemoveCallSiteStringAttribute');
  late final _LLVMRemoveCallSiteStringAttribute =
      _LLVMRemoveCallSiteStringAttributePtr.asFunction<
          void Function(LLVMValueRef, int, ffi.Pointer<ffi.Char>, int)>();

  /// Obtain the function type called by this instruction.
  ///
  /// @see llvm::CallBase::getFunctionType()
  LLVMTypeRef LLVMGetCalledFunctionType(
    LLVMValueRef C,
  ) {
    return _LLVMGetCalledFunctionType(
      C,
    );
  }

  late final _LLVMGetCalledFunctionTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMValueRef)>>(
          'LLVMGetCalledFunctionType');
  late final _LLVMGetCalledFunctionType = _LLVMGetCalledFunctionTypePtr
      .asFunction<LLVMTypeRef Function(LLVMValueRef)>();

  /// Obtain the pointer to the function invoked by this instruction.
  ///
  /// This expects an LLVMValueRef that corresponds to a llvm::CallInst or
  /// llvm::InvokeInst.
  ///
  /// @see llvm::CallInst::getCalledOperand()
  /// @see llvm::InvokeInst::getCalledOperand()
  LLVMValueRef LLVMGetCalledValue(
    LLVMValueRef Instr,
  ) {
    return _LLVMGetCalledValue(
      Instr,
    );
  }

  late final _LLVMGetCalledValuePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetCalledValue');
  late final _LLVMGetCalledValue =
      _LLVMGetCalledValuePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Obtain whether a call instruction is a tail call.
  ///
  /// This only works on llvm::CallInst instructions.
  ///
  /// @see llvm::CallInst::isTailCall()
  int LLVMIsTailCall(
    LLVMValueRef CallInst,
  ) {
    return _LLVMIsTailCall(
      CallInst,
    );
  }

  late final _LLVMIsTailCallPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsTailCall');
  late final _LLVMIsTailCall =
      _LLVMIsTailCallPtr.asFunction<int Function(LLVMValueRef)>();

  /// Set whether a call instruction is a tail call.
  ///
  /// This only works on llvm::CallInst instructions.
  ///
  /// @see llvm::CallInst::setTailCall()
  void LLVMSetTailCall(
    LLVMValueRef CallInst,
    int IsTailCall,
  ) {
    return _LLVMSetTailCall(
      CallInst,
      IsTailCall,
    );
  }

  late final _LLVMSetTailCallPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetTailCall');
  late final _LLVMSetTailCall =
      _LLVMSetTailCallPtr.asFunction<void Function(LLVMValueRef, int)>();

  /// Return the normal destination basic block.
  ///
  /// This only works on llvm::InvokeInst instructions.
  ///
  /// @see llvm::InvokeInst::getNormalDest()
  LLVMBasicBlockRef LLVMGetNormalDest(
    LLVMValueRef InvokeInst,
  ) {
    return _LLVMGetNormalDest(
      InvokeInst,
    );
  }

  late final _LLVMGetNormalDestPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetNormalDest');
  late final _LLVMGetNormalDest = _LLVMGetNormalDestPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef)>();

  /// Return the unwind destination basic block.
  ///
  /// Works on llvm::InvokeInst, llvm::CleanupReturnInst, and
  /// llvm::CatchSwitchInst instructions.
  ///
  /// @see llvm::InvokeInst::getUnwindDest()
  /// @see llvm::CleanupReturnInst::getUnwindDest()
  /// @see llvm::CatchSwitchInst::getUnwindDest()
  LLVMBasicBlockRef LLVMGetUnwindDest(
    LLVMValueRef InvokeInst,
  ) {
    return _LLVMGetUnwindDest(
      InvokeInst,
    );
  }

  late final _LLVMGetUnwindDestPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetUnwindDest');
  late final _LLVMGetUnwindDest = _LLVMGetUnwindDestPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef)>();

  /// Set the normal destination basic block.
  ///
  /// This only works on llvm::InvokeInst instructions.
  ///
  /// @see llvm::InvokeInst::setNormalDest()
  void LLVMSetNormalDest(
    LLVMValueRef InvokeInst,
    LLVMBasicBlockRef B,
  ) {
    return _LLVMSetNormalDest(
      InvokeInst,
      B,
    );
  }

  late final _LLVMSetNormalDestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, LLVMBasicBlockRef)>>('LLVMSetNormalDest');
  late final _LLVMSetNormalDest = _LLVMSetNormalDestPtr.asFunction<
      void Function(LLVMValueRef, LLVMBasicBlockRef)>();

  /// Set the unwind destination basic block.
  ///
  /// Works on llvm::InvokeInst, llvm::CleanupReturnInst, and
  /// llvm::CatchSwitchInst instructions.
  ///
  /// @see llvm::InvokeInst::setUnwindDest()
  /// @see llvm::CleanupReturnInst::setUnwindDest()
  /// @see llvm::CatchSwitchInst::setUnwindDest()
  void LLVMSetUnwindDest(
    LLVMValueRef InvokeInst,
    LLVMBasicBlockRef B,
  ) {
    return _LLVMSetUnwindDest(
      InvokeInst,
      B,
    );
  }

  late final _LLVMSetUnwindDestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, LLVMBasicBlockRef)>>('LLVMSetUnwindDest');
  late final _LLVMSetUnwindDest = _LLVMSetUnwindDestPtr.asFunction<
      void Function(LLVMValueRef, LLVMBasicBlockRef)>();

  /// Return the number of successors that this terminator has.
  ///
  /// @see llvm::Instruction::getNumSuccessors
  int LLVMGetNumSuccessors(
    LLVMValueRef Term,
  ) {
    return _LLVMGetNumSuccessors(
      Term,
    );
  }

  late final _LLVMGetNumSuccessorsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetNumSuccessors');
  late final _LLVMGetNumSuccessors =
      _LLVMGetNumSuccessorsPtr.asFunction<int Function(LLVMValueRef)>();

  /// Return the specified successor.
  ///
  /// @see llvm::Instruction::getSuccessor
  LLVMBasicBlockRef LLVMGetSuccessor(
    LLVMValueRef Term,
    int i,
  ) {
    return _LLVMGetSuccessor(
      Term,
      i,
    );
  }

  late final _LLVMGetSuccessorPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetSuccessor');
  late final _LLVMGetSuccessor = _LLVMGetSuccessorPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef, int)>();

  /// Update the specified successor to point at the provided block.
  ///
  /// @see llvm::Instruction::setSuccessor
  void LLVMSetSuccessor(
    LLVMValueRef Term,
    int i,
    LLVMBasicBlockRef block,
  ) {
    return _LLVMSetSuccessor(
      Term,
      i,
      block,
    );
  }

  late final _LLVMSetSuccessorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.UnsignedInt,
              LLVMBasicBlockRef)>>('LLVMSetSuccessor');
  late final _LLVMSetSuccessor = _LLVMSetSuccessorPtr.asFunction<
      void Function(LLVMValueRef, int, LLVMBasicBlockRef)>();

  /// Return if a branch is conditional.
  ///
  /// This only works on llvm::BranchInst instructions.
  ///
  /// @see llvm::BranchInst::isConditional
  int LLVMIsConditional(
    LLVMValueRef Branch,
  ) {
    return _LLVMIsConditional(
      Branch,
    );
  }

  late final _LLVMIsConditionalPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsConditional');
  late final _LLVMIsConditional =
      _LLVMIsConditionalPtr.asFunction<int Function(LLVMValueRef)>();

  /// Return the condition of a branch instruction.
  ///
  /// This only works on llvm::BranchInst instructions.
  ///
  /// @see llvm::BranchInst::getCondition
  LLVMValueRef LLVMGetCondition(
    LLVMValueRef Branch,
  ) {
    return _LLVMGetCondition(
      Branch,
    );
  }

  late final _LLVMGetConditionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetCondition');
  late final _LLVMGetCondition =
      _LLVMGetConditionPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Set the condition of a branch instruction.
  ///
  /// This only works on llvm::BranchInst instructions.
  ///
  /// @see llvm::BranchInst::setCondition
  void LLVMSetCondition(
    LLVMValueRef Branch,
    LLVMValueRef Cond,
  ) {
    return _LLVMSetCondition(
      Branch,
      Cond,
    );
  }

  late final _LLVMSetConditionPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMSetCondition');
  late final _LLVMSetCondition = _LLVMSetConditionPtr.asFunction<
      void Function(LLVMValueRef, LLVMValueRef)>();

  /// Obtain the default destination basic block of a switch instruction.
  ///
  /// This only works on llvm::SwitchInst instructions.
  ///
  /// @see llvm::SwitchInst::getDefaultDest()
  LLVMBasicBlockRef LLVMGetSwitchDefaultDest(
    LLVMValueRef SwitchInstr,
  ) {
    return _LLVMGetSwitchDefaultDest(
      SwitchInstr,
    );
  }

  late final _LLVMGetSwitchDefaultDestPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetSwitchDefaultDest');
  late final _LLVMGetSwitchDefaultDest = _LLVMGetSwitchDefaultDestPtr
      .asFunction<LLVMBasicBlockRef Function(LLVMValueRef)>();

  /// Obtain the type that is being allocated by the alloca instruction.
  LLVMTypeRef LLVMGetAllocatedType(
    LLVMValueRef Alloca,
  ) {
    return _LLVMGetAllocatedType(
      Alloca,
    );
  }

  late final _LLVMGetAllocatedTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMValueRef)>>(
          'LLVMGetAllocatedType');
  late final _LLVMGetAllocatedType =
      _LLVMGetAllocatedTypePtr.asFunction<LLVMTypeRef Function(LLVMValueRef)>();

  /// Check whether the given GEP operator is inbounds.
  int LLVMIsInBounds(
    LLVMValueRef GEP,
  ) {
    return _LLVMIsInBounds(
      GEP,
    );
  }

  late final _LLVMIsInBoundsPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsInBounds');
  late final _LLVMIsInBounds =
      _LLVMIsInBoundsPtr.asFunction<int Function(LLVMValueRef)>();

  /// Set the given GEP instruction to be inbounds or not.
  void LLVMSetIsInBounds(
    LLVMValueRef GEP,
    int InBounds,
  ) {
    return _LLVMSetIsInBounds(
      GEP,
      InBounds,
    );
  }

  late final _LLVMSetIsInBoundsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetIsInBounds');
  late final _LLVMSetIsInBounds =
      _LLVMSetIsInBoundsPtr.asFunction<void Function(LLVMValueRef, int)>();

  /// Get the source element type of the given GEP operator.
  LLVMTypeRef LLVMGetGEPSourceElementType(
    LLVMValueRef GEP,
  ) {
    return _LLVMGetGEPSourceElementType(
      GEP,
    );
  }

  late final _LLVMGetGEPSourceElementTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMValueRef)>>(
          'LLVMGetGEPSourceElementType');
  late final _LLVMGetGEPSourceElementType = _LLVMGetGEPSourceElementTypePtr
      .asFunction<LLVMTypeRef Function(LLVMValueRef)>();

  /// Add an incoming value to the end of a PHI list.
  void LLVMAddIncoming(
    LLVMValueRef PhiNode,
    ffi.Pointer<LLVMValueRef> IncomingValues,
    ffi.Pointer<LLVMBasicBlockRef> IncomingBlocks,
    int Count,
  ) {
    return _LLVMAddIncoming(
      PhiNode,
      IncomingValues,
      IncomingBlocks,
      Count,
    );
  }

  late final _LLVMAddIncomingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.Pointer<LLVMBasicBlockRef>,
              ffi.UnsignedInt)>>('LLVMAddIncoming');
  late final _LLVMAddIncoming = _LLVMAddIncomingPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<LLVMValueRef>,
          ffi.Pointer<LLVMBasicBlockRef>, int)>();

  /// Obtain the number of incoming basic blocks to a PHI node.
  int LLVMCountIncoming(
    LLVMValueRef PhiNode,
  ) {
    return _LLVMCountIncoming(
      PhiNode,
    );
  }

  late final _LLVMCountIncomingPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMCountIncoming');
  late final _LLVMCountIncoming =
      _LLVMCountIncomingPtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain an incoming value to a PHI node as an LLVMValueRef.
  LLVMValueRef LLVMGetIncomingValue(
    LLVMValueRef PhiNode,
    int Index,
  ) {
    return _LLVMGetIncomingValue(
      PhiNode,
      Index,
    );
  }

  late final _LLVMGetIncomingValuePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetIncomingValue');
  late final _LLVMGetIncomingValue = _LLVMGetIncomingValuePtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, int)>();

  /// Obtain an incoming value to a PHI node as an LLVMBasicBlockRef.
  LLVMBasicBlockRef LLVMGetIncomingBlock(
    LLVMValueRef PhiNode,
    int Index,
  ) {
    return _LLVMGetIncomingBlock(
      PhiNode,
      Index,
    );
  }

  late final _LLVMGetIncomingBlockPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetIncomingBlock');
  late final _LLVMGetIncomingBlock = _LLVMGetIncomingBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef, int)>();

  /// Obtain the number of indices.
  /// NB: This also works on GEP operators.
  int LLVMGetNumIndices(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetNumIndices(
      Inst,
    );
  }

  late final _LLVMGetNumIndicesPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetNumIndices');
  late final _LLVMGetNumIndices =
      _LLVMGetNumIndicesPtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain the indices as an array.
  ffi.Pointer<ffi.UnsignedInt> LLVMGetIndices(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetIndices(
      Inst,
    );
  }

  late final _LLVMGetIndicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedInt> Function(
              LLVMValueRef)>>('LLVMGetIndices');
  late final _LLVMGetIndices = _LLVMGetIndicesPtr.asFunction<
      ffi.Pointer<ffi.UnsignedInt> Function(LLVMValueRef)>();

  /// @defgroup LLVMCCoreInstructionBuilder Instruction Builders
  ///
  /// An instruction builder represents a point within a basic block and is
  /// the exclusive means of building instructions using the C interface.
  ///
  /// @{
  LLVMBuilderRef LLVMCreateBuilderInContext(
    LLVMContextRef C,
  ) {
    return _LLVMCreateBuilderInContext(
      C,
    );
  }

  late final _LLVMCreateBuilderInContextPtr =
      _lookup<ffi.NativeFunction<LLVMBuilderRef Function(LLVMContextRef)>>(
          'LLVMCreateBuilderInContext');
  late final _LLVMCreateBuilderInContext = _LLVMCreateBuilderInContextPtr
      .asFunction<LLVMBuilderRef Function(LLVMContextRef)>();

  LLVMBuilderRef LLVMCreateBuilder() {
    return _LLVMCreateBuilder();
  }

  late final _LLVMCreateBuilderPtr =
      _lookup<ffi.NativeFunction<LLVMBuilderRef Function()>>(
          'LLVMCreateBuilder');
  late final _LLVMCreateBuilder =
      _LLVMCreateBuilderPtr.asFunction<LLVMBuilderRef Function()>();

  void LLVMPositionBuilder(
    LLVMBuilderRef Builder,
    LLVMBasicBlockRef Block,
    LLVMValueRef Instr,
  ) {
    return _LLVMPositionBuilder(
      Builder,
      Block,
      Instr,
    );
  }

  late final _LLVMPositionBuilderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMBuilderRef, LLVMBasicBlockRef,
              LLVMValueRef)>>('LLVMPositionBuilder');
  late final _LLVMPositionBuilder = _LLVMPositionBuilderPtr.asFunction<
      void Function(LLVMBuilderRef, LLVMBasicBlockRef, LLVMValueRef)>();

  void LLVMPositionBuilderBefore(
    LLVMBuilderRef Builder,
    LLVMValueRef Instr,
  ) {
    return _LLVMPositionBuilderBefore(
      Builder,
      Instr,
    );
  }

  late final _LLVMPositionBuilderBeforePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef, LLVMValueRef)>>(
      'LLVMPositionBuilderBefore');
  late final _LLVMPositionBuilderBefore = _LLVMPositionBuilderBeforePtr
      .asFunction<void Function(LLVMBuilderRef, LLVMValueRef)>();

  void LLVMPositionBuilderAtEnd(
    LLVMBuilderRef Builder,
    LLVMBasicBlockRef Block,
  ) {
    return _LLVMPositionBuilderAtEnd(
      Builder,
      Block,
    );
  }

  late final _LLVMPositionBuilderAtEndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMBuilderRef, LLVMBasicBlockRef)>>('LLVMPositionBuilderAtEnd');
  late final _LLVMPositionBuilderAtEnd = _LLVMPositionBuilderAtEndPtr
      .asFunction<void Function(LLVMBuilderRef, LLVMBasicBlockRef)>();

  LLVMBasicBlockRef LLVMGetInsertBlock(
    LLVMBuilderRef Builder,
  ) {
    return _LLVMGetInsertBlock(
      Builder,
    );
  }

  late final _LLVMGetInsertBlockPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMBuilderRef)>>(
          'LLVMGetInsertBlock');
  late final _LLVMGetInsertBlock = _LLVMGetInsertBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMBuilderRef)>();

  void LLVMClearInsertionPosition(
    LLVMBuilderRef Builder,
  ) {
    return _LLVMClearInsertionPosition(
      Builder,
    );
  }

  late final _LLVMClearInsertionPositionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef)>>(
          'LLVMClearInsertionPosition');
  late final _LLVMClearInsertionPosition = _LLVMClearInsertionPositionPtr
      .asFunction<void Function(LLVMBuilderRef)>();

  void LLVMInsertIntoBuilder(
    LLVMBuilderRef Builder,
    LLVMValueRef Instr,
  ) {
    return _LLVMInsertIntoBuilder(
      Builder,
      Instr,
    );
  }

  late final _LLVMInsertIntoBuilderPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef, LLVMValueRef)>>(
      'LLVMInsertIntoBuilder');
  late final _LLVMInsertIntoBuilder = _LLVMInsertIntoBuilderPtr.asFunction<
      void Function(LLVMBuilderRef, LLVMValueRef)>();

  void LLVMInsertIntoBuilderWithName(
    LLVMBuilderRef Builder,
    LLVMValueRef Instr,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMInsertIntoBuilderWithName(
      Builder,
      Instr,
      Name,
    );
  }

  late final _LLVMInsertIntoBuilderWithNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMInsertIntoBuilderWithName');
  late final _LLVMInsertIntoBuilderWithName =
      _LLVMInsertIntoBuilderWithNamePtr.asFunction<
          void Function(LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  void LLVMDisposeBuilder(
    LLVMBuilderRef Builder,
  ) {
    return _LLVMDisposeBuilder(
      Builder,
    );
  }

  late final _LLVMDisposeBuilderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef)>>(
          'LLVMDisposeBuilder');
  late final _LLVMDisposeBuilder =
      _LLVMDisposeBuilderPtr.asFunction<void Function(LLVMBuilderRef)>();

  /// Get location information used by debugging information.
  ///
  /// @see llvm::IRBuilder::getCurrentDebugLocation()
  LLVMMetadataRef LLVMGetCurrentDebugLocation2(
    LLVMBuilderRef Builder,
  ) {
    return _LLVMGetCurrentDebugLocation2(
      Builder,
    );
  }

  late final _LLVMGetCurrentDebugLocation2Ptr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMBuilderRef)>>(
          'LLVMGetCurrentDebugLocation2');
  late final _LLVMGetCurrentDebugLocation2 = _LLVMGetCurrentDebugLocation2Ptr
      .asFunction<LLVMMetadataRef Function(LLVMBuilderRef)>();

  /// Set location information used by debugging information.
  ///
  /// To clear the location metadata of the given instruction, pass NULL to \p Loc.
  ///
  /// @see llvm::IRBuilder::SetCurrentDebugLocation()
  void LLVMSetCurrentDebugLocation2(
    LLVMBuilderRef Builder,
    LLVMMetadataRef Loc,
  ) {
    return _LLVMSetCurrentDebugLocation2(
      Builder,
      Loc,
    );
  }

  late final _LLVMSetCurrentDebugLocation2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMBuilderRef,
              LLVMMetadataRef)>>('LLVMSetCurrentDebugLocation2');
  late final _LLVMSetCurrentDebugLocation2 = _LLVMSetCurrentDebugLocation2Ptr
      .asFunction<void Function(LLVMBuilderRef, LLVMMetadataRef)>();

  /// Attempts to set the debug location for the given instruction using the
  /// current debug location for the given builder.  If the builder has no current
  /// debug location, this function is a no-op.
  ///
  /// @deprecated LLVMSetInstDebugLocation is deprecated in favor of the more general
  /// LLVMAddMetadataToInst.
  ///
  /// @see llvm::IRBuilder::SetInstDebugLocation()
  void LLVMSetInstDebugLocation(
    LLVMBuilderRef Builder,
    LLVMValueRef Inst,
  ) {
    return _LLVMSetInstDebugLocation(
      Builder,
      Inst,
    );
  }

  late final _LLVMSetInstDebugLocationPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef, LLVMValueRef)>>(
      'LLVMSetInstDebugLocation');
  late final _LLVMSetInstDebugLocation = _LLVMSetInstDebugLocationPtr
      .asFunction<void Function(LLVMBuilderRef, LLVMValueRef)>();

  /// Adds the metadata registered with the given builder to the given instruction.
  ///
  /// @see llvm::IRBuilder::AddMetadataToInst()
  void LLVMAddMetadataToInst(
    LLVMBuilderRef Builder,
    LLVMValueRef Inst,
  ) {
    return _LLVMAddMetadataToInst(
      Builder,
      Inst,
    );
  }

  late final _LLVMAddMetadataToInstPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef, LLVMValueRef)>>(
      'LLVMAddMetadataToInst');
  late final _LLVMAddMetadataToInst = _LLVMAddMetadataToInstPtr.asFunction<
      void Function(LLVMBuilderRef, LLVMValueRef)>();

  /// Get the dafult floating-point math metadata for a given builder.
  ///
  /// @see llvm::IRBuilder::getDefaultFPMathTag()
  LLVMMetadataRef LLVMBuilderGetDefaultFPMathTag(
    LLVMBuilderRef Builder,
  ) {
    return _LLVMBuilderGetDefaultFPMathTag(
      Builder,
    );
  }

  late final _LLVMBuilderGetDefaultFPMathTagPtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMBuilderRef)>>(
          'LLVMBuilderGetDefaultFPMathTag');
  late final _LLVMBuilderGetDefaultFPMathTag =
      _LLVMBuilderGetDefaultFPMathTagPtr.asFunction<
          LLVMMetadataRef Function(LLVMBuilderRef)>();

  /// Set the default floating-point math metadata for the given builder.
  ///
  /// To clear the metadata, pass NULL to \p FPMathTag.
  ///
  /// @see llvm::IRBuilder::setDefaultFPMathTag()
  void LLVMBuilderSetDefaultFPMathTag(
    LLVMBuilderRef Builder,
    LLVMMetadataRef FPMathTag,
  ) {
    return _LLVMBuilderSetDefaultFPMathTag(
      Builder,
      FPMathTag,
    );
  }

  late final _LLVMBuilderSetDefaultFPMathTagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMBuilderRef,
              LLVMMetadataRef)>>('LLVMBuilderSetDefaultFPMathTag');
  late final _LLVMBuilderSetDefaultFPMathTag =
      _LLVMBuilderSetDefaultFPMathTagPtr.asFunction<
          void Function(LLVMBuilderRef, LLVMMetadataRef)>();

  /// Deprecated: Passing the NULL location will crash.
  /// Use LLVMGetCurrentDebugLocation2 instead.
  void LLVMSetCurrentDebugLocation(
    LLVMBuilderRef Builder,
    LLVMValueRef L,
  ) {
    return _LLVMSetCurrentDebugLocation(
      Builder,
      L,
    );
  }

  late final _LLVMSetCurrentDebugLocationPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef, LLVMValueRef)>>(
      'LLVMSetCurrentDebugLocation');
  late final _LLVMSetCurrentDebugLocation = _LLVMSetCurrentDebugLocationPtr
      .asFunction<void Function(LLVMBuilderRef, LLVMValueRef)>();

  /// Deprecated: Returning the NULL location will crash.
  /// Use LLVMGetCurrentDebugLocation2 instead.
  LLVMValueRef LLVMGetCurrentDebugLocation(
    LLVMBuilderRef Builder,
  ) {
    return _LLVMGetCurrentDebugLocation(
      Builder,
    );
  }

  late final _LLVMGetCurrentDebugLocationPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBuilderRef)>>(
          'LLVMGetCurrentDebugLocation');
  late final _LLVMGetCurrentDebugLocation = _LLVMGetCurrentDebugLocationPtr
      .asFunction<LLVMValueRef Function(LLVMBuilderRef)>();

  LLVMValueRef LLVMBuildRetVoid(
    LLVMBuilderRef arg0,
  ) {
    return _LLVMBuildRetVoid(
      arg0,
    );
  }

  late final _LLVMBuildRetVoidPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBuilderRef)>>(
          'LLVMBuildRetVoid');
  late final _LLVMBuildRetVoid =
      _LLVMBuildRetVoidPtr.asFunction<LLVMValueRef Function(LLVMBuilderRef)>();

  LLVMValueRef LLVMBuildRet(
    LLVMBuilderRef arg0,
    LLVMValueRef V,
  ) {
    return _LLVMBuildRet(
      arg0,
      V,
    );
  }

  late final _LLVMBuildRetPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef)>>('LLVMBuildRet');
  late final _LLVMBuildRet = _LLVMBuildRetPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef)>();

  LLVMValueRef LLVMBuildAggregateRet(
    LLVMBuilderRef arg0,
    ffi.Pointer<LLVMValueRef> RetVals,
    int N,
  ) {
    return _LLVMBuildAggregateRet(
      arg0,
      RetVals,
      N,
    );
  }

  late final _LLVMBuildAggregateRetPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt)>>('LLVMBuildAggregateRet');
  late final _LLVMBuildAggregateRet = _LLVMBuildAggregateRetPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, ffi.Pointer<LLVMValueRef>, int)>();

  LLVMValueRef LLVMBuildBr(
    LLVMBuilderRef arg0,
    LLVMBasicBlockRef Dest,
  ) {
    return _LLVMBuildBr(
      arg0,
      Dest,
    );
  }

  late final _LLVMBuildBrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef, LLVMBasicBlockRef)>>('LLVMBuildBr');
  late final _LLVMBuildBr = _LLVMBuildBrPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMBasicBlockRef)>();

  LLVMValueRef LLVMBuildCondBr(
    LLVMBuilderRef arg0,
    LLVMValueRef If,
    LLVMBasicBlockRef Then,
    LLVMBasicBlockRef Else,
  ) {
    return _LLVMBuildCondBr(
      arg0,
      If,
      Then,
      Else,
    );
  }

  late final _LLVMBuildCondBrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef,
              LLVMBasicBlockRef)>>('LLVMBuildCondBr');
  late final _LLVMBuildCondBr = _LLVMBuildCondBrPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef,
          LLVMBasicBlockRef)>();

  LLVMValueRef LLVMBuildSwitch(
    LLVMBuilderRef arg0,
    LLVMValueRef V,
    LLVMBasicBlockRef Else,
    int NumCases,
  ) {
    return _LLVMBuildSwitch(
      arg0,
      V,
      Else,
      NumCases,
    );
  }

  late final _LLVMBuildSwitchPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef,
              ffi.UnsignedInt)>>('LLVMBuildSwitch');
  late final _LLVMBuildSwitch = _LLVMBuildSwitchPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef, int)>();

  LLVMValueRef LLVMBuildIndirectBr(
    LLVMBuilderRef B,
    LLVMValueRef Addr,
    int NumDests,
  ) {
    return _LLVMBuildIndirectBr(
      B,
      Addr,
      NumDests,
    );
  }

  late final _LLVMBuildIndirectBrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.UnsignedInt)>>('LLVMBuildIndirectBr');
  late final _LLVMBuildIndirectBr = _LLVMBuildIndirectBrPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, int)>();

  LLVMValueRef LLVMBuildInvoke2(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    LLVMValueRef Fn,
    ffi.Pointer<LLVMValueRef> Args,
    int NumArgs,
    LLVMBasicBlockRef Then,
    LLVMBasicBlockRef Catch,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildInvoke2(
      arg0,
      Ty,
      Fn,
      Args,
      NumArgs,
      Then,
      Catch,
      Name,
    );
  }

  late final _LLVMBuildInvoke2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMTypeRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt,
              LLVMBasicBlockRef,
              LLVMBasicBlockRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildInvoke2');
  late final _LLVMBuildInvoke2 = _LLVMBuildInvoke2Ptr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef,
          LLVMTypeRef,
          LLVMValueRef,
          ffi.Pointer<LLVMValueRef>,
          int,
          LLVMBasicBlockRef,
          LLVMBasicBlockRef,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildUnreachable(
    LLVMBuilderRef arg0,
  ) {
    return _LLVMBuildUnreachable(
      arg0,
    );
  }

  late final _LLVMBuildUnreachablePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBuilderRef)>>(
          'LLVMBuildUnreachable');
  late final _LLVMBuildUnreachable = _LLVMBuildUnreachablePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef)>();

  LLVMValueRef LLVMBuildResume(
    LLVMBuilderRef B,
    LLVMValueRef Exn,
  ) {
    return _LLVMBuildResume(
      B,
      Exn,
    );
  }

  late final _LLVMBuildResumePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef, LLVMValueRef)>>('LLVMBuildResume');
  late final _LLVMBuildResume = _LLVMBuildResumePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef)>();

  LLVMValueRef LLVMBuildLandingPad(
    LLVMBuilderRef B,
    LLVMTypeRef Ty,
    LLVMValueRef PersFn,
    int NumClauses,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildLandingPad(
      B,
      Ty,
      PersFn,
      NumClauses,
      Name,
    );
  }

  late final _LLVMBuildLandingPadPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('LLVMBuildLandingPad');
  late final _LLVMBuildLandingPad = _LLVMBuildLandingPadPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, int,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildCleanupRet(
    LLVMBuilderRef B,
    LLVMValueRef CatchPad,
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMBuildCleanupRet(
      B,
      CatchPad,
      BB,
    );
  }

  late final _LLVMBuildCleanupRetPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              LLVMBasicBlockRef)>>('LLVMBuildCleanupRet');
  late final _LLVMBuildCleanupRet = _LLVMBuildCleanupRetPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef)>();

  LLVMValueRef LLVMBuildCatchRet(
    LLVMBuilderRef B,
    LLVMValueRef CatchPad,
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMBuildCatchRet(
      B,
      CatchPad,
      BB,
    );
  }

  late final _LLVMBuildCatchRetPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              LLVMBasicBlockRef)>>('LLVMBuildCatchRet');
  late final _LLVMBuildCatchRet = _LLVMBuildCatchRetPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef)>();

  LLVMValueRef LLVMBuildCatchPad(
    LLVMBuilderRef B,
    LLVMValueRef ParentPad,
    ffi.Pointer<LLVMValueRef> Args,
    int NumArgs,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildCatchPad(
      B,
      ParentPad,
      Args,
      NumArgs,
      Name,
    );
  }

  late final _LLVMBuildCatchPadPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildCatchPad');
  late final _LLVMBuildCatchPad = _LLVMBuildCatchPadPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
          ffi.Pointer<LLVMValueRef>, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildCleanupPad(
    LLVMBuilderRef B,
    LLVMValueRef ParentPad,
    ffi.Pointer<LLVMValueRef> Args,
    int NumArgs,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildCleanupPad(
      B,
      ParentPad,
      Args,
      NumArgs,
      Name,
    );
  }

  late final _LLVMBuildCleanupPadPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildCleanupPad');
  late final _LLVMBuildCleanupPad = _LLVMBuildCleanupPadPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
          ffi.Pointer<LLVMValueRef>, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildCatchSwitch(
    LLVMBuilderRef B,
    LLVMValueRef ParentPad,
    LLVMBasicBlockRef UnwindBB,
    int NumHandlers,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildCatchSwitch(
      B,
      ParentPad,
      UnwindBB,
      NumHandlers,
      Name,
    );
  }

  late final _LLVMBuildCatchSwitchPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef,
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('LLVMBuildCatchSwitch');
  late final _LLVMBuildCatchSwitch = _LLVMBuildCatchSwitchPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef,
          int, ffi.Pointer<ffi.Char>)>();

  void LLVMAddCase(
    LLVMValueRef Switch,
    LLVMValueRef OnVal,
    LLVMBasicBlockRef Dest,
  ) {
    return _LLVMAddCase(
      Switch,
      OnVal,
      Dest,
    );
  }

  late final _LLVMAddCasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, LLVMValueRef, LLVMBasicBlockRef)>>('LLVMAddCase');
  late final _LLVMAddCase = _LLVMAddCasePtr.asFunction<
      void Function(LLVMValueRef, LLVMValueRef, LLVMBasicBlockRef)>();

  void LLVMAddDestination(
    LLVMValueRef IndirectBr,
    LLVMBasicBlockRef Dest,
  ) {
    return _LLVMAddDestination(
      IndirectBr,
      Dest,
    );
  }

  late final _LLVMAddDestinationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, LLVMBasicBlockRef)>>('LLVMAddDestination');
  late final _LLVMAddDestination = _LLVMAddDestinationPtr.asFunction<
      void Function(LLVMValueRef, LLVMBasicBlockRef)>();

  int LLVMGetNumClauses(
    LLVMValueRef LandingPad,
  ) {
    return _LLVMGetNumClauses(
      LandingPad,
    );
  }

  late final _LLVMGetNumClausesPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetNumClauses');
  late final _LLVMGetNumClauses =
      _LLVMGetNumClausesPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetClause(
    LLVMValueRef LandingPad,
    int Idx,
  ) {
    return _LLVMGetClause(
      LandingPad,
      Idx,
    );
  }

  late final _LLVMGetClausePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetClause');
  late final _LLVMGetClause =
      _LLVMGetClausePtr.asFunction<LLVMValueRef Function(LLVMValueRef, int)>();

  void LLVMAddClause(
    LLVMValueRef LandingPad,
    LLVMValueRef ClauseVal,
  ) {
    return _LLVMAddClause(
      LandingPad,
      ClauseVal,
    );
  }

  late final _LLVMAddClausePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMAddClause');
  late final _LLVMAddClause =
      _LLVMAddClausePtr.asFunction<void Function(LLVMValueRef, LLVMValueRef)>();

  int LLVMIsCleanup(
    LLVMValueRef LandingPad,
  ) {
    return _LLVMIsCleanup(
      LandingPad,
    );
  }

  late final _LLVMIsCleanupPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsCleanup');
  late final _LLVMIsCleanup =
      _LLVMIsCleanupPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetCleanup(
    LLVMValueRef LandingPad,
    int Val,
  ) {
    return _LLVMSetCleanup(
      LandingPad,
      Val,
    );
  }

  late final _LLVMSetCleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetCleanup');
  late final _LLVMSetCleanup =
      _LLVMSetCleanupPtr.asFunction<void Function(LLVMValueRef, int)>();

  void LLVMAddHandler(
    LLVMValueRef CatchSwitch,
    LLVMBasicBlockRef Dest,
  ) {
    return _LLVMAddHandler(
      CatchSwitch,
      Dest,
    );
  }

  late final _LLVMAddHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, LLVMBasicBlockRef)>>('LLVMAddHandler');
  late final _LLVMAddHandler = _LLVMAddHandlerPtr.asFunction<
      void Function(LLVMValueRef, LLVMBasicBlockRef)>();

  int LLVMGetNumHandlers(
    LLVMValueRef CatchSwitch,
  ) {
    return _LLVMGetNumHandlers(
      CatchSwitch,
    );
  }

  late final _LLVMGetNumHandlersPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetNumHandlers');
  late final _LLVMGetNumHandlers =
      _LLVMGetNumHandlersPtr.asFunction<int Function(LLVMValueRef)>();

  /// Obtain the basic blocks acting as handlers for a catchswitch instruction.
  ///
  /// The Handlers parameter should point to a pre-allocated array of
  /// LLVMBasicBlockRefs at least LLVMGetNumHandlers() large. On return, the
  /// first LLVMGetNumHandlers() entries in the array will be populated
  /// with LLVMBasicBlockRef instances.
  ///
  /// @param CatchSwitch The catchswitch instruction to operate on.
  /// @param Handlers Memory address of an array to be filled with basic blocks.
  void LLVMGetHandlers(
    LLVMValueRef CatchSwitch,
    ffi.Pointer<LLVMBasicBlockRef> Handlers,
  ) {
    return _LLVMGetHandlers(
      CatchSwitch,
      Handlers,
    );
  }

  late final _LLVMGetHandlersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef,
              ffi.Pointer<LLVMBasicBlockRef>)>>('LLVMGetHandlers');
  late final _LLVMGetHandlers = _LLVMGetHandlersPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<LLVMBasicBlockRef>)>();

  LLVMValueRef LLVMGetArgOperand(
    LLVMValueRef Funclet,
    int i,
  ) {
    return _LLVMGetArgOperand(
      Funclet,
      i,
    );
  }

  late final _LLVMGetArgOperandPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetArgOperand');
  late final _LLVMGetArgOperand = _LLVMGetArgOperandPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, int)>();

  void LLVMSetArgOperand(
    LLVMValueRef Funclet,
    int i,
    LLVMValueRef value,
  ) {
    return _LLVMSetArgOperand(
      Funclet,
      i,
      value,
    );
  }

  late final _LLVMSetArgOperandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.UnsignedInt,
              LLVMValueRef)>>('LLVMSetArgOperand');
  late final _LLVMSetArgOperand = _LLVMSetArgOperandPtr.asFunction<
      void Function(LLVMValueRef, int, LLVMValueRef)>();

  /// Get the parent catchswitch instruction of a catchpad instruction.
  ///
  /// This only works on llvm::CatchPadInst instructions.
  ///
  /// @see llvm::CatchPadInst::getCatchSwitch()
  LLVMValueRef LLVMGetParentCatchSwitch(
    LLVMValueRef CatchPad,
  ) {
    return _LLVMGetParentCatchSwitch(
      CatchPad,
    );
  }

  late final _LLVMGetParentCatchSwitchPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetParentCatchSwitch');
  late final _LLVMGetParentCatchSwitch = _LLVMGetParentCatchSwitchPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  /// Set the parent catchswitch instruction of a catchpad instruction.
  ///
  /// This only works on llvm::CatchPadInst instructions.
  ///
  /// @see llvm::CatchPadInst::setCatchSwitch()
  void LLVMSetParentCatchSwitch(
    LLVMValueRef CatchPad,
    LLVMValueRef CatchSwitch,
  ) {
    return _LLVMSetParentCatchSwitch(
      CatchPad,
      CatchSwitch,
    );
  }

  late final _LLVMSetParentCatchSwitchPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMSetParentCatchSwitch');
  late final _LLVMSetParentCatchSwitch = _LLVMSetParentCatchSwitchPtr
      .asFunction<void Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMBuildAdd(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildAdd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildAdd');
  late final _LLVMBuildAdd = _LLVMBuildAddPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNSWAdd(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNSWAdd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildNSWAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNSWAdd');
  late final _LLVMBuildNSWAdd = _LLVMBuildNSWAddPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNUWAdd(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNUWAdd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildNUWAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNUWAdd');
  late final _LLVMBuildNUWAdd = _LLVMBuildNUWAddPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFAdd(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFAdd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildFAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFAdd');
  late final _LLVMBuildFAdd = _LLVMBuildFAddPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSub(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSub(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildSub');
  late final _LLVMBuildSub = _LLVMBuildSubPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNSWSub(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNSWSub(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildNSWSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNSWSub');
  late final _LLVMBuildNSWSub = _LLVMBuildNSWSubPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNUWSub(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNUWSub(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildNUWSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNUWSub');
  late final _LLVMBuildNUWSub = _LLVMBuildNUWSubPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFSub(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFSub(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildFSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFSub');
  late final _LLVMBuildFSub = _LLVMBuildFSubPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildMul(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildMul(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildMul');
  late final _LLVMBuildMul = _LLVMBuildMulPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNSWMul(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNSWMul(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildNSWMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNSWMul');
  late final _LLVMBuildNSWMul = _LLVMBuildNSWMulPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNUWMul(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNUWMul(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildNUWMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNUWMul');
  late final _LLVMBuildNUWMul = _LLVMBuildNUWMulPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFMul(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFMul(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildFMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFMul');
  late final _LLVMBuildFMul = _LLVMBuildFMulPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildUDiv(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildUDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildUDivPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildUDiv');
  late final _LLVMBuildUDiv = _LLVMBuildUDivPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildExactUDiv(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildExactUDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildExactUDivPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildExactUDiv');
  late final _LLVMBuildExactUDiv = _LLVMBuildExactUDivPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSDiv(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildSDivPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildSDiv');
  late final _LLVMBuildSDiv = _LLVMBuildSDivPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildExactSDiv(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildExactSDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildExactSDivPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildExactSDiv');
  late final _LLVMBuildExactSDiv = _LLVMBuildExactSDivPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFDiv(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildFDivPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFDiv');
  late final _LLVMBuildFDiv = _LLVMBuildFDivPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildURem(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildURem(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildURemPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildURem');
  late final _LLVMBuildURem = _LLVMBuildURemPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSRem(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSRem(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildSRemPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildSRem');
  late final _LLVMBuildSRem = _LLVMBuildSRemPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFRem(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFRem(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildFRemPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFRem');
  late final _LLVMBuildFRem = _LLVMBuildFRemPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildShl(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildShl(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildShlPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildShl');
  late final _LLVMBuildShl = _LLVMBuildShlPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildLShr(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildLShr(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildLShrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildLShr');
  late final _LLVMBuildLShr = _LLVMBuildLShrPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildAShr(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildAShr(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildAShrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildAShr');
  late final _LLVMBuildAShr = _LLVMBuildAShrPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildAnd(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildAnd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildAndPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildAnd');
  late final _LLVMBuildAnd = _LLVMBuildAndPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildOr(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildOr(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildOrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildOr');
  late final _LLVMBuildOr = _LLVMBuildOrPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildXor(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildXor(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildXorPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildXor');
  late final _LLVMBuildXor = _LLVMBuildXorPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildBinOp(
    LLVMBuilderRef B,
    int Op,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildBinOp(
      B,
      Op,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildBinOpPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Int32, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildBinOp');
  late final _LLVMBuildBinOp = _LLVMBuildBinOpPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, int, LLVMValueRef, LLVMValueRef,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNeg(
    LLVMBuilderRef arg0,
    LLVMValueRef V,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNeg(
      arg0,
      V,
      Name,
    );
  }

  late final _LLVMBuildNegPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNeg');
  late final _LLVMBuildNeg = _LLVMBuildNegPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNSWNeg(
    LLVMBuilderRef B,
    LLVMValueRef V,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNSWNeg(
      B,
      V,
      Name,
    );
  }

  late final _LLVMBuildNSWNegPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNSWNeg');
  late final _LLVMBuildNSWNeg = _LLVMBuildNSWNegPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNUWNeg(
    LLVMBuilderRef B,
    LLVMValueRef V,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNUWNeg(
      B,
      V,
      Name,
    );
  }

  late final _LLVMBuildNUWNegPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNUWNeg');
  late final _LLVMBuildNUWNeg = _LLVMBuildNUWNegPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFNeg(
    LLVMBuilderRef arg0,
    LLVMValueRef V,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFNeg(
      arg0,
      V,
      Name,
    );
  }

  late final _LLVMBuildFNegPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFNeg');
  late final _LLVMBuildFNeg = _LLVMBuildFNegPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNot(
    LLVMBuilderRef arg0,
    LLVMValueRef V,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNot(
      arg0,
      V,
      Name,
    );
  }

  late final _LLVMBuildNotPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNot');
  late final _LLVMBuildNot = _LLVMBuildNotPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildMalloc(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildMalloc(
      arg0,
      Ty,
      Name,
    );
  }

  late final _LLVMBuildMallocPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildMalloc');
  late final _LLVMBuildMalloc = _LLVMBuildMallocPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildArrayMalloc(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildArrayMalloc(
      arg0,
      Ty,
      Val,
      Name,
    );
  }

  late final _LLVMBuildArrayMallocPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildArrayMalloc');
  late final _LLVMBuildArrayMalloc = _LLVMBuildArrayMallocPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  /// Creates and inserts a memset to the specified pointer and the
  /// specified value.
  ///
  /// @see llvm::IRRBuilder::CreateMemSet()
  LLVMValueRef LLVMBuildMemSet(
    LLVMBuilderRef B,
    LLVMValueRef Ptr,
    LLVMValueRef Val,
    LLVMValueRef Len,
    int Align,
  ) {
    return _LLVMBuildMemSet(
      B,
      Ptr,
      Val,
      Len,
      Align,
    );
  }

  late final _LLVMBuildMemSetPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMBuildMemSet');
  late final _LLVMBuildMemSet = _LLVMBuildMemSetPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, LLVMValueRef, int)>();

  /// Creates and inserts a memcpy between the specified pointers.
  ///
  /// @see llvm::IRRBuilder::CreateMemCpy()
  LLVMValueRef LLVMBuildMemCpy(
    LLVMBuilderRef B,
    LLVMValueRef Dst,
    int DstAlign,
    LLVMValueRef Src,
    int SrcAlign,
    LLVMValueRef Size,
  ) {
    return _LLVMBuildMemCpy(
      B,
      Dst,
      DstAlign,
      Src,
      SrcAlign,
      Size,
    );
  }

  late final _LLVMBuildMemCpyPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, ffi.UnsignedInt,
              LLVMValueRef, ffi.UnsignedInt, LLVMValueRef)>>('LLVMBuildMemCpy');
  late final _LLVMBuildMemCpy = _LLVMBuildMemCpyPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, int, LLVMValueRef,
          int, LLVMValueRef)>();

  /// Creates and inserts a memmove between the specified pointers.
  ///
  /// @see llvm::IRRBuilder::CreateMemMove()
  LLVMValueRef LLVMBuildMemMove(
    LLVMBuilderRef B,
    LLVMValueRef Dst,
    int DstAlign,
    LLVMValueRef Src,
    int SrcAlign,
    LLVMValueRef Size,
  ) {
    return _LLVMBuildMemMove(
      B,
      Dst,
      DstAlign,
      Src,
      SrcAlign,
      Size,
    );
  }

  late final _LLVMBuildMemMovePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMValueRef,
              ffi.UnsignedInt,
              LLVMValueRef,
              ffi.UnsignedInt,
              LLVMValueRef)>>('LLVMBuildMemMove');
  late final _LLVMBuildMemMove = _LLVMBuildMemMovePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, int, LLVMValueRef,
          int, LLVMValueRef)>();

  LLVMValueRef LLVMBuildAlloca(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildAlloca(
      arg0,
      Ty,
      Name,
    );
  }

  late final _LLVMBuildAllocaPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildAlloca');
  late final _LLVMBuildAlloca = _LLVMBuildAllocaPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildArrayAlloca(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildArrayAlloca(
      arg0,
      Ty,
      Val,
      Name,
    );
  }

  late final _LLVMBuildArrayAllocaPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildArrayAlloca');
  late final _LLVMBuildArrayAlloca = _LLVMBuildArrayAllocaPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFree(
    LLVMBuilderRef arg0,
    LLVMValueRef PointerVal,
  ) {
    return _LLVMBuildFree(
      arg0,
      PointerVal,
    );
  }

  late final _LLVMBuildFreePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef, LLVMValueRef)>>('LLVMBuildFree');
  late final _LLVMBuildFree = _LLVMBuildFreePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef)>();

  LLVMValueRef LLVMBuildLoad2(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    LLVMValueRef PointerVal,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildLoad2(
      arg0,
      Ty,
      PointerVal,
      Name,
    );
  }

  late final _LLVMBuildLoad2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildLoad2');
  late final _LLVMBuildLoad2 = _LLVMBuildLoad2Ptr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildStore(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMValueRef Ptr,
  ) {
    return _LLVMBuildStore(
      arg0,
      Val,
      Ptr,
    );
  }

  late final _LLVMBuildStorePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef, LLVMValueRef, LLVMValueRef)>>('LLVMBuildStore');
  late final _LLVMBuildStore = _LLVMBuildStorePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMBuildGEP2(
    LLVMBuilderRef B,
    LLVMTypeRef Ty,
    LLVMValueRef Pointer,
    ffi.Pointer<LLVMValueRef> Indices,
    int NumIndices,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildGEP2(
      B,
      Ty,
      Pointer,
      Indices,
      NumIndices,
      Name,
    );
  }

  late final _LLVMBuildGEP2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMTypeRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildGEP2');
  late final _LLVMBuildGEP2 = _LLVMBuildGEP2Ptr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
          ffi.Pointer<LLVMValueRef>, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildInBoundsGEP2(
    LLVMBuilderRef B,
    LLVMTypeRef Ty,
    LLVMValueRef Pointer,
    ffi.Pointer<LLVMValueRef> Indices,
    int NumIndices,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildInBoundsGEP2(
      B,
      Ty,
      Pointer,
      Indices,
      NumIndices,
      Name,
    );
  }

  late final _LLVMBuildInBoundsGEP2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMTypeRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildInBoundsGEP2');
  late final _LLVMBuildInBoundsGEP2 = _LLVMBuildInBoundsGEP2Ptr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
          ffi.Pointer<LLVMValueRef>, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildStructGEP2(
    LLVMBuilderRef B,
    LLVMTypeRef Ty,
    LLVMValueRef Pointer,
    int Idx,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildStructGEP2(
      B,
      Ty,
      Pointer,
      Idx,
      Name,
    );
  }

  late final _LLVMBuildStructGEP2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('LLVMBuildStructGEP2');
  late final _LLVMBuildStructGEP2 = _LLVMBuildStructGEP2Ptr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, int,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildGlobalString(
    LLVMBuilderRef B,
    ffi.Pointer<ffi.Char> Str,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildGlobalString(
      B,
      Str,
      Name,
    );
  }

  late final _LLVMBuildGlobalStringPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildGlobalString');
  late final _LLVMBuildGlobalString = _LLVMBuildGlobalStringPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildGlobalStringPtr(
    LLVMBuilderRef B,
    ffi.Pointer<ffi.Char> Str,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildGlobalStringPtr1(
      B,
      Str,
      Name,
    );
  }

  late final _LLVMBuildGlobalStringPtrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildGlobalStringPtr');
  late final _LLVMBuildGlobalStringPtr1 =
      _LLVMBuildGlobalStringPtrPtr.asFunction<
          LLVMValueRef Function(
              LLVMBuilderRef, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int LLVMGetVolatile(
    LLVMValueRef MemoryAccessInst,
  ) {
    return _LLVMGetVolatile(
      MemoryAccessInst,
    );
  }

  late final _LLVMGetVolatilePtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMGetVolatile');
  late final _LLVMGetVolatile =
      _LLVMGetVolatilePtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetVolatile(
    LLVMValueRef MemoryAccessInst,
    int IsVolatile,
  ) {
    return _LLVMSetVolatile(
      MemoryAccessInst,
      IsVolatile,
    );
  }

  late final _LLVMSetVolatilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetVolatile');
  late final _LLVMSetVolatile =
      _LLVMSetVolatilePtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetWeak(
    LLVMValueRef CmpXchgInst,
  ) {
    return _LLVMGetWeak(
      CmpXchgInst,
    );
  }

  late final _LLVMGetWeakPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMGetWeak');
  late final _LLVMGetWeak =
      _LLVMGetWeakPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetWeak(
    LLVMValueRef CmpXchgInst,
    int IsWeak,
  ) {
    return _LLVMSetWeak(
      CmpXchgInst,
      IsWeak,
    );
  }

  late final _LLVMSetWeakPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetWeak');
  late final _LLVMSetWeak =
      _LLVMSetWeakPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetOrdering(
    LLVMValueRef MemoryAccessInst,
  ) {
    return _LLVMGetOrdering(
      MemoryAccessInst,
    );
  }

  late final _LLVMGetOrderingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetOrdering');
  late final _LLVMGetOrdering =
      _LLVMGetOrderingPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetOrdering(
    LLVMValueRef MemoryAccessInst,
    int Ordering,
  ) {
    return _LLVMSetOrdering(
      MemoryAccessInst,
      Ordering,
    );
  }

  late final _LLVMSetOrderingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetOrdering');
  late final _LLVMSetOrdering =
      _LLVMSetOrderingPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetAtomicRMWBinOp(
    LLVMValueRef AtomicRMWInst,
  ) {
    return _LLVMGetAtomicRMWBinOp(
      AtomicRMWInst,
    );
  }

  late final _LLVMGetAtomicRMWBinOpPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetAtomicRMWBinOp');
  late final _LLVMGetAtomicRMWBinOp =
      _LLVMGetAtomicRMWBinOpPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetAtomicRMWBinOp(
    LLVMValueRef AtomicRMWInst,
    int BinOp,
  ) {
    return _LLVMSetAtomicRMWBinOp(
      AtomicRMWInst,
      BinOp,
    );
  }

  late final _LLVMSetAtomicRMWBinOpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetAtomicRMWBinOp');
  late final _LLVMSetAtomicRMWBinOp =
      _LLVMSetAtomicRMWBinOpPtr.asFunction<void Function(LLVMValueRef, int)>();

  LLVMValueRef LLVMBuildTrunc(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildTrunc(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildTruncPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildTrunc');
  late final _LLVMBuildTrunc = _LLVMBuildTruncPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildZExt(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildZExt(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildZExtPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildZExt');
  late final _LLVMBuildZExt = _LLVMBuildZExtPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSExt(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSExt(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildSExtPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildSExt');
  late final _LLVMBuildSExt = _LLVMBuildSExtPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFPToUI(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFPToUI(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildFPToUIPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFPToUI');
  late final _LLVMBuildFPToUI = _LLVMBuildFPToUIPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFPToSI(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFPToSI(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildFPToSIPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFPToSI');
  late final _LLVMBuildFPToSI = _LLVMBuildFPToSIPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildUIToFP(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildUIToFP(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildUIToFPPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildUIToFP');
  late final _LLVMBuildUIToFP = _LLVMBuildUIToFPPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSIToFP(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSIToFP(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildSIToFPPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildSIToFP');
  late final _LLVMBuildSIToFP = _LLVMBuildSIToFPPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFPTrunc(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFPTrunc(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildFPTruncPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFPTrunc');
  late final _LLVMBuildFPTrunc = _LLVMBuildFPTruncPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFPExt(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFPExt(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildFPExtPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFPExt');
  late final _LLVMBuildFPExt = _LLVMBuildFPExtPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildPtrToInt(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildPtrToInt(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildPtrToIntPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildPtrToInt');
  late final _LLVMBuildPtrToInt = _LLVMBuildPtrToIntPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildIntToPtr(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildIntToPtr(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildIntToPtrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildIntToPtr');
  late final _LLVMBuildIntToPtr = _LLVMBuildIntToPtrPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildBitCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildBitCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildBitCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildBitCast');
  late final _LLVMBuildBitCast = _LLVMBuildBitCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildAddrSpaceCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildAddrSpaceCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildAddrSpaceCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildAddrSpaceCast');
  late final _LLVMBuildAddrSpaceCast = _LLVMBuildAddrSpaceCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildZExtOrBitCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildZExtOrBitCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildZExtOrBitCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildZExtOrBitCast');
  late final _LLVMBuildZExtOrBitCast = _LLVMBuildZExtOrBitCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSExtOrBitCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSExtOrBitCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildSExtOrBitCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildSExtOrBitCast');
  late final _LLVMBuildSExtOrBitCast = _LLVMBuildSExtOrBitCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildTruncOrBitCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildTruncOrBitCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildTruncOrBitCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildTruncOrBitCast');
  late final _LLVMBuildTruncOrBitCast = _LLVMBuildTruncOrBitCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildCast(
    LLVMBuilderRef B,
    int Op,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildCast(
      B,
      Op,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Int32, LLVMValueRef,
              LLVMTypeRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildCast');
  late final _LLVMBuildCast = _LLVMBuildCastPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, int, LLVMValueRef, LLVMTypeRef,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildPointerCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildPointerCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildPointerCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildPointerCast');
  late final _LLVMBuildPointerCast = _LLVMBuildPointerCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildIntCast2(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    int IsSigned,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildIntCast2(
      arg0,
      Val,
      DestTy,
      IsSigned,
      Name,
    );
  }

  late final _LLVMBuildIntCast2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              LLVMBool, ffi.Pointer<ffi.Char>)>>('LLVMBuildIntCast2');
  late final _LLVMBuildIntCast2 = _LLVMBuildIntCast2Ptr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, int,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFPCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFPCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildFPCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFPCast');
  late final _LLVMBuildFPCast = _LLVMBuildFPCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  /// Deprecated: This cast is always signed. Use LLVMBuildIntCast2 instead.
  LLVMValueRef LLVMBuildIntCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildIntCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildIntCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildIntCast');
  late final _LLVMBuildIntCast = _LLVMBuildIntCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  int LLVMGetCastOpcode(
    LLVMValueRef Src,
    int SrcIsSigned,
    LLVMTypeRef DestTy,
    int DestIsSigned,
  ) {
    return _LLVMGetCastOpcode(
      Src,
      SrcIsSigned,
      DestTy,
      DestIsSigned,
    );
  }

  late final _LLVMGetCastOpcodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(LLVMValueRef, LLVMBool, LLVMTypeRef,
              LLVMBool)>>('LLVMGetCastOpcode');
  late final _LLVMGetCastOpcode = _LLVMGetCastOpcodePtr.asFunction<
      int Function(LLVMValueRef, int, LLVMTypeRef, int)>();

  LLVMValueRef LLVMBuildICmp(
    LLVMBuilderRef arg0,
    int Op,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildICmp(
      arg0,
      Op,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildICmpPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Int32, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildICmp');
  late final _LLVMBuildICmp = _LLVMBuildICmpPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, int, LLVMValueRef, LLVMValueRef,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFCmp(
    LLVMBuilderRef arg0,
    int Op,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFCmp(
      arg0,
      Op,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildFCmpPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Int32, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildFCmp');
  late final _LLVMBuildFCmp = _LLVMBuildFCmpPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, int, LLVMValueRef, LLVMValueRef,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildPhi(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildPhi(
      arg0,
      Ty,
      Name,
    );
  }

  late final _LLVMBuildPhiPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildPhi');
  late final _LLVMBuildPhi = _LLVMBuildPhiPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildCall2(
    LLVMBuilderRef arg0,
    LLVMTypeRef arg1,
    LLVMValueRef Fn,
    ffi.Pointer<LLVMValueRef> Args,
    int NumArgs,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildCall2(
      arg0,
      arg1,
      Fn,
      Args,
      NumArgs,
      Name,
    );
  }

  late final _LLVMBuildCall2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMTypeRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildCall2');
  late final _LLVMBuildCall2 = _LLVMBuildCall2Ptr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
          ffi.Pointer<LLVMValueRef>, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSelect(
    LLVMBuilderRef arg0,
    LLVMValueRef If,
    LLVMValueRef Then,
    LLVMValueRef Else,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSelect(
      arg0,
      If,
      Then,
      Else,
      Name,
    );
  }

  late final _LLVMBuildSelectPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildSelect');
  late final _LLVMBuildSelect = _LLVMBuildSelectPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
          LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildVAArg(
    LLVMBuilderRef arg0,
    LLVMValueRef List,
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildVAArg(
      arg0,
      List,
      Ty,
      Name,
    );
  }

  late final _LLVMBuildVAArgPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildVAArg');
  late final _LLVMBuildVAArg = _LLVMBuildVAArgPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildExtractElement(
    LLVMBuilderRef arg0,
    LLVMValueRef VecVal,
    LLVMValueRef Index,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildExtractElement(
      arg0,
      VecVal,
      Index,
      Name,
    );
  }

  late final _LLVMBuildExtractElementPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildExtractElement');
  late final _LLVMBuildExtractElement = _LLVMBuildExtractElementPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildInsertElement(
    LLVMBuilderRef arg0,
    LLVMValueRef VecVal,
    LLVMValueRef EltVal,
    LLVMValueRef Index,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildInsertElement(
      arg0,
      VecVal,
      EltVal,
      Index,
      Name,
    );
  }

  late final _LLVMBuildInsertElementPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildInsertElement');
  late final _LLVMBuildInsertElement = _LLVMBuildInsertElementPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
          LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildShuffleVector(
    LLVMBuilderRef arg0,
    LLVMValueRef V1,
    LLVMValueRef V2,
    LLVMValueRef Mask,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildShuffleVector(
      arg0,
      V1,
      V2,
      Mask,
      Name,
    );
  }

  late final _LLVMBuildShuffleVectorPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildShuffleVector');
  late final _LLVMBuildShuffleVector = _LLVMBuildShuffleVectorPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
          LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildExtractValue(
    LLVMBuilderRef arg0,
    LLVMValueRef AggVal,
    int Index,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildExtractValue(
      arg0,
      AggVal,
      Index,
      Name,
    );
  }

  late final _LLVMBuildExtractValuePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildExtractValue');
  late final _LLVMBuildExtractValue = _LLVMBuildExtractValuePtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildInsertValue(
    LLVMBuilderRef arg0,
    LLVMValueRef AggVal,
    LLVMValueRef EltVal,
    int Index,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildInsertValue(
      arg0,
      AggVal,
      EltVal,
      Index,
      Name,
    );
  }

  late final _LLVMBuildInsertValuePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('LLVMBuildInsertValue');
  late final _LLVMBuildInsertValue = _LLVMBuildInsertValuePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef, int,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFreeze(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFreeze(
      arg0,
      Val,
      Name,
    );
  }

  late final _LLVMBuildFreezePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFreeze');
  late final _LLVMBuildFreeze = _LLVMBuildFreezePtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildIsNull(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildIsNull(
      arg0,
      Val,
      Name,
    );
  }

  late final _LLVMBuildIsNullPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildIsNull');
  late final _LLVMBuildIsNull = _LLVMBuildIsNullPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildIsNotNull(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildIsNotNull(
      arg0,
      Val,
      Name,
    );
  }

  late final _LLVMBuildIsNotNullPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildIsNotNull');
  late final _LLVMBuildIsNotNull = _LLVMBuildIsNotNullPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildPtrDiff2(
    LLVMBuilderRef arg0,
    LLVMTypeRef ElemTy,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildPtrDiff2(
      arg0,
      ElemTy,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildPtrDiff2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildPtrDiff2');
  late final _LLVMBuildPtrDiff2 = _LLVMBuildPtrDiff2Ptr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
          LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFence(
    LLVMBuilderRef B,
    int ordering,
    int singleThread,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFence(
      B,
      ordering,
      singleThread,
      Name,
    );
  }

  late final _LLVMBuildFencePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Int32, LLVMBool,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFence');
  late final _LLVMBuildFence = _LLVMBuildFencePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, int, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildAtomicRMW(
    LLVMBuilderRef B,
    int op,
    LLVMValueRef PTR,
    LLVMValueRef Val,
    int ordering,
    int singleThread,
  ) {
    return _LLVMBuildAtomicRMW(
      B,
      op,
      PTR,
      Val,
      ordering,
      singleThread,
    );
  }

  late final _LLVMBuildAtomicRMWPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Int32, LLVMValueRef,
              LLVMValueRef, ffi.Int32, LLVMBool)>>('LLVMBuildAtomicRMW');
  late final _LLVMBuildAtomicRMW = _LLVMBuildAtomicRMWPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, int, LLVMValueRef, LLVMValueRef, int, int)>();

  LLVMValueRef LLVMBuildAtomicCmpXchg(
    LLVMBuilderRef B,
    LLVMValueRef Ptr,
    LLVMValueRef Cmp,
    LLVMValueRef New,
    int SuccessOrdering,
    int FailureOrdering,
    int SingleThread,
  ) {
    return _LLVMBuildAtomicCmpXchg(
      B,
      Ptr,
      Cmp,
      New,
      SuccessOrdering,
      FailureOrdering,
      SingleThread,
    );
  }

  late final _LLVMBuildAtomicCmpXchgPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMValueRef,
              LLVMValueRef,
              LLVMValueRef,
              ffi.Int32,
              ffi.Int32,
              LLVMBool)>>('LLVMBuildAtomicCmpXchg');
  late final _LLVMBuildAtomicCmpXchg = _LLVMBuildAtomicCmpXchgPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
          LLVMValueRef, int, int, int)>();

  /// Get the number of elements in the mask of a ShuffleVector instruction.
  int LLVMGetNumMaskElements(
    LLVMValueRef ShuffleVectorInst,
  ) {
    return _LLVMGetNumMaskElements(
      ShuffleVectorInst,
    );
  }

  late final _LLVMGetNumMaskElementsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetNumMaskElements');
  late final _LLVMGetNumMaskElements =
      _LLVMGetNumMaskElementsPtr.asFunction<int Function(LLVMValueRef)>();

  /// \returns a constant that specifies that the result of a \c ShuffleVectorInst
  /// is undefined.
  int LLVMGetUndefMaskElem() {
    return _LLVMGetUndefMaskElem();
  }

  late final _LLVMGetUndefMaskElemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('LLVMGetUndefMaskElem');
  late final _LLVMGetUndefMaskElem =
      _LLVMGetUndefMaskElemPtr.asFunction<int Function()>();

  /// Get the mask value at position Elt in the mask of a ShuffleVector
  /// instruction.
  ///
  /// \Returns the result of \c LLVMGetUndefMaskElem() if the mask value is undef
  /// at that position.
  int LLVMGetMaskValue(
    LLVMValueRef ShuffleVectorInst,
    int Elt,
  ) {
    return _LLVMGetMaskValue(
      ShuffleVectorInst,
      Elt,
    );
  }

  late final _LLVMGetMaskValuePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(LLVMValueRef, ffi.UnsignedInt)>>(
      'LLVMGetMaskValue');
  late final _LLVMGetMaskValue =
      _LLVMGetMaskValuePtr.asFunction<int Function(LLVMValueRef, int)>();

  int LLVMIsAtomicSingleThread(
    LLVMValueRef AtomicInst,
  ) {
    return _LLVMIsAtomicSingleThread(
      AtomicInst,
    );
  }

  late final _LLVMIsAtomicSingleThreadPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsAtomicSingleThread');
  late final _LLVMIsAtomicSingleThread =
      _LLVMIsAtomicSingleThreadPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetAtomicSingleThread(
    LLVMValueRef AtomicInst,
    int SingleThread,
  ) {
    return _LLVMSetAtomicSingleThread(
      AtomicInst,
      SingleThread,
    );
  }

  late final _LLVMSetAtomicSingleThreadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetAtomicSingleThread');
  late final _LLVMSetAtomicSingleThread = _LLVMSetAtomicSingleThreadPtr
      .asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetCmpXchgSuccessOrdering(
    LLVMValueRef CmpXchgInst,
  ) {
    return _LLVMGetCmpXchgSuccessOrdering(
      CmpXchgInst,
    );
  }

  late final _LLVMGetCmpXchgSuccessOrderingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetCmpXchgSuccessOrdering');
  late final _LLVMGetCmpXchgSuccessOrdering = _LLVMGetCmpXchgSuccessOrderingPtr
      .asFunction<int Function(LLVMValueRef)>();

  void LLVMSetCmpXchgSuccessOrdering(
    LLVMValueRef CmpXchgInst,
    int Ordering,
  ) {
    return _LLVMSetCmpXchgSuccessOrdering(
      CmpXchgInst,
      Ordering,
    );
  }

  late final _LLVMSetCmpXchgSuccessOrderingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetCmpXchgSuccessOrdering');
  late final _LLVMSetCmpXchgSuccessOrdering = _LLVMSetCmpXchgSuccessOrderingPtr
      .asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetCmpXchgFailureOrdering(
    LLVMValueRef CmpXchgInst,
  ) {
    return _LLVMGetCmpXchgFailureOrdering(
      CmpXchgInst,
    );
  }

  late final _LLVMGetCmpXchgFailureOrderingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetCmpXchgFailureOrdering');
  late final _LLVMGetCmpXchgFailureOrdering = _LLVMGetCmpXchgFailureOrderingPtr
      .asFunction<int Function(LLVMValueRef)>();

  void LLVMSetCmpXchgFailureOrdering(
    LLVMValueRef CmpXchgInst,
    int Ordering,
  ) {
    return _LLVMSetCmpXchgFailureOrdering(
      CmpXchgInst,
      Ordering,
    );
  }

  late final _LLVMSetCmpXchgFailureOrderingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetCmpXchgFailureOrdering');
  late final _LLVMSetCmpXchgFailureOrdering = _LLVMSetCmpXchgFailureOrderingPtr
      .asFunction<void Function(LLVMValueRef, int)>();

  /// Changes the type of M so it can be passed to FunctionPassManagers and the
  /// JIT.  They take ModuleProviders for historical reasons.
  LLVMModuleProviderRef LLVMCreateModuleProviderForExistingModule(
    LLVMModuleRef M,
  ) {
    return _LLVMCreateModuleProviderForExistingModule(
      M,
    );
  }

  late final _LLVMCreateModuleProviderForExistingModulePtr = _lookup<
          ffi.NativeFunction<LLVMModuleProviderRef Function(LLVMModuleRef)>>(
      'LLVMCreateModuleProviderForExistingModule');
  late final _LLVMCreateModuleProviderForExistingModule =
      _LLVMCreateModuleProviderForExistingModulePtr.asFunction<
          LLVMModuleProviderRef Function(LLVMModuleRef)>();

  /// Destroys the module M.
  void LLVMDisposeModuleProvider(
    LLVMModuleProviderRef M,
  ) {
    return _LLVMDisposeModuleProvider(
      M,
    );
  }

  late final _LLVMDisposeModuleProviderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMModuleProviderRef)>>(
          'LLVMDisposeModuleProvider');
  late final _LLVMDisposeModuleProvider = _LLVMDisposeModuleProviderPtr
      .asFunction<void Function(LLVMModuleProviderRef)>();

  /// @defgroup LLVMCCoreMemoryBuffers Memory Buffers
  ///
  /// @{
  int LLVMCreateMemoryBufferWithContentsOfFile(
    ffi.Pointer<ffi.Char> Path,
    ffi.Pointer<LLVMMemoryBufferRef> OutMemBuf,
    ffi.Pointer<ffi.Pointer<ffi.Char>> OutMessage,
  ) {
    return _LLVMCreateMemoryBufferWithContentsOfFile(
      Path,
      OutMemBuf,
      OutMessage,
    );
  }

  late final _LLVMCreateMemoryBufferWithContentsOfFilePtr = _lookup<
          ffi.NativeFunction<
              LLVMBool Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<LLVMMemoryBufferRef>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'LLVMCreateMemoryBufferWithContentsOfFile');
  late final _LLVMCreateMemoryBufferWithContentsOfFile =
      _LLVMCreateMemoryBufferWithContentsOfFilePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<LLVMMemoryBufferRef>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int LLVMCreateMemoryBufferWithSTDIN(
    ffi.Pointer<LLVMMemoryBufferRef> OutMemBuf,
    ffi.Pointer<ffi.Pointer<ffi.Char>> OutMessage,
  ) {
    return _LLVMCreateMemoryBufferWithSTDIN(
      OutMemBuf,
      OutMessage,
    );
  }

  late final _LLVMCreateMemoryBufferWithSTDINPtr = _lookup<
          ffi.NativeFunction<
              LLVMBool Function(ffi.Pointer<LLVMMemoryBufferRef>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'LLVMCreateMemoryBufferWithSTDIN');
  late final _LLVMCreateMemoryBufferWithSTDIN =
      _LLVMCreateMemoryBufferWithSTDINPtr.asFunction<
          int Function(ffi.Pointer<LLVMMemoryBufferRef>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRange(
    ffi.Pointer<ffi.Char> InputData,
    int InputDataLength,
    ffi.Pointer<ffi.Char> BufferName,
    int RequiresNullTerminator,
  ) {
    return _LLVMCreateMemoryBufferWithMemoryRange(
      InputData,
      InputDataLength,
      BufferName,
      RequiresNullTerminator,
    );
  }

  late final _LLVMCreateMemoryBufferWithMemoryRangePtr = _lookup<
      ffi.NativeFunction<
          LLVMMemoryBufferRef Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              LLVMBool)>>('LLVMCreateMemoryBufferWithMemoryRange');
  late final _LLVMCreateMemoryBufferWithMemoryRange =
      _LLVMCreateMemoryBufferWithMemoryRangePtr.asFunction<
          LLVMMemoryBufferRef Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRangeCopy(
    ffi.Pointer<ffi.Char> InputData,
    int InputDataLength,
    ffi.Pointer<ffi.Char> BufferName,
  ) {
    return _LLVMCreateMemoryBufferWithMemoryRangeCopy(
      InputData,
      InputDataLength,
      BufferName,
    );
  }

  late final _LLVMCreateMemoryBufferWithMemoryRangeCopyPtr = _lookup<
          ffi.NativeFunction<
              LLVMMemoryBufferRef Function(
                  ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<ffi.Char>)>>(
      'LLVMCreateMemoryBufferWithMemoryRangeCopy');
  late final _LLVMCreateMemoryBufferWithMemoryRangeCopy =
      _LLVMCreateMemoryBufferWithMemoryRangeCopyPtr.asFunction<
          LLVMMemoryBufferRef Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> LLVMGetBufferStart(
    LLVMMemoryBufferRef MemBuf,
  ) {
    return _LLVMGetBufferStart(
      MemBuf,
    );
  }

  late final _LLVMGetBufferStartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMMemoryBufferRef)>>('LLVMGetBufferStart');
  late final _LLVMGetBufferStart = _LLVMGetBufferStartPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMMemoryBufferRef)>();

  int LLVMGetBufferSize(
    LLVMMemoryBufferRef MemBuf,
  ) {
    return _LLVMGetBufferSize(
      MemBuf,
    );
  }

  late final _LLVMGetBufferSizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(LLVMMemoryBufferRef)>>(
          'LLVMGetBufferSize');
  late final _LLVMGetBufferSize =
      _LLVMGetBufferSizePtr.asFunction<int Function(LLVMMemoryBufferRef)>();

  void LLVMDisposeMemoryBuffer(
    LLVMMemoryBufferRef MemBuf,
  ) {
    return _LLVMDisposeMemoryBuffer(
      MemBuf,
    );
  }

  late final _LLVMDisposeMemoryBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMMemoryBufferRef)>>(
          'LLVMDisposeMemoryBuffer');
  late final _LLVMDisposeMemoryBuffer = _LLVMDisposeMemoryBufferPtr.asFunction<
      void Function(LLVMMemoryBufferRef)>();

  /// Return the global pass registry, for use with initialization functions.
  /// @see llvm::PassRegistry::getPassRegistry
  LLVMPassRegistryRef LLVMGetGlobalPassRegistry() {
    return _LLVMGetGlobalPassRegistry();
  }

  late final _LLVMGetGlobalPassRegistryPtr =
      _lookup<ffi.NativeFunction<LLVMPassRegistryRef Function()>>(
          'LLVMGetGlobalPassRegistry');
  late final _LLVMGetGlobalPassRegistry = _LLVMGetGlobalPassRegistryPtr
      .asFunction<LLVMPassRegistryRef Function()>();

  /// Constructs a new whole-module pass pipeline. This type of pipeline is
  /// suitable for link-time optimization and whole-module transformations.
  /// @see llvm::PassManager::PassManager
  LLVMPassManagerRef LLVMCreatePassManager() {
    return _LLVMCreatePassManager();
  }

  late final _LLVMCreatePassManagerPtr =
      _lookup<ffi.NativeFunction<LLVMPassManagerRef Function()>>(
          'LLVMCreatePassManager');
  late final _LLVMCreatePassManager =
      _LLVMCreatePassManagerPtr.asFunction<LLVMPassManagerRef Function()>();

  /// Constructs a new function-by-function pass pipeline over the module
  /// provider. It does not take ownership of the module provider. This type of
  /// pipeline is suitable for code generation and JIT compilation tasks.
  /// @see llvm::FunctionPassManager::FunctionPassManager
  LLVMPassManagerRef LLVMCreateFunctionPassManagerForModule(
    LLVMModuleRef M,
  ) {
    return _LLVMCreateFunctionPassManagerForModule(
      M,
    );
  }

  late final _LLVMCreateFunctionPassManagerForModulePtr =
      _lookup<ffi.NativeFunction<LLVMPassManagerRef Function(LLVMModuleRef)>>(
          'LLVMCreateFunctionPassManagerForModule');
  late final _LLVMCreateFunctionPassManagerForModule =
      _LLVMCreateFunctionPassManagerForModulePtr.asFunction<
          LLVMPassManagerRef Function(LLVMModuleRef)>();

  /// Deprecated: Use LLVMCreateFunctionPassManagerForModule instead.
  LLVMPassManagerRef LLVMCreateFunctionPassManager(
    LLVMModuleProviderRef MP,
  ) {
    return _LLVMCreateFunctionPassManager(
      MP,
    );
  }

  late final _LLVMCreateFunctionPassManagerPtr = _lookup<
      ffi.NativeFunction<
          LLVMPassManagerRef Function(
              LLVMModuleProviderRef)>>('LLVMCreateFunctionPassManager');
  late final _LLVMCreateFunctionPassManager = _LLVMCreateFunctionPassManagerPtr
      .asFunction<LLVMPassManagerRef Function(LLVMModuleProviderRef)>();

  /// Initializes, executes on the provided module, and finalizes all of the
  /// passes scheduled in the pass manager. Returns 1 if any of the passes
  /// modified the module, 0 otherwise.
  /// @see llvm::PassManager::run(Module&)
  int LLVMRunPassManager(
    LLVMPassManagerRef PM,
    LLVMModuleRef M,
  ) {
    return _LLVMRunPassManager(
      PM,
      M,
    );
  }

  late final _LLVMRunPassManagerPtr = _lookup<
      ffi.NativeFunction<
          LLVMBool Function(
              LLVMPassManagerRef, LLVMModuleRef)>>('LLVMRunPassManager');
  late final _LLVMRunPassManager = _LLVMRunPassManagerPtr.asFunction<
      int Function(LLVMPassManagerRef, LLVMModuleRef)>();

  /// Initializes all of the function passes scheduled in the function pass
  /// manager. Returns 1 if any of the passes modified the module, 0 otherwise.
  /// @see llvm::FunctionPassManager::doInitialization
  int LLVMInitializeFunctionPassManager(
    LLVMPassManagerRef FPM,
  ) {
    return _LLVMInitializeFunctionPassManager(
      FPM,
    );
  }

  late final _LLVMInitializeFunctionPassManagerPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMPassManagerRef)>>(
          'LLVMInitializeFunctionPassManager');
  late final _LLVMInitializeFunctionPassManager =
      _LLVMInitializeFunctionPassManagerPtr.asFunction<
          int Function(LLVMPassManagerRef)>();

  /// Executes all of the function passes scheduled in the function pass manager
  /// on the provided function. Returns 1 if any of the passes modified the
  /// function, false otherwise.
  /// @see llvm::FunctionPassManager::run(Function&)
  int LLVMRunFunctionPassManager(
    LLVMPassManagerRef FPM,
    LLVMValueRef F,
  ) {
    return _LLVMRunFunctionPassManager(
      FPM,
      F,
    );
  }

  late final _LLVMRunFunctionPassManagerPtr = _lookup<
      ffi.NativeFunction<
          LLVMBool Function(
              LLVMPassManagerRef, LLVMValueRef)>>('LLVMRunFunctionPassManager');
  late final _LLVMRunFunctionPassManager = _LLVMRunFunctionPassManagerPtr
      .asFunction<int Function(LLVMPassManagerRef, LLVMValueRef)>();

  /// Finalizes all of the function passes scheduled in the function pass
  /// manager. Returns 1 if any of the passes modified the module, 0 otherwise.
  /// @see llvm::FunctionPassManager::doFinalization
  int LLVMFinalizeFunctionPassManager(
    LLVMPassManagerRef FPM,
  ) {
    return _LLVMFinalizeFunctionPassManager(
      FPM,
    );
  }

  late final _LLVMFinalizeFunctionPassManagerPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMPassManagerRef)>>(
          'LLVMFinalizeFunctionPassManager');
  late final _LLVMFinalizeFunctionPassManager =
      _LLVMFinalizeFunctionPassManagerPtr.asFunction<
          int Function(LLVMPassManagerRef)>();

  /// Frees the memory of a pass pipeline. For function pipelines, does not free
  /// the module provider.
  /// @see llvm::PassManagerBase::~PassManagerBase.
  void LLVMDisposePassManager(
    LLVMPassManagerRef PM,
  ) {
    return _LLVMDisposePassManager(
      PM,
    );
  }

  late final _LLVMDisposePassManagerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMPassManagerRef)>>(
          'LLVMDisposePassManager');
  late final _LLVMDisposePassManager = _LLVMDisposePassManagerPtr.asFunction<
      void Function(LLVMPassManagerRef)>();

  /// Deprecated: Multi-threading can only be enabled/disabled with the compile
  /// time define LLVM_ENABLE_THREADS.  This function always returns
  /// LLVMIsMultithreaded().
  int LLVMStartMultithreaded() {
    return _LLVMStartMultithreaded();
  }

  late final _LLVMStartMultithreadedPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function()>>(
          'LLVMStartMultithreaded');
  late final _LLVMStartMultithreaded =
      _LLVMStartMultithreadedPtr.asFunction<int Function()>();

  /// Deprecated: Multi-threading can only be enabled/disabled with the compile
  /// time define LLVM_ENABLE_THREADS.
  void LLVMStopMultithreaded() {
    return _LLVMStopMultithreaded();
  }

  late final _LLVMStopMultithreadedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('LLVMStopMultithreaded');
  late final _LLVMStopMultithreaded =
      _LLVMStopMultithreadedPtr.asFunction<void Function()>();

  /// Check whether LLVM is executing in thread-safe mode or not.
  /// @see llvm::llvm_is_multithreaded
  int LLVMIsMultithreaded() {
    return _LLVMIsMultithreaded();
  }

  late final _LLVMIsMultithreadedPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function()>>('LLVMIsMultithreaded');
  late final _LLVMIsMultithreaded =
      _LLVMIsMultithreadedPtr.asFunction<int Function()>();

  void initLLVM() {
    return _initLLVM();
  }

  late final _initLLVMPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('initLLVM');
  late final _initLLVM = _initLLVMPtr.asFunction<void Function()>();

  void destory(
    KModuleRef module,
  ) {
    return _destory(
      module,
    );
  }

  late final _destoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KModuleRef)>>('destory');
  late final _destory = _destoryPtr.asFunction<void Function(KModuleRef)>();

  LLVMValueRef getOrInsertFunction(
    ffi.Pointer<ffi.Char> name,
    LLVMModuleRef module,
    LLVMTypeRef functionTy,
  ) {
    return _getOrInsertFunction(
      name,
      module,
      functionTy,
    );
  }

  late final _getOrInsertFunctionPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(ffi.Pointer<ffi.Char>, LLVMModuleRef,
              LLVMTypeRef)>>('getOrInsertFunction');
  late final _getOrInsertFunction = _getOrInsertFunctionPtr.asFunction<
      LLVMValueRef Function(
          ffi.Pointer<ffi.Char>, LLVMModuleRef, LLVMTypeRef)>();

  KModuleRef createKModule(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _createKModule(
      name,
    );
  }

  late final _createKModulePtr =
      _lookup<ffi.NativeFunction<KModuleRef Function(ffi.Pointer<ffi.Char>)>>(
          'createKModule');
  late final _createKModule = _createKModulePtr
      .asFunction<KModuleRef Function(ffi.Pointer<ffi.Char>)>();

  void kModuleInit(
    KModuleRef module,
  ) {
    return _kModuleInit(
      module,
    );
  }

  late final _kModuleInitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KModuleRef)>>('kModuleInit');
  late final _kModuleInit =
      _kModuleInitPtr.asFunction<void Function(KModuleRef)>();

  void writeOutput(
    KModuleRef module,
    int index,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _writeOutput(
      module,
      index,
      name,
    );
  }

  late final _writeOutputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              KModuleRef, ffi.Int, ffi.Pointer<ffi.Char>)>>('writeOutput');
  late final _writeOutput = _writeOutputPtr
      .asFunction<void Function(KModuleRef, int, ffi.Pointer<ffi.Char>)>();

  LLVMModuleRef getModule(
    KModuleRef ref,
  ) {
    return _getModule(
      ref,
    );
  }

  late final _getModulePtr =
      _lookup<ffi.NativeFunction<LLVMModuleRef Function(KModuleRef)>>(
          'getModule');
  late final _getModule =
      _getModulePtr.asFunction<LLVMModuleRef Function(KModuleRef)>();

  LLVMContextRef getLLVMContext(
    KModuleRef ref,
  ) {
    return _getLLVMContext(
      ref,
    );
  }

  late final _getLLVMContextPtr =
      _lookup<ffi.NativeFunction<LLVMContextRef Function(KModuleRef)>>(
          'getLLVMContext');
  late final _getLLVMContext =
      _getLLVMContextPtr.asFunction<LLVMContextRef Function(KModuleRef)>();

  LLVMPassManagerRef getFPM(
    KModuleRef ref,
  ) {
    return _getFPM(
      ref,
    );
  }

  late final _getFPMPtr =
      _lookup<ffi.NativeFunction<LLVMPassManagerRef Function(KModuleRef)>>(
          'getFPM');
  late final _getFPM =
      _getFPMPtr.asFunction<LLVMPassManagerRef Function(KModuleRef)>();

  LLVMAttributeRef LLVMCreateStructRetAttr(
    LLVMContextRef C,
    LLVMTypeRef Ty,
  ) {
    return _LLVMCreateStructRetAttr(
      C,
      Ty,
    );
  }

  late final _LLVMCreateStructRetAttrPtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(
              LLVMContextRef, LLVMTypeRef)>>('LLVMCreateStructRetAttr');
  late final _LLVMCreateStructRetAttr = _LLVMCreateStructRetAttrPtr.asFunction<
      LLVMAttributeRef Function(LLVMContextRef, LLVMTypeRef)>();

  LLVMMetadataRef LLVMCreateCompileUnit(
    LLVMDIBuilderRef builder,
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Char> dirName,
  ) {
    return _LLVMCreateCompileUnit(
      builder,
      fileName,
      dirName,
    );
  }

  late final _LLVMCreateCompileUnitPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('LLVMCreateCompileUnit');
  late final _LLVMCreateCompileUnit = _LLVMCreateCompileUnitPtr.asFunction<
      LLVMMetadataRef Function(
          LLVMDIBuilderRef, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void LLVMIRReader(
    LLVMContextRef context,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> outName,
  ) {
    return _LLVMIRReader(
      context,
      name,
      outName,
    );
  }

  late final _LLVMIRReaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMContextRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('LLVMIRReader');
  late final _LLVMIRReader = _LLVMIRReaderPtr.asFunction<
      void Function(
          LLVMContextRef, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Obtain the data layout for a module.
  ///
  /// @see Module::getDataLayout()
  LLVMTargetDataRef LLVMGetModuleDataLayout(
    LLVMModuleRef M,
  ) {
    return _LLVMGetModuleDataLayout(
      M,
    );
  }

  late final _LLVMGetModuleDataLayoutPtr =
      _lookup<ffi.NativeFunction<LLVMTargetDataRef Function(LLVMModuleRef)>>(
          'LLVMGetModuleDataLayout');
  late final _LLVMGetModuleDataLayout = _LLVMGetModuleDataLayoutPtr.asFunction<
      LLVMTargetDataRef Function(LLVMModuleRef)>();

  /// Set the data layout for a module.
  ///
  /// @see Module::setDataLayout()
  void LLVMSetModuleDataLayout(
    LLVMModuleRef M,
    LLVMTargetDataRef DL,
  ) {
    return _LLVMSetModuleDataLayout(
      M,
      DL,
    );
  }

  late final _LLVMSetModuleDataLayoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMModuleRef, LLVMTargetDataRef)>>('LLVMSetModuleDataLayout');
  late final _LLVMSetModuleDataLayout = _LLVMSetModuleDataLayoutPtr.asFunction<
      void Function(LLVMModuleRef, LLVMTargetDataRef)>();

  /// Creates target data from a target layout string.
  /// See the constructor llvm::DataLayout::DataLayout.
  LLVMTargetDataRef LLVMCreateTargetData(
    ffi.Pointer<ffi.Char> StringRep,
  ) {
    return _LLVMCreateTargetData(
      StringRep,
    );
  }

  late final _LLVMCreateTargetDataPtr = _lookup<
      ffi.NativeFunction<
          LLVMTargetDataRef Function(
              ffi.Pointer<ffi.Char>)>>('LLVMCreateTargetData');
  late final _LLVMCreateTargetData = _LLVMCreateTargetDataPtr.asFunction<
      LLVMTargetDataRef Function(ffi.Pointer<ffi.Char>)>();

  /// Deallocates a TargetData.
  /// See the destructor llvm::DataLayout::~DataLayout.
  void LLVMDisposeTargetData(
    LLVMTargetDataRef TD,
  ) {
    return _LLVMDisposeTargetData(
      TD,
    );
  }

  late final _LLVMDisposeTargetDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMTargetDataRef)>>(
          'LLVMDisposeTargetData');
  late final _LLVMDisposeTargetData =
      _LLVMDisposeTargetDataPtr.asFunction<void Function(LLVMTargetDataRef)>();

  /// Adds target library information to a pass manager. This does not take
  /// ownership of the target library info.
  /// See the method llvm::PassManagerBase::add.
  void LLVMAddTargetLibraryInfo(
    LLVMTargetLibraryInfoRef TLI,
    LLVMPassManagerRef PM,
  ) {
    return _LLVMAddTargetLibraryInfo(
      TLI,
      PM,
    );
  }

  late final _LLVMAddTargetLibraryInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMTargetLibraryInfoRef,
              LLVMPassManagerRef)>>('LLVMAddTargetLibraryInfo');
  late final _LLVMAddTargetLibraryInfo =
      _LLVMAddTargetLibraryInfoPtr.asFunction<
          void Function(LLVMTargetLibraryInfoRef, LLVMPassManagerRef)>();

  /// Converts target data to a target layout string. The string must be disposed
  /// with LLVMDisposeMessage.
  /// See the constructor llvm::DataLayout::DataLayout.
  ffi.Pointer<ffi.Char> LLVMCopyStringRepOfTargetData(
    LLVMTargetDataRef TD,
  ) {
    return _LLVMCopyStringRepOfTargetData(
      TD,
    );
  }

  late final _LLVMCopyStringRepOfTargetDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMTargetDataRef)>>('LLVMCopyStringRepOfTargetData');
  late final _LLVMCopyStringRepOfTargetData = _LLVMCopyStringRepOfTargetDataPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(LLVMTargetDataRef)>();

  /// Returns the byte order of a target, either LLVMBigEndian or
  /// LLVMLittleEndian.
  /// See the method llvm::DataLayout::isLittleEndian.
  int LLVMByteOrder(
    LLVMTargetDataRef TD,
  ) {
    return _LLVMByteOrder(
      TD,
    );
  }

  late final _LLVMByteOrderPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMTargetDataRef)>>(
          'LLVMByteOrder');
  late final _LLVMByteOrder =
      _LLVMByteOrderPtr.asFunction<int Function(LLVMTargetDataRef)>();

  /// Returns the pointer size in bytes for a target.
  /// See the method llvm::DataLayout::getPointerSize.
  int LLVMPointerSize(
    LLVMTargetDataRef TD,
  ) {
    return _LLVMPointerSize(
      TD,
    );
  }

  late final _LLVMPointerSizePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTargetDataRef)>>(
          'LLVMPointerSize');
  late final _LLVMPointerSize =
      _LLVMPointerSizePtr.asFunction<int Function(LLVMTargetDataRef)>();

  /// Returns the pointer size in bytes for a target for a specified
  /// address space.
  /// See the method llvm::DataLayout::getPointerSize.
  int LLVMPointerSizeForAS(
    LLVMTargetDataRef TD,
    int AS,
  ) {
    return _LLVMPointerSizeForAS(
      TD,
      AS,
    );
  }

  late final _LLVMPointerSizeForASPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              LLVMTargetDataRef, ffi.UnsignedInt)>>('LLVMPointerSizeForAS');
  late final _LLVMPointerSizeForAS = _LLVMPointerSizeForASPtr.asFunction<
      int Function(LLVMTargetDataRef, int)>();

  /// Returns the integer type that is the same size as a pointer on a target.
  /// See the method llvm::DataLayout::getIntPtrType.
  LLVMTypeRef LLVMIntPtrType(
    LLVMTargetDataRef TD,
  ) {
    return _LLVMIntPtrType(
      TD,
    );
  }

  late final _LLVMIntPtrTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMTargetDataRef)>>(
          'LLVMIntPtrType');
  late final _LLVMIntPtrType =
      _LLVMIntPtrTypePtr.asFunction<LLVMTypeRef Function(LLVMTargetDataRef)>();

  /// Returns the integer type that is the same size as a pointer on a target.
  /// This version allows the address space to be specified.
  /// See the method llvm::DataLayout::getIntPtrType.
  LLVMTypeRef LLVMIntPtrTypeForAS(
    LLVMTargetDataRef TD,
    int AS,
  ) {
    return _LLVMIntPtrTypeForAS(
      TD,
      AS,
    );
  }

  late final _LLVMIntPtrTypeForASPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMTargetDataRef, ffi.UnsignedInt)>>('LLVMIntPtrTypeForAS');
  late final _LLVMIntPtrTypeForAS = _LLVMIntPtrTypeForASPtr.asFunction<
      LLVMTypeRef Function(LLVMTargetDataRef, int)>();

  /// Returns the integer type that is the same size as a pointer on a target.
  /// See the method llvm::DataLayout::getIntPtrType.
  LLVMTypeRef LLVMIntPtrTypeInContext(
    LLVMContextRef C,
    LLVMTargetDataRef TD,
  ) {
    return _LLVMIntPtrTypeInContext(
      C,
      TD,
    );
  }

  late final _LLVMIntPtrTypeInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMContextRef, LLVMTargetDataRef)>>('LLVMIntPtrTypeInContext');
  late final _LLVMIntPtrTypeInContext = _LLVMIntPtrTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef, LLVMTargetDataRef)>();

  /// Returns the integer type that is the same size as a pointer on a target.
  /// This version allows the address space to be specified.
  /// See the method llvm::DataLayout::getIntPtrType.
  LLVMTypeRef LLVMIntPtrTypeForASInContext(
    LLVMContextRef C,
    LLVMTargetDataRef TD,
    int AS,
  ) {
    return _LLVMIntPtrTypeForASInContext(
      C,
      TD,
      AS,
    );
  }

  late final _LLVMIntPtrTypeForASInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(LLVMContextRef, LLVMTargetDataRef,
              ffi.UnsignedInt)>>('LLVMIntPtrTypeForASInContext');
  late final _LLVMIntPtrTypeForASInContext =
      _LLVMIntPtrTypeForASInContextPtr.asFunction<
          LLVMTypeRef Function(LLVMContextRef, LLVMTargetDataRef, int)>();

  /// Computes the size of a type in bytes for a target.
  /// See the method llvm::DataLayout::getTypeSizeInBits.
  int LLVMSizeOfTypeInBits(
    LLVMTargetDataRef TD,
    LLVMTypeRef Ty,
  ) {
    return _LLVMSizeOfTypeInBits(
      TD,
      Ty,
    );
  }

  late final _LLVMSizeOfTypeInBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              LLVMTargetDataRef, LLVMTypeRef)>>('LLVMSizeOfTypeInBits');
  late final _LLVMSizeOfTypeInBits = _LLVMSizeOfTypeInBitsPtr.asFunction<
      int Function(LLVMTargetDataRef, LLVMTypeRef)>();

  /// Computes the storage size of a type in bytes for a target.
  /// See the method llvm::DataLayout::getTypeStoreSize.
  int LLVMStoreSizeOfType(
    LLVMTargetDataRef TD,
    LLVMTypeRef Ty,
  ) {
    return _LLVMStoreSizeOfType(
      TD,
      Ty,
    );
  }

  late final _LLVMStoreSizeOfTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              LLVMTargetDataRef, LLVMTypeRef)>>('LLVMStoreSizeOfType');
  late final _LLVMStoreSizeOfType = _LLVMStoreSizeOfTypePtr.asFunction<
      int Function(LLVMTargetDataRef, LLVMTypeRef)>();

  /// Computes the ABI size of a type in bytes for a target.
  /// See the method llvm::DataLayout::getTypeAllocSize.
  int LLVMABISizeOfType(
    LLVMTargetDataRef TD,
    LLVMTypeRef Ty,
  ) {
    return _LLVMABISizeOfType(
      TD,
      Ty,
    );
  }

  late final _LLVMABISizeOfTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              LLVMTargetDataRef, LLVMTypeRef)>>('LLVMABISizeOfType');
  late final _LLVMABISizeOfType = _LLVMABISizeOfTypePtr.asFunction<
      int Function(LLVMTargetDataRef, LLVMTypeRef)>();

  /// Computes the ABI alignment of a type in bytes for a target.
  /// See the method llvm::DataLayout::getTypeABISize.
  int LLVMABIAlignmentOfType(
    LLVMTargetDataRef TD,
    LLVMTypeRef Ty,
  ) {
    return _LLVMABIAlignmentOfType(
      TD,
      Ty,
    );
  }

  late final _LLVMABIAlignmentOfTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              LLVMTargetDataRef, LLVMTypeRef)>>('LLVMABIAlignmentOfType');
  late final _LLVMABIAlignmentOfType = _LLVMABIAlignmentOfTypePtr.asFunction<
      int Function(LLVMTargetDataRef, LLVMTypeRef)>();

  /// Computes the call frame alignment of a type in bytes for a target.
  /// See the method llvm::DataLayout::getTypeABISize.
  int LLVMCallFrameAlignmentOfType(
    LLVMTargetDataRef TD,
    LLVMTypeRef Ty,
  ) {
    return _LLVMCallFrameAlignmentOfType(
      TD,
      Ty,
    );
  }

  late final _LLVMCallFrameAlignmentOfTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              LLVMTargetDataRef, LLVMTypeRef)>>('LLVMCallFrameAlignmentOfType');
  late final _LLVMCallFrameAlignmentOfType = _LLVMCallFrameAlignmentOfTypePtr
      .asFunction<int Function(LLVMTargetDataRef, LLVMTypeRef)>();

  /// Computes the preferred alignment of a type in bytes for a target.
  /// See the method llvm::DataLayout::getTypeABISize.
  int LLVMPreferredAlignmentOfType(
    LLVMTargetDataRef TD,
    LLVMTypeRef Ty,
  ) {
    return _LLVMPreferredAlignmentOfType(
      TD,
      Ty,
    );
  }

  late final _LLVMPreferredAlignmentOfTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              LLVMTargetDataRef, LLVMTypeRef)>>('LLVMPreferredAlignmentOfType');
  late final _LLVMPreferredAlignmentOfType = _LLVMPreferredAlignmentOfTypePtr
      .asFunction<int Function(LLVMTargetDataRef, LLVMTypeRef)>();

  /// Computes the preferred alignment of a global variable in bytes for a target.
  /// See the method llvm::DataLayout::getPreferredAlignment.
  int LLVMPreferredAlignmentOfGlobal(
    LLVMTargetDataRef TD,
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMPreferredAlignmentOfGlobal(
      TD,
      GlobalVar,
    );
  }

  late final _LLVMPreferredAlignmentOfGlobalPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(LLVMTargetDataRef,
              LLVMValueRef)>>('LLVMPreferredAlignmentOfGlobal');
  late final _LLVMPreferredAlignmentOfGlobal =
      _LLVMPreferredAlignmentOfGlobalPtr.asFunction<
          int Function(LLVMTargetDataRef, LLVMValueRef)>();

  /// Computes the structure element that contains the byte offset for a target.
  /// See the method llvm::StructLayout::getElementContainingOffset.
  int LLVMElementAtOffset(
    LLVMTargetDataRef TD,
    LLVMTypeRef StructTy,
    int Offset,
  ) {
    return _LLVMElementAtOffset(
      TD,
      StructTy,
      Offset,
    );
  }

  late final _LLVMElementAtOffsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(LLVMTargetDataRef, LLVMTypeRef,
              ffi.UnsignedLongLong)>>('LLVMElementAtOffset');
  late final _LLVMElementAtOffset = _LLVMElementAtOffsetPtr.asFunction<
      int Function(LLVMTargetDataRef, LLVMTypeRef, int)>();

  /// Computes the byte offset of the indexed struct element for a target.
  /// See the method llvm::StructLayout::getElementContainingOffset.
  int LLVMOffsetOfElement(
    LLVMTargetDataRef TD,
    LLVMTypeRef StructTy,
    int Element,
  ) {
    return _LLVMOffsetOfElement(
      TD,
      StructTy,
      Element,
    );
  }

  late final _LLVMOffsetOfElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(LLVMTargetDataRef, LLVMTypeRef,
              ffi.UnsignedInt)>>('LLVMOffsetOfElement');
  late final _LLVMOffsetOfElement = _LLVMOffsetOfElementPtr.asFunction<
      int Function(LLVMTargetDataRef, LLVMTypeRef, int)>();

  /// Returns the first llvm::Target in the registered targets list.
  LLVMTargetRef LLVMGetFirstTarget() {
    return _LLVMGetFirstTarget();
  }

  late final _LLVMGetFirstTargetPtr =
      _lookup<ffi.NativeFunction<LLVMTargetRef Function()>>(
          'LLVMGetFirstTarget');
  late final _LLVMGetFirstTarget =
      _LLVMGetFirstTargetPtr.asFunction<LLVMTargetRef Function()>();

  /// Returns the next llvm::Target given a previous one (or null if there's none)
  LLVMTargetRef LLVMGetNextTarget(
    LLVMTargetRef T,
  ) {
    return _LLVMGetNextTarget(
      T,
    );
  }

  late final _LLVMGetNextTargetPtr =
      _lookup<ffi.NativeFunction<LLVMTargetRef Function(LLVMTargetRef)>>(
          'LLVMGetNextTarget');
  late final _LLVMGetNextTarget =
      _LLVMGetNextTargetPtr.asFunction<LLVMTargetRef Function(LLVMTargetRef)>();

  /// Finds the target corresponding to the given name and stores it in \p T.
  /// Returns 0 on success.
  LLVMTargetRef LLVMGetTargetFromName(
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMGetTargetFromName(
      Name,
    );
  }

  late final _LLVMGetTargetFromNamePtr = _lookup<
          ffi.NativeFunction<LLVMTargetRef Function(ffi.Pointer<ffi.Char>)>>(
      'LLVMGetTargetFromName');
  late final _LLVMGetTargetFromName = _LLVMGetTargetFromNamePtr.asFunction<
      LLVMTargetRef Function(ffi.Pointer<ffi.Char>)>();

  /// Finds the target corresponding to the given triple and stores it in \p T.
  /// Returns 0 on success. Optionally returns any error in ErrorMessage.
  /// Use LLVMDisposeMessage to dispose the message.
  int LLVMGetTargetFromTriple(
    ffi.Pointer<ffi.Char> Triple,
    ffi.Pointer<LLVMTargetRef> T,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ErrorMessage,
  ) {
    return _LLVMGetTargetFromTriple(
      Triple,
      T,
      ErrorMessage,
    );
  }

  late final _LLVMGetTargetFromTriplePtr = _lookup<
      ffi.NativeFunction<
          LLVMBool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<LLVMTargetRef>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('LLVMGetTargetFromTriple');
  late final _LLVMGetTargetFromTriple = _LLVMGetTargetFromTriplePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<LLVMTargetRef>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Returns the name of a target. See llvm::Target::getName
  ffi.Pointer<ffi.Char> LLVMGetTargetName(
    LLVMTargetRef T,
  ) {
    return _LLVMGetTargetName(
      T,
    );
  }

  late final _LLVMGetTargetNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMTargetRef)>>(
      'LLVMGetTargetName');
  late final _LLVMGetTargetName = _LLVMGetTargetNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMTargetRef)>();

  /// Returns the description  of a target. See llvm::Target::getDescription
  ffi.Pointer<ffi.Char> LLVMGetTargetDescription(
    LLVMTargetRef T,
  ) {
    return _LLVMGetTargetDescription(
      T,
    );
  }

  late final _LLVMGetTargetDescriptionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMTargetRef)>>(
      'LLVMGetTargetDescription');
  late final _LLVMGetTargetDescription = _LLVMGetTargetDescriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(LLVMTargetRef)>();

  /// Returns if the target has a JIT
  int LLVMTargetHasJIT(
    LLVMTargetRef T,
  ) {
    return _LLVMTargetHasJIT(
      T,
    );
  }

  late final _LLVMTargetHasJITPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTargetRef)>>(
          'LLVMTargetHasJIT');
  late final _LLVMTargetHasJIT =
      _LLVMTargetHasJITPtr.asFunction<int Function(LLVMTargetRef)>();

  /// Returns if the target has a TargetMachine associated
  int LLVMTargetHasTargetMachine(
    LLVMTargetRef T,
  ) {
    return _LLVMTargetHasTargetMachine(
      T,
    );
  }

  late final _LLVMTargetHasTargetMachinePtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTargetRef)>>(
          'LLVMTargetHasTargetMachine');
  late final _LLVMTargetHasTargetMachine =
      _LLVMTargetHasTargetMachinePtr.asFunction<int Function(LLVMTargetRef)>();

  /// Returns if the target as an ASM backend (required for emitting output)
  int LLVMTargetHasAsmBackend(
    LLVMTargetRef T,
  ) {
    return _LLVMTargetHasAsmBackend(
      T,
    );
  }

  late final _LLVMTargetHasAsmBackendPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTargetRef)>>(
          'LLVMTargetHasAsmBackend');
  late final _LLVMTargetHasAsmBackend =
      _LLVMTargetHasAsmBackendPtr.asFunction<int Function(LLVMTargetRef)>();

  /// Creates a new llvm::TargetMachine. See llvm::Target::createTargetMachine
  LLVMTargetMachineRef LLVMCreateTargetMachine(
    LLVMTargetRef T,
    ffi.Pointer<ffi.Char> Triple,
    ffi.Pointer<ffi.Char> CPU,
    ffi.Pointer<ffi.Char> Features,
    int Level,
    int Reloc,
    int CodeModel,
  ) {
    return _LLVMCreateTargetMachine(
      T,
      Triple,
      CPU,
      Features,
      Level,
      Reloc,
      CodeModel,
    );
  }

  late final _LLVMCreateTargetMachinePtr = _lookup<
      ffi.NativeFunction<
          LLVMTargetMachineRef Function(
              LLVMTargetRef,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('LLVMCreateTargetMachine');
  late final _LLVMCreateTargetMachine = _LLVMCreateTargetMachinePtr.asFunction<
      LLVMTargetMachineRef Function(LLVMTargetRef, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int)>();

  /// Dispose the LLVMTargetMachineRef instance generated by
  /// LLVMCreateTargetMachine.
  void LLVMDisposeTargetMachine(
    LLVMTargetMachineRef T,
  ) {
    return _LLVMDisposeTargetMachine(
      T,
    );
  }

  late final _LLVMDisposeTargetMachinePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMTargetMachineRef)>>(
          'LLVMDisposeTargetMachine');
  late final _LLVMDisposeTargetMachine = _LLVMDisposeTargetMachinePtr
      .asFunction<void Function(LLVMTargetMachineRef)>();

  /// Returns the Target used in a TargetMachine
  LLVMTargetRef LLVMGetTargetMachineTarget(
    LLVMTargetMachineRef T,
  ) {
    return _LLVMGetTargetMachineTarget(
      T,
    );
  }

  late final _LLVMGetTargetMachineTargetPtr =
      _lookup<ffi.NativeFunction<LLVMTargetRef Function(LLVMTargetMachineRef)>>(
          'LLVMGetTargetMachineTarget');
  late final _LLVMGetTargetMachineTarget = _LLVMGetTargetMachineTargetPtr
      .asFunction<LLVMTargetRef Function(LLVMTargetMachineRef)>();

  /// Returns the triple used creating this target machine. See
  /// llvm::TargetMachine::getTriple. The result needs to be disposed with
  /// LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMGetTargetMachineTriple(
    LLVMTargetMachineRef T,
  ) {
    return _LLVMGetTargetMachineTriple(
      T,
    );
  }

  late final _LLVMGetTargetMachineTriplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMTargetMachineRef)>>('LLVMGetTargetMachineTriple');
  late final _LLVMGetTargetMachineTriple = _LLVMGetTargetMachineTriplePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(LLVMTargetMachineRef)>();

  /// Returns the cpu used creating this target machine. See
  /// llvm::TargetMachine::getCPU. The result needs to be disposed with
  /// LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMGetTargetMachineCPU(
    LLVMTargetMachineRef T,
  ) {
    return _LLVMGetTargetMachineCPU(
      T,
    );
  }

  late final _LLVMGetTargetMachineCPUPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMTargetMachineRef)>>('LLVMGetTargetMachineCPU');
  late final _LLVMGetTargetMachineCPU = _LLVMGetTargetMachineCPUPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMTargetMachineRef)>();

  /// Returns the feature string used creating this target machine. See
  /// llvm::TargetMachine::getFeatureString. The result needs to be disposed with
  /// LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMGetTargetMachineFeatureString(
    LLVMTargetMachineRef T,
  ) {
    return _LLVMGetTargetMachineFeatureString(
      T,
    );
  }

  late final _LLVMGetTargetMachineFeatureStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMTargetMachineRef)>>('LLVMGetTargetMachineFeatureString');
  late final _LLVMGetTargetMachineFeatureString =
      _LLVMGetTargetMachineFeatureStringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(LLVMTargetMachineRef)>();

  /// Create a DataLayout based on the targetMachine.
  LLVMTargetDataRef LLVMCreateTargetDataLayout(
    LLVMTargetMachineRef T,
  ) {
    return _LLVMCreateTargetDataLayout(
      T,
    );
  }

  late final _LLVMCreateTargetDataLayoutPtr = _lookup<
          ffi.NativeFunction<LLVMTargetDataRef Function(LLVMTargetMachineRef)>>(
      'LLVMCreateTargetDataLayout');
  late final _LLVMCreateTargetDataLayout = _LLVMCreateTargetDataLayoutPtr
      .asFunction<LLVMTargetDataRef Function(LLVMTargetMachineRef)>();

  /// Set the target machine's ASM verbosity.
  void LLVMSetTargetMachineAsmVerbosity(
    LLVMTargetMachineRef T,
    int VerboseAsm,
  ) {
    return _LLVMSetTargetMachineAsmVerbosity(
      T,
      VerboseAsm,
    );
  }

  late final _LLVMSetTargetMachineAsmVerbosityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMTargetMachineRef,
              LLVMBool)>>('LLVMSetTargetMachineAsmVerbosity');
  late final _LLVMSetTargetMachineAsmVerbosity =
      _LLVMSetTargetMachineAsmVerbosityPtr.asFunction<
          void Function(LLVMTargetMachineRef, int)>();

  /// Emits an asm or object file for the given module to the filename. This
  /// wraps several c++ only classes (among them a file stream). Returns any
  /// error in ErrorMessage. Use LLVMDisposeMessage to dispose the message.
  int LLVMTargetMachineEmitToFile(
    LLVMTargetMachineRef T,
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Filename,
    int codegen,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ErrorMessage,
  ) {
    return _LLVMTargetMachineEmitToFile(
      T,
      M,
      Filename,
      codegen,
      ErrorMessage,
    );
  }

  late final _LLVMTargetMachineEmitToFilePtr = _lookup<
          ffi.NativeFunction<
              LLVMBool Function(
                  LLVMTargetMachineRef,
                  LLVMModuleRef,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'LLVMTargetMachineEmitToFile');
  late final _LLVMTargetMachineEmitToFile =
      _LLVMTargetMachineEmitToFilePtr.asFunction<
          int Function(
              LLVMTargetMachineRef,
              LLVMModuleRef,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Compile the LLVM IR stored in \p M and store the result in \p OutMemBuf.
  int LLVMTargetMachineEmitToMemoryBuffer(
    LLVMTargetMachineRef T,
    LLVMModuleRef M,
    int codegen,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ErrorMessage,
    ffi.Pointer<LLVMMemoryBufferRef> OutMemBuf,
  ) {
    return _LLVMTargetMachineEmitToMemoryBuffer(
      T,
      M,
      codegen,
      ErrorMessage,
      OutMemBuf,
    );
  }

  late final _LLVMTargetMachineEmitToMemoryBufferPtr = _lookup<
          ffi.NativeFunction<
              LLVMBool Function(
                  LLVMTargetMachineRef,
                  LLVMModuleRef,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<LLVMMemoryBufferRef>)>>(
      'LLVMTargetMachineEmitToMemoryBuffer');
  late final _LLVMTargetMachineEmitToMemoryBuffer =
      _LLVMTargetMachineEmitToMemoryBufferPtr.asFunction<
          int Function(
              LLVMTargetMachineRef,
              LLVMModuleRef,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<LLVMMemoryBufferRef>)>();

  /// Get a triple for the host machine as a string. The result needs to be
  /// disposed with LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMGetDefaultTargetTriple() {
    return _LLVMGetDefaultTargetTriple();
  }

  late final _LLVMGetDefaultTargetTriplePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'LLVMGetDefaultTargetTriple');
  late final _LLVMGetDefaultTargetTriple = _LLVMGetDefaultTargetTriplePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Normalize a target triple. The result needs to be disposed with
  /// LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMNormalizeTargetTriple(
    ffi.Pointer<ffi.Char> triple,
  ) {
    return _LLVMNormalizeTargetTriple(
      triple,
    );
  }

  late final _LLVMNormalizeTargetTriplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('LLVMNormalizeTargetTriple');
  late final _LLVMNormalizeTargetTriple = _LLVMNormalizeTargetTriplePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// Get the host CPU as a string. The result needs to be disposed with
  /// LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMGetHostCPUName() {
    return _LLVMGetHostCPUName();
  }

  late final _LLVMGetHostCPUNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'LLVMGetHostCPUName');
  late final _LLVMGetHostCPUName =
      _LLVMGetHostCPUNamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Get the host CPU's features as a string. The result needs to be disposed
  /// with LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMGetHostCPUFeatures() {
    return _LLVMGetHostCPUFeatures();
  }

  late final _LLVMGetHostCPUFeaturesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'LLVMGetHostCPUFeatures');
  late final _LLVMGetHostCPUFeatures =
      _LLVMGetHostCPUFeaturesPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Adds the target-specific analysis passes to the pass manager.
  void LLVMAddAnalysisPasses(
    LLVMTargetMachineRef T,
    LLVMPassManagerRef PM,
  ) {
    return _LLVMAddAnalysisPasses(
      T,
      PM,
    );
  }

  late final _LLVMAddAnalysisPassesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMTargetMachineRef,
              LLVMPassManagerRef)>>('LLVMAddAnalysisPasses');
  late final _LLVMAddAnalysisPasses = _LLVMAddAnalysisPassesPtr.asFunction<
      void Function(LLVMTargetMachineRef, LLVMPassManagerRef)>();

  /// The current debug metadata version number.
  int LLVMDebugMetadataVersion() {
    return _LLVMDebugMetadataVersion();
  }

  late final _LLVMDebugMetadataVersionPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'LLVMDebugMetadataVersion');
  late final _LLVMDebugMetadataVersion =
      _LLVMDebugMetadataVersionPtr.asFunction<int Function()>();

  /// The version of debug metadata that's present in the provided \c Module.
  int LLVMGetModuleDebugMetadataVersion(
    LLVMModuleRef Module,
  ) {
    return _LLVMGetModuleDebugMetadataVersion(
      Module,
    );
  }

  late final _LLVMGetModuleDebugMetadataVersionPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMModuleRef)>>(
          'LLVMGetModuleDebugMetadataVersion');
  late final _LLVMGetModuleDebugMetadataVersion =
      _LLVMGetModuleDebugMetadataVersionPtr.asFunction<
          int Function(LLVMModuleRef)>();

  /// Strip debug info in the module if it exists.
  /// To do this, we remove all calls to the debugger intrinsics and any named
  /// metadata for debugging. We also remove debug locations for instructions.
  /// Return true if module is modified.
  int LLVMStripModuleDebugInfo(
    LLVMModuleRef Module,
  ) {
    return _LLVMStripModuleDebugInfo(
      Module,
    );
  }

  late final _LLVMStripModuleDebugInfoPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMModuleRef)>>(
          'LLVMStripModuleDebugInfo');
  late final _LLVMStripModuleDebugInfo =
      _LLVMStripModuleDebugInfoPtr.asFunction<int Function(LLVMModuleRef)>();

  /// Construct a builder for a module, and do not allow for unresolved nodes
  /// attached to the module.
  LLVMDIBuilderRef LLVMCreateDIBuilderDisallowUnresolved(
    LLVMModuleRef M,
  ) {
    return _LLVMCreateDIBuilderDisallowUnresolved(
      M,
    );
  }

  late final _LLVMCreateDIBuilderDisallowUnresolvedPtr =
      _lookup<ffi.NativeFunction<LLVMDIBuilderRef Function(LLVMModuleRef)>>(
          'LLVMCreateDIBuilderDisallowUnresolved');
  late final _LLVMCreateDIBuilderDisallowUnresolved =
      _LLVMCreateDIBuilderDisallowUnresolvedPtr.asFunction<
          LLVMDIBuilderRef Function(LLVMModuleRef)>();

  /// Construct a builder for a module and collect unresolved nodes attached
  /// to the module in order to resolve cycles during a call to
  /// \c LLVMDIBuilderFinalize.
  LLVMDIBuilderRef LLVMCreateDIBuilder(
    LLVMModuleRef M,
  ) {
    return _LLVMCreateDIBuilder(
      M,
    );
  }

  late final _LLVMCreateDIBuilderPtr =
      _lookup<ffi.NativeFunction<LLVMDIBuilderRef Function(LLVMModuleRef)>>(
          'LLVMCreateDIBuilder');
  late final _LLVMCreateDIBuilder = _LLVMCreateDIBuilderPtr.asFunction<
      LLVMDIBuilderRef Function(LLVMModuleRef)>();

  /// Deallocates the \c DIBuilder and everything it owns.
  /// @note You must call \c LLVMDIBuilderFinalize before this
  void LLVMDisposeDIBuilder(
    LLVMDIBuilderRef Builder,
  ) {
    return _LLVMDisposeDIBuilder(
      Builder,
    );
  }

  late final _LLVMDisposeDIBuilderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMDIBuilderRef)>>(
          'LLVMDisposeDIBuilder');
  late final _LLVMDisposeDIBuilder =
      _LLVMDisposeDIBuilderPtr.asFunction<void Function(LLVMDIBuilderRef)>();

  /// Construct any deferred debug info descriptors.
  void LLVMDIBuilderFinalize(
    LLVMDIBuilderRef Builder,
  ) {
    return _LLVMDIBuilderFinalize(
      Builder,
    );
  }

  late final _LLVMDIBuilderFinalizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMDIBuilderRef)>>(
          'LLVMDIBuilderFinalize');
  late final _LLVMDIBuilderFinalize =
      _LLVMDIBuilderFinalizePtr.asFunction<void Function(LLVMDIBuilderRef)>();

  /// Finalize a specific subprogram.
  /// No new variables may be added to this subprogram afterwards.
  void LLVMDIBuilderFinalizeSubprogram(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Subprogram,
  ) {
    return _LLVMDIBuilderFinalizeSubprogram(
      Builder,
      Subprogram,
    );
  }

  late final _LLVMDIBuilderFinalizeSubprogramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMDIBuilderRef,
              LLVMMetadataRef)>>('LLVMDIBuilderFinalizeSubprogram');
  late final _LLVMDIBuilderFinalizeSubprogram =
      _LLVMDIBuilderFinalizeSubprogramPtr.asFunction<
          void Function(LLVMDIBuilderRef, LLVMMetadataRef)>();

  /// A CompileUnit provides an anchor for all debugging
  /// information generated during this instance of compilation.
  /// \param Lang          Source programming language, eg.
  /// \c LLVMDWARFSourceLanguageC99
  /// \param FileRef       File info.
  /// \param Producer      Identify the producer of debugging information
  /// and code.  Usually this is a compiler
  /// version string.
  /// \param ProducerLen   The length of the C string passed to \c Producer.
  /// \param isOptimized   A boolean flag which indicates whether optimization
  /// is enabled or not.
  /// \param Flags         This string lists command line options. This
  /// string is directly embedded in debug info
  /// output which may be used by a tool
  /// analyzing generated debugging information.
  /// \param FlagsLen      The length of the C string passed to \c Flags.
  /// \param RuntimeVer    This indicates runtime version for languages like
  /// Objective-C.
  /// \param SplitName     The name of the file that we'll split debug info
  /// out into.
  /// \param SplitNameLen  The length of the C string passed to \c SplitName.
  /// \param Kind          The kind of debug information to generate.
  /// \param DWOId         The DWOId if this is a split skeleton compile unit.
  /// \param SplitDebugInlining    Whether to emit inline debug info.
  /// \param DebugInfoForProfiling Whether to emit extra debug info for
  /// profile collection.
  /// \param SysRoot         The Clang system root (value of -isysroot).
  /// \param SysRootLen      The length of the C string passed to \c SysRoot.
  /// \param SDK           The SDK. On Darwin, the last component of the sysroot.
  /// \param SDKLen        The length of the C string passed to \c SDK.
  LLVMMetadataRef LLVMDIBuilderCreateCompileUnit(
    LLVMDIBuilderRef Builder,
    int Lang,
    LLVMMetadataRef FileRef,
    ffi.Pointer<ffi.Char> Producer,
    int ProducerLen,
    int isOptimized,
    ffi.Pointer<ffi.Char> Flags,
    int FlagsLen,
    int RuntimeVer,
    ffi.Pointer<ffi.Char> SplitName,
    int SplitNameLen,
    int Kind,
    int DWOId,
    int SplitDebugInlining,
    int DebugInfoForProfiling,
    ffi.Pointer<ffi.Char> SysRoot,
    int SysRootLen,
    ffi.Pointer<ffi.Char> SDK,
    int SDKLen,
  ) {
    return _LLVMDIBuilderCreateCompileUnit(
      Builder,
      Lang,
      FileRef,
      Producer,
      ProducerLen,
      isOptimized,
      Flags,
      FlagsLen,
      RuntimeVer,
      SplitName,
      SplitNameLen,
      Kind,
      DWOId,
      SplitDebugInlining,
      DebugInfoForProfiling,
      SysRoot,
      SysRootLen,
      SDK,
      SDKLen,
    );
  }

  late final _LLVMDIBuilderCreateCompileUnitPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.Int32,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMBool,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Int32,
              ffi.UnsignedInt,
              LLVMBool,
              LLVMBool,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMDIBuilderCreateCompileUnit');
  late final _LLVMDIBuilderCreateCompileUnit =
      _LLVMDIBuilderCreateCompileUnitPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              int,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int)>();

  /// Create a file descriptor to hold debugging information for a file.
  /// \param Builder      The \c DIBuilder.
  /// \param Filename     File name.
  /// \param FilenameLen  The length of the C string passed to \c Filename.
  /// \param Directory    Directory.
  /// \param DirectoryLen The length of the C string passed to \c Directory.
  LLVMMetadataRef LLVMDIBuilderCreateFile(
    LLVMDIBuilderRef Builder,
    ffi.Pointer<ffi.Char> Filename,
    int FilenameLen,
    ffi.Pointer<ffi.Char> Directory,
    int DirectoryLen,
  ) {
    return _LLVMDIBuilderCreateFile(
      Builder,
      Filename,
      FilenameLen,
      Directory,
      DirectoryLen,
    );
  }

  late final _LLVMDIBuilderCreateFilePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMDIBuilderCreateFile');
  late final _LLVMDIBuilderCreateFile = _LLVMDIBuilderCreateFilePtr.asFunction<
      LLVMMetadataRef Function(LLVMDIBuilderRef, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int)>();

  /// Creates a new descriptor for a module with the specified parent scope.
  /// \param Builder         The \c DIBuilder.
  /// \param ParentScope     The parent scope containing this module declaration.
  /// \param Name            Module name.
  /// \param NameLen         The length of the C string passed to \c Name.
  /// \param ConfigMacros    A space-separated shell-quoted list of -D macro
  /// definitions as they would appear on a command line.
  /// \param ConfigMacrosLen The length of the C string passed to \c ConfigMacros.
  /// \param IncludePath     The path to the module map file.
  /// \param IncludePathLen  The length of the C string passed to \c IncludePath.
  /// \param APINotesFile    The path to an API notes file for the module.
  /// \param APINotesFileLen The length of the C string passed to \c APINotestFile.
  LLVMMetadataRef LLVMDIBuilderCreateModule(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef ParentScope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    ffi.Pointer<ffi.Char> ConfigMacros,
    int ConfigMacrosLen,
    ffi.Pointer<ffi.Char> IncludePath,
    int IncludePathLen,
    ffi.Pointer<ffi.Char> APINotesFile,
    int APINotesFileLen,
  ) {
    return _LLVMDIBuilderCreateModule(
      Builder,
      ParentScope,
      Name,
      NameLen,
      ConfigMacros,
      ConfigMacrosLen,
      IncludePath,
      IncludePathLen,
      APINotesFile,
      APINotesFileLen,
    );
  }

  late final _LLVMDIBuilderCreateModulePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMDIBuilderCreateModule');
  late final _LLVMDIBuilderCreateModule =
      _LLVMDIBuilderCreateModulePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int)>();

  /// Creates a new descriptor for a namespace with the specified parent scope.
  /// \param Builder          The \c DIBuilder.
  /// \param ParentScope      The parent scope containing this module declaration.
  /// \param Name             NameSpace name.
  /// \param NameLen          The length of the C string passed to \c Name.
  /// \param ExportSymbols    Whether or not the namespace exports symbols, e.g.
  /// this is true of C++ inline namespaces.
  LLVMMetadataRef LLVMDIBuilderCreateNameSpace(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef ParentScope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    int ExportSymbols,
  ) {
    return _LLVMDIBuilderCreateNameSpace(
      Builder,
      ParentScope,
      Name,
      NameLen,
      ExportSymbols,
    );
  }

  late final _LLVMDIBuilderCreateNameSpacePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMBool)>>('LLVMDIBuilderCreateNameSpace');
  late final _LLVMDIBuilderCreateNameSpace =
      _LLVMDIBuilderCreateNameSpacePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, LLVMMetadataRef,
              ffi.Pointer<ffi.Char>, int, int)>();

  /// Create a new descriptor for the specified subprogram.
  /// \param Builder         The \c DIBuilder.
  /// \param Scope           Function scope.
  /// \param Name            Function name.
  /// \param NameLen         Length of enumeration name.
  /// \param LinkageName     Mangled function name.
  /// \param LinkageNameLen  Length of linkage name.
  /// \param File            File where this variable is defined.
  /// \param LineNo          Line number.
  /// \param Ty              Function type.
  /// \param IsLocalToUnit   True if this function is not externally visible.
  /// \param IsDefinition    True if this is a function definition.
  /// \param ScopeLine       Set to the beginning of the scope this starts
  /// \param Flags           E.g.: \c LLVMDIFlagLValueReference. These flags are
  /// used to emit dwarf attributes.
  /// \param IsOptimized     True if optimization is ON.
  LLVMMetadataRef LLVMDIBuilderCreateFunction(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    ffi.Pointer<ffi.Char> LinkageName,
    int LinkageNameLen,
    LLVMMetadataRef File,
    int LineNo,
    LLVMMetadataRef Ty,
    int IsLocalToUnit,
    int IsDefinition,
    int ScopeLine,
    int Flags,
    int IsOptimized,
  ) {
    return _LLVMDIBuilderCreateFunction(
      Builder,
      Scope,
      Name,
      NameLen,
      LinkageName,
      LinkageNameLen,
      File,
      LineNo,
      Ty,
      IsLocalToUnit,
      IsDefinition,
      ScopeLine,
      Flags,
      IsOptimized,
    );
  }

  late final _LLVMDIBuilderCreateFunctionPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              LLVMMetadataRef,
              LLVMBool,
              LLVMBool,
              ffi.UnsignedInt,
              ffi.Int32,
              LLVMBool)>>('LLVMDIBuilderCreateFunction');
  late final _LLVMDIBuilderCreateFunction =
      _LLVMDIBuilderCreateFunctionPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              LLVMMetadataRef,
              int,
              int,
              int,
              int,
              int)>();

  /// Create a descriptor for a lexical block with the specified parent context.
  /// \param Builder      The \c DIBuilder.
  /// \param Scope        Parent lexical block.
  /// \param File         Source file.
  /// \param Line         The line in the source file.
  /// \param Column       The column in the source file.
  LLVMMetadataRef LLVMDIBuilderCreateLexicalBlock(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    LLVMMetadataRef File,
    int Line,
    int Column,
  ) {
    return _LLVMDIBuilderCreateLexicalBlock(
      Builder,
      Scope,
      File,
      Line,
      Column,
    );
  }

  late final _LLVMDIBuilderCreateLexicalBlockPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('LLVMDIBuilderCreateLexicalBlock');
  late final _LLVMDIBuilderCreateLexicalBlock =
      _LLVMDIBuilderCreateLexicalBlockPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef, LLVMMetadataRef, LLVMMetadataRef, int, int)>();

  /// Create a descriptor for a lexical block with a new file attached.
  /// \param Builder        The \c DIBuilder.
  /// \param Scope          Lexical block.
  /// \param File           Source file.
  /// \param Discriminator  DWARF path discriminator value.
  LLVMMetadataRef LLVMDIBuilderCreateLexicalBlockFile(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    LLVMMetadataRef File,
    int Discriminator,
  ) {
    return _LLVMDIBuilderCreateLexicalBlockFile(
      Builder,
      Scope,
      File,
      Discriminator,
    );
  }

  late final _LLVMDIBuilderCreateLexicalBlockFilePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              ffi.UnsignedInt)>>('LLVMDIBuilderCreateLexicalBlockFile');
  late final _LLVMDIBuilderCreateLexicalBlockFile =
      _LLVMDIBuilderCreateLexicalBlockFilePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef, LLVMMetadataRef, LLVMMetadataRef, int)>();

  /// Create a descriptor for an imported namespace. Suitable for e.g. C++
  /// using declarations.
  /// \param Builder    The \c DIBuilder.
  /// \param Scope      The scope this module is imported into
  /// \param File       File where the declaration is located.
  /// \param Line       Line number of the declaration.
  LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromNamespace(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    LLVMMetadataRef NS,
    LLVMMetadataRef File,
    int Line,
  ) {
    return _LLVMDIBuilderCreateImportedModuleFromNamespace(
      Builder,
      Scope,
      NS,
      File,
      Line,
    );
  }

  late final _LLVMDIBuilderCreateImportedModuleFromNamespacePtr = _lookup<
          ffi.NativeFunction<
              LLVMMetadataRef Function(LLVMDIBuilderRef, LLVMMetadataRef,
                  LLVMMetadataRef, LLVMMetadataRef, ffi.UnsignedInt)>>(
      'LLVMDIBuilderCreateImportedModuleFromNamespace');
  late final _LLVMDIBuilderCreateImportedModuleFromNamespace =
      _LLVMDIBuilderCreateImportedModuleFromNamespacePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, LLVMMetadataRef,
              LLVMMetadataRef, LLVMMetadataRef, int)>();

  /// Create a descriptor for an imported module that aliases another
  /// imported entity descriptor.
  /// \param Builder        The \c DIBuilder.
  /// \param Scope          The scope this module is imported into
  /// \param ImportedEntity Previous imported entity to alias.
  /// \param File           File where the declaration is located.
  /// \param Line           Line number of the declaration.
  /// \param Elements       Renamed elements.
  /// \param NumElements    Number of renamed elements.
  LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromAlias(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    LLVMMetadataRef ImportedEntity,
    LLVMMetadataRef File,
    int Line,
    ffi.Pointer<LLVMMetadataRef> Elements,
    int NumElements,
  ) {
    return _LLVMDIBuilderCreateImportedModuleFromAlias(
      Builder,
      Scope,
      ImportedEntity,
      File,
      Line,
      Elements,
      NumElements,
    );
  }

  late final _LLVMDIBuilderCreateImportedModuleFromAliasPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.Pointer<LLVMMetadataRef>,
              ffi.UnsignedInt)>>('LLVMDIBuilderCreateImportedModuleFromAlias');
  late final _LLVMDIBuilderCreateImportedModuleFromAlias =
      _LLVMDIBuilderCreateImportedModuleFromAliasPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              int,
              ffi.Pointer<LLVMMetadataRef>,
              int)>();

  /// Create a descriptor for an imported module.
  /// \param Builder        The \c DIBuilder.
  /// \param Scope          The scope this module is imported into
  /// \param M              The module being imported here
  /// \param File           File where the declaration is located.
  /// \param Line           Line number of the declaration.
  /// \param Elements       Renamed elements.
  /// \param NumElements    Number of renamed elements.
  LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromModule(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    LLVMMetadataRef M,
    LLVMMetadataRef File,
    int Line,
    ffi.Pointer<LLVMMetadataRef> Elements,
    int NumElements,
  ) {
    return _LLVMDIBuilderCreateImportedModuleFromModule(
      Builder,
      Scope,
      M,
      File,
      Line,
      Elements,
      NumElements,
    );
  }

  late final _LLVMDIBuilderCreateImportedModuleFromModulePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.Pointer<LLVMMetadataRef>,
              ffi.UnsignedInt)>>('LLVMDIBuilderCreateImportedModuleFromModule');
  late final _LLVMDIBuilderCreateImportedModuleFromModule =
      _LLVMDIBuilderCreateImportedModuleFromModulePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              int,
              ffi.Pointer<LLVMMetadataRef>,
              int)>();

  /// Create a descriptor for an imported function, type, or variable.  Suitable
  /// for e.g. FORTRAN-style USE declarations.
  /// \param Builder        The DIBuilder.
  /// \param Scope          The scope this module is imported into.
  /// \param Decl           The declaration (or definition) of a function, type,
  /// or variable.
  /// \param File           File where the declaration is located.
  /// \param Line           Line number of the declaration.
  /// \param Name           A name that uniquely identifies this imported
  /// declaration.
  /// \param NameLen        The length of the C string passed to \c Name.
  /// \param Elements       Renamed elements.
  /// \param NumElements    Number of renamed elements.
  LLVMMetadataRef LLVMDIBuilderCreateImportedDeclaration(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    LLVMMetadataRef Decl,
    LLVMMetadataRef File,
    int Line,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    ffi.Pointer<LLVMMetadataRef> Elements,
    int NumElements,
  ) {
    return _LLVMDIBuilderCreateImportedDeclaration(
      Builder,
      Scope,
      Decl,
      File,
      Line,
      Name,
      NameLen,
      Elements,
      NumElements,
    );
  }

  late final _LLVMDIBuilderCreateImportedDeclarationPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<LLVMMetadataRef>,
              ffi.UnsignedInt)>>('LLVMDIBuilderCreateImportedDeclaration');
  late final _LLVMDIBuilderCreateImportedDeclaration =
      _LLVMDIBuilderCreateImportedDeclarationPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<LLVMMetadataRef>,
              int)>();

  /// Creates a new DebugLocation that describes a source location.
  /// \param Line The line in the source file.
  /// \param Column The column in the source file.
  /// \param Scope The scope in which the location resides.
  /// \param InlinedAt The scope where this location was inlined, if at all.
  /// (optional).
  /// \note If the item to which this location is attached cannot be
  /// attributed to a source line, pass 0 for the line and column.
  LLVMMetadataRef LLVMDIBuilderCreateDebugLocation(
    LLVMContextRef Ctx,
    int Line,
    int Column,
    LLVMMetadataRef Scope,
    LLVMMetadataRef InlinedAt,
  ) {
    return _LLVMDIBuilderCreateDebugLocation(
      Ctx,
      Line,
      Column,
      Scope,
      InlinedAt,
    );
  }

  late final _LLVMDIBuilderCreateDebugLocationPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMContextRef,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              LLVMMetadataRef,
              LLVMMetadataRef)>>('LLVMDIBuilderCreateDebugLocation');
  late final _LLVMDIBuilderCreateDebugLocation =
      _LLVMDIBuilderCreateDebugLocationPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMContextRef, int, int, LLVMMetadataRef, LLVMMetadataRef)>();

  /// Get the line number of this debug location.
  /// \param Location     The debug location.
  ///
  /// @see DILocation::getLine()
  int LLVMDILocationGetLine(
    LLVMMetadataRef Location,
  ) {
    return _LLVMDILocationGetLine(
      Location,
    );
  }

  late final _LLVMDILocationGetLinePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMMetadataRef)>>(
          'LLVMDILocationGetLine');
  late final _LLVMDILocationGetLine =
      _LLVMDILocationGetLinePtr.asFunction<int Function(LLVMMetadataRef)>();

  /// Get the column number of this debug location.
  /// \param Location     The debug location.
  ///
  /// @see DILocation::getColumn()
  int LLVMDILocationGetColumn(
    LLVMMetadataRef Location,
  ) {
    return _LLVMDILocationGetColumn(
      Location,
    );
  }

  late final _LLVMDILocationGetColumnPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMMetadataRef)>>(
          'LLVMDILocationGetColumn');
  late final _LLVMDILocationGetColumn =
      _LLVMDILocationGetColumnPtr.asFunction<int Function(LLVMMetadataRef)>();

  /// Get the local scope associated with this debug location.
  /// \param Location     The debug location.
  ///
  /// @see DILocation::getScope()
  LLVMMetadataRef LLVMDILocationGetScope(
    LLVMMetadataRef Location,
  ) {
    return _LLVMDILocationGetScope(
      Location,
    );
  }

  late final _LLVMDILocationGetScopePtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMMetadataRef)>>(
          'LLVMDILocationGetScope');
  late final _LLVMDILocationGetScope = _LLVMDILocationGetScopePtr.asFunction<
      LLVMMetadataRef Function(LLVMMetadataRef)>();

  /// Get the "inline at" location associated with this debug location.
  /// \param Location     The debug location.
  ///
  /// @see DILocation::getInlinedAt()
  LLVMMetadataRef LLVMDILocationGetInlinedAt(
    LLVMMetadataRef Location,
  ) {
    return _LLVMDILocationGetInlinedAt(
      Location,
    );
  }

  late final _LLVMDILocationGetInlinedAtPtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMMetadataRef)>>(
          'LLVMDILocationGetInlinedAt');
  late final _LLVMDILocationGetInlinedAt = _LLVMDILocationGetInlinedAtPtr
      .asFunction<LLVMMetadataRef Function(LLVMMetadataRef)>();

  /// Get the metadata of the file associated with a given scope.
  /// \param Scope     The scope object.
  ///
  /// @see DIScope::getFile()
  LLVMMetadataRef LLVMDIScopeGetFile(
    LLVMMetadataRef Scope,
  ) {
    return _LLVMDIScopeGetFile(
      Scope,
    );
  }

  late final _LLVMDIScopeGetFilePtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMMetadataRef)>>(
          'LLVMDIScopeGetFile');
  late final _LLVMDIScopeGetFile = _LLVMDIScopeGetFilePtr.asFunction<
      LLVMMetadataRef Function(LLVMMetadataRef)>();

  /// Get the directory of a given file.
  /// \param File     The file object.
  /// \param Len      The length of the returned string.
  ///
  /// @see DIFile::getDirectory()
  ffi.Pointer<ffi.Char> LLVMDIFileGetDirectory(
    LLVMMetadataRef File,
    ffi.Pointer<ffi.UnsignedInt> Len,
  ) {
    return _LLVMDIFileGetDirectory(
      File,
      Len,
    );
  }

  late final _LLVMDIFileGetDirectoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMMetadataRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMDIFileGetDirectory');
  late final _LLVMDIFileGetDirectory = _LLVMDIFileGetDirectoryPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          LLVMMetadataRef, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Get the name of a given file.
  /// \param File     The file object.
  /// \param Len      The length of the returned string.
  ///
  /// @see DIFile::getFilename()
  ffi.Pointer<ffi.Char> LLVMDIFileGetFilename(
    LLVMMetadataRef File,
    ffi.Pointer<ffi.UnsignedInt> Len,
  ) {
    return _LLVMDIFileGetFilename(
      File,
      Len,
    );
  }

  late final _LLVMDIFileGetFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMMetadataRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMDIFileGetFilename');
  late final _LLVMDIFileGetFilename = _LLVMDIFileGetFilenamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          LLVMMetadataRef, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Get the source of a given file.
  /// \param File     The file object.
  /// \param Len      The length of the returned string.
  ///
  /// @see DIFile::getSource()
  ffi.Pointer<ffi.Char> LLVMDIFileGetSource(
    LLVMMetadataRef File,
    ffi.Pointer<ffi.UnsignedInt> Len,
  ) {
    return _LLVMDIFileGetSource(
      File,
      Len,
    );
  }

  late final _LLVMDIFileGetSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMMetadataRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMDIFileGetSource');
  late final _LLVMDIFileGetSource = _LLVMDIFileGetSourcePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          LLVMMetadataRef, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Create a type array.
  /// \param Builder        The DIBuilder.
  /// \param Data           The type elements.
  /// \param NumElements    Number of type elements.
  LLVMMetadataRef LLVMDIBuilderGetOrCreateTypeArray(
    LLVMDIBuilderRef Builder,
    ffi.Pointer<LLVMMetadataRef> Data,
    int NumElements,
  ) {
    return _LLVMDIBuilderGetOrCreateTypeArray(
      Builder,
      Data,
      NumElements,
    );
  }

  late final _LLVMDIBuilderGetOrCreateTypeArrayPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.Pointer<LLVMMetadataRef>,
              ffi.Size)>>('LLVMDIBuilderGetOrCreateTypeArray');
  late final _LLVMDIBuilderGetOrCreateTypeArray =
      _LLVMDIBuilderGetOrCreateTypeArrayPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef, ffi.Pointer<LLVMMetadataRef>, int)>();

  /// Create subroutine type.
  /// \param Builder        The DIBuilder.
  /// \param File            The file in which the subroutine resides.
  /// \param ParameterTypes  An array of subroutine parameter types. This
  /// includes return type at 0th index.
  /// \param NumParameterTypes The number of parameter types in \c ParameterTypes
  /// \param Flags           E.g.: \c LLVMDIFlagLValueReference.
  /// These flags are used to emit dwarf attributes.
  LLVMMetadataRef LLVMDIBuilderCreateSubroutineType(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef File,
    ffi.Pointer<LLVMMetadataRef> ParameterTypes,
    int NumParameterTypes,
    int Flags,
  ) {
    return _LLVMDIBuilderCreateSubroutineType(
      Builder,
      File,
      ParameterTypes,
      NumParameterTypes,
      Flags,
    );
  }

  late final _LLVMDIBuilderCreateSubroutineTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<LLVMMetadataRef>,
              ffi.UnsignedInt,
              ffi.Int32)>>('LLVMDIBuilderCreateSubroutineType');
  late final _LLVMDIBuilderCreateSubroutineType =
      _LLVMDIBuilderCreateSubroutineTypePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, LLVMMetadataRef,
              ffi.Pointer<LLVMMetadataRef>, int, int)>();

  /// Create debugging information entry for a macro.
  /// @param Builder         The DIBuilder.
  /// @param ParentMacroFile Macro parent (could be NULL).
  /// @param Line            Source line number where the macro is defined.
  /// @param RecordType      DW_MACINFO_define or DW_MACINFO_undef.
  /// @param Name            Macro name.
  /// @param NameLen         Macro name length.
  /// @param Value           Macro value.
  /// @param ValueLen        Macro value length.
  LLVMMetadataRef LLVMDIBuilderCreateMacro(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef ParentMacroFile,
    int Line,
    int RecordType,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    ffi.Pointer<ffi.Char> Value,
    int ValueLen,
  ) {
    return _LLVMDIBuilderCreateMacro(
      Builder,
      ParentMacroFile,
      Line,
      RecordType,
      Name,
      NameLen,
      Value,
      ValueLen,
    );
  }

  late final _LLVMDIBuilderCreateMacroPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMDIBuilderCreateMacro');
  late final _LLVMDIBuilderCreateMacro =
      _LLVMDIBuilderCreateMacroPtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, LLVMMetadataRef, int, int,
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  /// Create debugging information temporary entry for a macro file.
  /// List of macro node direct children will be calculated by DIBuilder,
  /// using the \p ParentMacroFile relationship.
  /// @param Builder         The DIBuilder.
  /// @param ParentMacroFile Macro parent (could be NULL).
  /// @param Line            Source line number where the macro file is included.
  /// @param File            File descriptor containing the name of the macro file.
  LLVMMetadataRef LLVMDIBuilderCreateTempMacroFile(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef ParentMacroFile,
    int Line,
    LLVMMetadataRef File,
  ) {
    return _LLVMDIBuilderCreateTempMacroFile(
      Builder,
      ParentMacroFile,
      Line,
      File,
    );
  }

  late final _LLVMDIBuilderCreateTempMacroFilePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              LLVMMetadataRef)>>('LLVMDIBuilderCreateTempMacroFile');
  late final _LLVMDIBuilderCreateTempMacroFile =
      _LLVMDIBuilderCreateTempMacroFilePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef, LLVMMetadataRef, int, LLVMMetadataRef)>();

  /// Create debugging information entry for an enumerator.
  /// @param Builder        The DIBuilder.
  /// @param Name           Enumerator name.
  /// @param NameLen        Length of enumerator name.
  /// @param Value          Enumerator value.
  /// @param IsUnsigned     True if the value is unsigned.
  LLVMMetadataRef LLVMDIBuilderCreateEnumerator(
    LLVMDIBuilderRef Builder,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    int Value,
    int IsUnsigned,
  ) {
    return _LLVMDIBuilderCreateEnumerator(
      Builder,
      Name,
      NameLen,
      Value,
      IsUnsigned,
    );
  }

  late final _LLVMDIBuilderCreateEnumeratorPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Int64, LLVMBool)>>('LLVMDIBuilderCreateEnumerator');
  late final _LLVMDIBuilderCreateEnumerator =
      _LLVMDIBuilderCreateEnumeratorPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef, ffi.Pointer<ffi.Char>, int, int, int)>();

  /// Create debugging information entry for an enumeration.
  /// \param Builder        The DIBuilder.
  /// \param Scope          Scope in which this enumeration is defined.
  /// \param Name           Enumeration name.
  /// \param NameLen        Length of enumeration name.
  /// \param File           File where this member is defined.
  /// \param LineNumber     Line number.
  /// \param SizeInBits     Member size.
  /// \param AlignInBits    Member alignment.
  /// \param Elements       Enumeration elements.
  /// \param NumElements    Number of enumeration elements.
  /// \param ClassTy        Underlying type of a C++11/ObjC fixed enum.
  LLVMMetadataRef LLVMDIBuilderCreateEnumerationType(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef File,
    int LineNumber,
    int SizeInBits,
    int AlignInBits,
    ffi.Pointer<LLVMMetadataRef> Elements,
    int NumElements,
    LLVMMetadataRef ClassTy,
  ) {
    return _LLVMDIBuilderCreateEnumerationType(
      Builder,
      Scope,
      Name,
      NameLen,
      File,
      LineNumber,
      SizeInBits,
      AlignInBits,
      Elements,
      NumElements,
      ClassTy,
    );
  }

  late final _LLVMDIBuilderCreateEnumerationTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Pointer<LLVMMetadataRef>,
              ffi.UnsignedInt,
              LLVMMetadataRef)>>('LLVMDIBuilderCreateEnumerationType');
  late final _LLVMDIBuilderCreateEnumerationType =
      _LLVMDIBuilderCreateEnumerationTypePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              int,
              int,
              ffi.Pointer<LLVMMetadataRef>,
              int,
              LLVMMetadataRef)>();

  /// Create debugging information entry for a union.
  /// \param Builder      The DIBuilder.
  /// \param Scope        Scope in which this union is defined.
  /// \param Name         Union name.
  /// \param NameLen      Length of union name.
  /// \param File         File where this member is defined.
  /// \param LineNumber   Line number.
  /// \param SizeInBits   Member size.
  /// \param AlignInBits  Member alignment.
  /// \param Flags        Flags to encode member attribute, e.g. private
  /// \param Elements     Union elements.
  /// \param NumElements  Number of union elements.
  /// \param RunTimeLang  Optional parameter, Objective-C runtime version.
  /// \param UniqueId     A unique identifier for the union.
  /// \param UniqueIdLen  Length of unique identifier.
  LLVMMetadataRef LLVMDIBuilderCreateUnionType(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef File,
    int LineNumber,
    int SizeInBits,
    int AlignInBits,
    int Flags,
    ffi.Pointer<LLVMMetadataRef> Elements,
    int NumElements,
    int RunTimeLang,
    ffi.Pointer<ffi.Char> UniqueId,
    int UniqueIdLen,
  ) {
    return _LLVMDIBuilderCreateUnionType(
      Builder,
      Scope,
      Name,
      NameLen,
      File,
      LineNumber,
      SizeInBits,
      AlignInBits,
      Flags,
      Elements,
      NumElements,
      RunTimeLang,
      UniqueId,
      UniqueIdLen,
    );
  }

  late final _LLVMDIBuilderCreateUnionTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Int32,
              ffi.Pointer<LLVMMetadataRef>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMDIBuilderCreateUnionType');
  late final _LLVMDIBuilderCreateUnionType =
      _LLVMDIBuilderCreateUnionTypePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              int,
              int,
              int,
              ffi.Pointer<LLVMMetadataRef>,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              int)>();

  /// Create debugging information entry for an array.
  /// \param Builder      The DIBuilder.
  /// \param Size         Array size.
  /// \param AlignInBits  Alignment.
  /// \param Ty           Element type.
  /// \param Subscripts   Subscripts.
  /// \param NumSubscripts Number of subscripts.
  LLVMMetadataRef LLVMDIBuilderCreateArrayType(
    LLVMDIBuilderRef Builder,
    int Size,
    int AlignInBits,
    LLVMMetadataRef Ty,
    ffi.Pointer<LLVMMetadataRef> Subscripts,
    int NumSubscripts,
  ) {
    return _LLVMDIBuilderCreateArrayType(
      Builder,
      Size,
      AlignInBits,
      Ty,
      Subscripts,
      NumSubscripts,
    );
  }

  late final _LLVMDIBuilderCreateArrayTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.Uint64,
              ffi.Uint32,
              LLVMMetadataRef,
              ffi.Pointer<LLVMMetadataRef>,
              ffi.UnsignedInt)>>('LLVMDIBuilderCreateArrayType');
  late final _LLVMDIBuilderCreateArrayType =
      _LLVMDIBuilderCreateArrayTypePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, int, int, LLVMMetadataRef,
              ffi.Pointer<LLVMMetadataRef>, int)>();

  /// Create debugging information entry for a vector type.
  /// \param Builder      The DIBuilder.
  /// \param Size         Vector size.
  /// \param AlignInBits  Alignment.
  /// \param Ty           Element type.
  /// \param Subscripts   Subscripts.
  /// \param NumSubscripts Number of subscripts.
  LLVMMetadataRef LLVMDIBuilderCreateVectorType(
    LLVMDIBuilderRef Builder,
    int Size,
    int AlignInBits,
    LLVMMetadataRef Ty,
    ffi.Pointer<LLVMMetadataRef> Subscripts,
    int NumSubscripts,
  ) {
    return _LLVMDIBuilderCreateVectorType(
      Builder,
      Size,
      AlignInBits,
      Ty,
      Subscripts,
      NumSubscripts,
    );
  }

  late final _LLVMDIBuilderCreateVectorTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.Uint64,
              ffi.Uint32,
              LLVMMetadataRef,
              ffi.Pointer<LLVMMetadataRef>,
              ffi.UnsignedInt)>>('LLVMDIBuilderCreateVectorType');
  late final _LLVMDIBuilderCreateVectorType =
      _LLVMDIBuilderCreateVectorTypePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, int, int, LLVMMetadataRef,
              ffi.Pointer<LLVMMetadataRef>, int)>();

  /// Create a DWARF unspecified type.
  /// \param Builder   The DIBuilder.
  /// \param Name      The unspecified type's name.
  /// \param NameLen   Length of type name.
  LLVMMetadataRef LLVMDIBuilderCreateUnspecifiedType(
    LLVMDIBuilderRef Builder,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMDIBuilderCreateUnspecifiedType(
      Builder,
      Name,
      NameLen,
    );
  }

  late final _LLVMDIBuilderCreateUnspecifiedTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMDIBuilderCreateUnspecifiedType');
  late final _LLVMDIBuilderCreateUnspecifiedType =
      _LLVMDIBuilderCreateUnspecifiedTypePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef, ffi.Pointer<ffi.Char>, int)>();

  /// Create debugging information entry for a basic
  /// type.
  /// \param Builder     The DIBuilder.
  /// \param Name        Type name.
  /// \param NameLen     Length of type name.
  /// \param SizeInBits  Size of the type.
  /// \param Encoding    DWARF encoding code, e.g. \c LLVMDWARFTypeEncoding_float.
  /// \param Flags       Flags to encode optional attribute like endianity
  LLVMMetadataRef LLVMDIBuilderCreateBasicType(
    LLVMDIBuilderRef Builder,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    int SizeInBits,
    int Encoding,
    int Flags,
  ) {
    return _LLVMDIBuilderCreateBasicType(
      Builder,
      Name,
      NameLen,
      SizeInBits,
      Encoding,
      Flags,
    );
  }

  late final _LLVMDIBuilderCreateBasicTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Uint64,
              LLVMDWARFTypeEncoding,
              ffi.Int32)>>('LLVMDIBuilderCreateBasicType');
  late final _LLVMDIBuilderCreateBasicType =
      _LLVMDIBuilderCreateBasicTypePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef, ffi.Pointer<ffi.Char>, int, int, int, int)>();

  /// Create debugging information entry for a pointer.
  /// \param Builder     The DIBuilder.
  /// \param PointeeTy         Type pointed by this pointer.
  /// \param SizeInBits        Size.
  /// \param AlignInBits       Alignment. (optional, pass 0 to ignore)
  /// \param AddressSpace      DWARF address space. (optional, pass 0 to ignore)
  /// \param Name              Pointer type name. (optional)
  /// \param NameLen           Length of pointer type name. (optional)
  LLVMMetadataRef LLVMDIBuilderCreatePointerType(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef PointeeTy,
    int SizeInBits,
    int AlignInBits,
    int AddressSpace,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMDIBuilderCreatePointerType(
      Builder,
      PointeeTy,
      SizeInBits,
      AlignInBits,
      AddressSpace,
      Name,
      NameLen,
    );
  }

  late final _LLVMDIBuilderCreatePointerTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Uint64,
              ffi.Uint32,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMDIBuilderCreatePointerType');
  late final _LLVMDIBuilderCreatePointerType =
      _LLVMDIBuilderCreatePointerTypePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, LLVMMetadataRef, int, int,
              int, ffi.Pointer<ffi.Char>, int)>();

  /// Create debugging information entry for a struct.
  /// \param Builder     The DIBuilder.
  /// \param Scope        Scope in which this struct is defined.
  /// \param Name         Struct name.
  /// \param NameLen      Struct name length.
  /// \param File         File where this member is defined.
  /// \param LineNumber   Line number.
  /// \param SizeInBits   Member size.
  /// \param AlignInBits  Member alignment.
  /// \param Flags        Flags to encode member attribute, e.g. private
  /// \param Elements     Struct elements.
  /// \param NumElements  Number of struct elements.
  /// \param RunTimeLang  Optional parameter, Objective-C runtime version.
  /// \param VTableHolder The object containing the vtable for the struct.
  /// \param UniqueId     A unique identifier for the struct.
  /// \param UniqueIdLen  Length of the unique identifier for the struct.
  LLVMMetadataRef LLVMDIBuilderCreateStructType(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef File,
    int LineNumber,
    int SizeInBits,
    int AlignInBits,
    int Flags,
    LLVMMetadataRef DerivedFrom,
    ffi.Pointer<LLVMMetadataRef> Elements,
    int NumElements,
    int RunTimeLang,
    LLVMMetadataRef VTableHolder,
    ffi.Pointer<ffi.Char> UniqueId,
    int UniqueIdLen,
  ) {
    return _LLVMDIBuilderCreateStructType(
      Builder,
      Scope,
      Name,
      NameLen,
      File,
      LineNumber,
      SizeInBits,
      AlignInBits,
      Flags,
      DerivedFrom,
      Elements,
      NumElements,
      RunTimeLang,
      VTableHolder,
      UniqueId,
      UniqueIdLen,
    );
  }

  late final _LLVMDIBuilderCreateStructTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Int32,
              LLVMMetadataRef,
              ffi.Pointer<LLVMMetadataRef>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMDIBuilderCreateStructType');
  late final _LLVMDIBuilderCreateStructType =
      _LLVMDIBuilderCreateStructTypePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              int,
              int,
              int,
              LLVMMetadataRef,
              ffi.Pointer<LLVMMetadataRef>,
              int,
              int,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int)>();

  /// Create debugging information entry for a member.
  /// \param Builder      The DIBuilder.
  /// \param Scope        Member scope.
  /// \param Name         Member name.
  /// \param NameLen      Length of member name.
  /// \param File         File where this member is defined.
  /// \param LineNo       Line number.
  /// \param SizeInBits   Member size.
  /// \param AlignInBits  Member alignment.
  /// \param OffsetInBits Member offset.
  /// \param Flags        Flags to encode member attribute, e.g. private
  /// \param Ty           Parent type.
  LLVMMetadataRef LLVMDIBuilderCreateMemberType(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef File,
    int LineNo,
    int SizeInBits,
    int AlignInBits,
    int OffsetInBits,
    int Flags,
    LLVMMetadataRef Ty,
  ) {
    return _LLVMDIBuilderCreateMemberType(
      Builder,
      Scope,
      Name,
      NameLen,
      File,
      LineNo,
      SizeInBits,
      AlignInBits,
      OffsetInBits,
      Flags,
      Ty,
    );
  }

  late final _LLVMDIBuilderCreateMemberTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Int32,
              LLVMMetadataRef)>>('LLVMDIBuilderCreateMemberType');
  late final _LLVMDIBuilderCreateMemberType =
      _LLVMDIBuilderCreateMemberTypePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              int,
              int,
              int,
              int,
              LLVMMetadataRef)>();

  /// Create debugging information entry for a
  /// C++ static data member.
  /// \param Builder      The DIBuilder.
  /// \param Scope        Member scope.
  /// \param Name         Member name.
  /// \param NameLen      Length of member name.
  /// \param File         File where this member is declared.
  /// \param LineNumber   Line number.
  /// \param Type         Type of the static member.
  /// \param Flags        Flags to encode member attribute, e.g. private.
  /// \param ConstantVal  Const initializer of the member.
  /// \param AlignInBits  Member alignment.
  LLVMMetadataRef LLVMDIBuilderCreateStaticMemberType(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef File,
    int LineNumber,
    LLVMMetadataRef Type,
    int Flags,
    LLVMValueRef ConstantVal,
    int AlignInBits,
  ) {
    return _LLVMDIBuilderCreateStaticMemberType(
      Builder,
      Scope,
      Name,
      NameLen,
      File,
      LineNumber,
      Type,
      Flags,
      ConstantVal,
      AlignInBits,
    );
  }

  late final _LLVMDIBuilderCreateStaticMemberTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              LLVMMetadataRef,
              ffi.Int32,
              LLVMValueRef,
              ffi.Uint32)>>('LLVMDIBuilderCreateStaticMemberType');
  late final _LLVMDIBuilderCreateStaticMemberType =
      _LLVMDIBuilderCreateStaticMemberTypePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              LLVMMetadataRef,
              int,
              LLVMValueRef,
              int)>();

  /// Create debugging information entry for a pointer to member.
  /// \param Builder      The DIBuilder.
  /// \param PointeeType  Type pointed to by this pointer.
  /// \param ClassType    Type for which this pointer points to members of.
  /// \param SizeInBits   Size.
  /// \param AlignInBits  Alignment.
  /// \param Flags        Flags.
  LLVMMetadataRef LLVMDIBuilderCreateMemberPointerType(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef PointeeType,
    LLVMMetadataRef ClassType,
    int SizeInBits,
    int AlignInBits,
    int Flags,
  ) {
    return _LLVMDIBuilderCreateMemberPointerType(
      Builder,
      PointeeType,
      ClassType,
      SizeInBits,
      AlignInBits,
      Flags,
    );
  }

  late final _LLVMDIBuilderCreateMemberPointerTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Int32)>>('LLVMDIBuilderCreateMemberPointerType');
  late final _LLVMDIBuilderCreateMemberPointerType =
      _LLVMDIBuilderCreateMemberPointerTypePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, LLVMMetadataRef,
              LLVMMetadataRef, int, int, int)>();

  /// Create debugging information entry for Objective-C instance variable.
  /// \param Builder      The DIBuilder.
  /// \param Name         Member name.
  /// \param NameLen      The length of the C string passed to \c Name.
  /// \param File         File where this member is defined.
  /// \param LineNo       Line number.
  /// \param SizeInBits   Member size.
  /// \param AlignInBits  Member alignment.
  /// \param OffsetInBits Member offset.
  /// \param Flags        Flags to encode member attribute, e.g. private
  /// \param Ty           Parent type.
  /// \param PropertyNode Property associated with this ivar.
  LLVMMetadataRef LLVMDIBuilderCreateObjCIVar(
    LLVMDIBuilderRef Builder,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef File,
    int LineNo,
    int SizeInBits,
    int AlignInBits,
    int OffsetInBits,
    int Flags,
    LLVMMetadataRef Ty,
    LLVMMetadataRef PropertyNode,
  ) {
    return _LLVMDIBuilderCreateObjCIVar(
      Builder,
      Name,
      NameLen,
      File,
      LineNo,
      SizeInBits,
      AlignInBits,
      OffsetInBits,
      Flags,
      Ty,
      PropertyNode,
    );
  }

  late final _LLVMDIBuilderCreateObjCIVarPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Int32,
              LLVMMetadataRef,
              LLVMMetadataRef)>>('LLVMDIBuilderCreateObjCIVar');
  late final _LLVMDIBuilderCreateObjCIVar =
      _LLVMDIBuilderCreateObjCIVarPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              int,
              int,
              int,
              int,
              LLVMMetadataRef,
              LLVMMetadataRef)>();

  /// Create debugging information entry for Objective-C property.
  /// \param Builder            The DIBuilder.
  /// \param Name               Property name.
  /// \param NameLen            The length of the C string passed to \c Name.
  /// \param File               File where this property is defined.
  /// \param LineNo             Line number.
  /// \param GetterName         Name of the Objective C property getter selector.
  /// \param GetterNameLen      The length of the C string passed to \c GetterName.
  /// \param SetterName         Name of the Objective C property setter selector.
  /// \param SetterNameLen      The length of the C string passed to \c SetterName.
  /// \param PropertyAttributes Objective C property attributes.
  /// \param Ty                 Type.
  LLVMMetadataRef LLVMDIBuilderCreateObjCProperty(
    LLVMDIBuilderRef Builder,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef File,
    int LineNo,
    ffi.Pointer<ffi.Char> GetterName,
    int GetterNameLen,
    ffi.Pointer<ffi.Char> SetterName,
    int SetterNameLen,
    int PropertyAttributes,
    LLVMMetadataRef Ty,
  ) {
    return _LLVMDIBuilderCreateObjCProperty(
      Builder,
      Name,
      NameLen,
      File,
      LineNo,
      GetterName,
      GetterNameLen,
      SetterName,
      SetterNameLen,
      PropertyAttributes,
      Ty,
    );
  }

  late final _LLVMDIBuilderCreateObjCPropertyPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.UnsignedInt,
              LLVMMetadataRef)>>('LLVMDIBuilderCreateObjCProperty');
  late final _LLVMDIBuilderCreateObjCProperty =
      _LLVMDIBuilderCreateObjCPropertyPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              LLVMMetadataRef)>();

  /// Create a uniqued DIType* clone with FlagObjectPointer and FlagArtificial set.
  /// \param Builder   The DIBuilder.
  /// \param Type      The underlying type to which this pointer points.
  LLVMMetadataRef LLVMDIBuilderCreateObjectPointerType(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Type,
  ) {
    return _LLVMDIBuilderCreateObjectPointerType(
      Builder,
      Type,
    );
  }

  late final _LLVMDIBuilderCreateObjectPointerTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef,
              LLVMMetadataRef)>>('LLVMDIBuilderCreateObjectPointerType');
  late final _LLVMDIBuilderCreateObjectPointerType =
      _LLVMDIBuilderCreateObjectPointerTypePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, LLVMMetadataRef)>();

  /// Create debugging information entry for a qualified
  /// type, e.g. 'const int'.
  /// \param Builder     The DIBuilder.
  /// \param Tag         Tag identifying type,
  /// e.g. LLVMDWARFTypeQualifier_volatile_type
  /// \param Type        Base Type.
  LLVMMetadataRef LLVMDIBuilderCreateQualifiedType(
    LLVMDIBuilderRef Builder,
    int Tag,
    LLVMMetadataRef Type,
  ) {
    return _LLVMDIBuilderCreateQualifiedType(
      Builder,
      Tag,
      Type,
    );
  }

  late final _LLVMDIBuilderCreateQualifiedTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, ffi.UnsignedInt,
              LLVMMetadataRef)>>('LLVMDIBuilderCreateQualifiedType');
  late final _LLVMDIBuilderCreateQualifiedType =
      _LLVMDIBuilderCreateQualifiedTypePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, int, LLVMMetadataRef)>();

  /// Create debugging information entry for a c++
  /// style reference or rvalue reference type.
  /// \param Builder   The DIBuilder.
  /// \param Tag       Tag identifying type,
  /// \param Type      Base Type.
  LLVMMetadataRef LLVMDIBuilderCreateReferenceType(
    LLVMDIBuilderRef Builder,
    int Tag,
    LLVMMetadataRef Type,
  ) {
    return _LLVMDIBuilderCreateReferenceType(
      Builder,
      Tag,
      Type,
    );
  }

  late final _LLVMDIBuilderCreateReferenceTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, ffi.UnsignedInt,
              LLVMMetadataRef)>>('LLVMDIBuilderCreateReferenceType');
  late final _LLVMDIBuilderCreateReferenceType =
      _LLVMDIBuilderCreateReferenceTypePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, int, LLVMMetadataRef)>();

  /// Create C++11 nullptr type.
  /// \param Builder   The DIBuilder.
  LLVMMetadataRef LLVMDIBuilderCreateNullPtrType(
    LLVMDIBuilderRef Builder,
  ) {
    return _LLVMDIBuilderCreateNullPtrType(
      Builder,
    );
  }

  late final _LLVMDIBuilderCreateNullPtrTypePtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMDIBuilderRef)>>(
          'LLVMDIBuilderCreateNullPtrType');
  late final _LLVMDIBuilderCreateNullPtrType =
      _LLVMDIBuilderCreateNullPtrTypePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef)>();

  /// Create debugging information entry for a typedef.
  /// \param Builder    The DIBuilder.
  /// \param Type       Original type.
  /// \param Name       Typedef name.
  /// \param File       File where this type is defined.
  /// \param LineNo     Line number.
  /// \param Scope      The surrounding context for the typedef.
  LLVMMetadataRef LLVMDIBuilderCreateTypedef(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Type,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef File,
    int LineNo,
    LLVMMetadataRef Scope,
    int AlignInBits,
  ) {
    return _LLVMDIBuilderCreateTypedef(
      Builder,
      Type,
      Name,
      NameLen,
      File,
      LineNo,
      Scope,
      AlignInBits,
    );
  }

  late final _LLVMDIBuilderCreateTypedefPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              LLVMMetadataRef,
              ffi.Uint32)>>('LLVMDIBuilderCreateTypedef');
  late final _LLVMDIBuilderCreateTypedef =
      _LLVMDIBuilderCreateTypedefPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              LLVMMetadataRef,
              int)>();

  /// Create debugging information entry to establish inheritance relationship
  /// between two types.
  /// \param Builder       The DIBuilder.
  /// \param Ty            Original type.
  /// \param BaseTy        Base type. Ty is inherits from base.
  /// \param BaseOffset    Base offset.
  /// \param VBPtrOffset  Virtual base pointer offset.
  /// \param Flags         Flags to describe inheritance attribute, e.g. private
  LLVMMetadataRef LLVMDIBuilderCreateInheritance(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Ty,
    LLVMMetadataRef BaseTy,
    int BaseOffset,
    int VBPtrOffset,
    int Flags,
  ) {
    return _LLVMDIBuilderCreateInheritance(
      Builder,
      Ty,
      BaseTy,
      BaseOffset,
      VBPtrOffset,
      Flags,
    );
  }

  late final _LLVMDIBuilderCreateInheritancePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Int32)>>('LLVMDIBuilderCreateInheritance');
  late final _LLVMDIBuilderCreateInheritance =
      _LLVMDIBuilderCreateInheritancePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, LLVMMetadataRef,
              LLVMMetadataRef, int, int, int)>();

  /// Create a permanent forward-declared type.
  /// \param Builder             The DIBuilder.
  /// \param Tag                 A unique tag for this type.
  /// \param Name                Type name.
  /// \param NameLen             Length of type name.
  /// \param Scope               Type scope.
  /// \param File                File where this type is defined.
  /// \param Line                Line number where this type is defined.
  /// \param RuntimeLang         Indicates runtime version for languages like
  /// Objective-C.
  /// \param SizeInBits          Member size.
  /// \param AlignInBits         Member alignment.
  /// \param UniqueIdentifier    A unique identifier for the type.
  /// \param UniqueIdentifierLen Length of the unique identifier.
  LLVMMetadataRef LLVMDIBuilderCreateForwardDecl(
    LLVMDIBuilderRef Builder,
    int Tag,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef Scope,
    LLVMMetadataRef File,
    int Line,
    int RuntimeLang,
    int SizeInBits,
    int AlignInBits,
    ffi.Pointer<ffi.Char> UniqueIdentifier,
    int UniqueIdentifierLen,
  ) {
    return _LLVMDIBuilderCreateForwardDecl(
      Builder,
      Tag,
      Name,
      NameLen,
      Scope,
      File,
      Line,
      RuntimeLang,
      SizeInBits,
      AlignInBits,
      UniqueIdentifier,
      UniqueIdentifierLen,
    );
  }

  late final _LLVMDIBuilderCreateForwardDeclPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMDIBuilderCreateForwardDecl');
  late final _LLVMDIBuilderCreateForwardDecl =
      _LLVMDIBuilderCreateForwardDeclPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              LLVMMetadataRef,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              int)>();

  /// Create a temporary forward-declared type.
  /// \param Builder             The DIBuilder.
  /// \param Tag                 A unique tag for this type.
  /// \param Name                Type name.
  /// \param NameLen             Length of type name.
  /// \param Scope               Type scope.
  /// \param File                File where this type is defined.
  /// \param Line                Line number where this type is defined.
  /// \param RuntimeLang         Indicates runtime version for languages like
  /// Objective-C.
  /// \param SizeInBits          Member size.
  /// \param AlignInBits         Member alignment.
  /// \param Flags               Flags.
  /// \param UniqueIdentifier    A unique identifier for the type.
  /// \param UniqueIdentifierLen Length of the unique identifier.
  LLVMMetadataRef LLVMDIBuilderCreateReplaceableCompositeType(
    LLVMDIBuilderRef Builder,
    int Tag,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef Scope,
    LLVMMetadataRef File,
    int Line,
    int RuntimeLang,
    int SizeInBits,
    int AlignInBits,
    int Flags,
    ffi.Pointer<ffi.Char> UniqueIdentifier,
    int UniqueIdentifierLen,
  ) {
    return _LLVMDIBuilderCreateReplaceableCompositeType(
      Builder,
      Tag,
      Name,
      NameLen,
      Scope,
      File,
      Line,
      RuntimeLang,
      SizeInBits,
      AlignInBits,
      Flags,
      UniqueIdentifier,
      UniqueIdentifierLen,
    );
  }

  late final _LLVMDIBuilderCreateReplaceableCompositeTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMDIBuilderCreateReplaceableCompositeType');
  late final _LLVMDIBuilderCreateReplaceableCompositeType =
      _LLVMDIBuilderCreateReplaceableCompositeTypePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              LLVMMetadataRef,
              int,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              int)>();

  /// Create debugging information entry for a bit field member.
  /// \param Builder             The DIBuilder.
  /// \param Scope               Member scope.
  /// \param Name                Member name.
  /// \param NameLen             Length of member name.
  /// \param File                File where this member is defined.
  /// \param LineNumber          Line number.
  /// \param SizeInBits          Member size.
  /// \param OffsetInBits        Member offset.
  /// \param StorageOffsetInBits Member storage offset.
  /// \param Flags               Flags to encode member attribute.
  /// \param Type                Parent type.
  LLVMMetadataRef LLVMDIBuilderCreateBitFieldMemberType(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef File,
    int LineNumber,
    int SizeInBits,
    int OffsetInBits,
    int StorageOffsetInBits,
    int Flags,
    LLVMMetadataRef Type,
  ) {
    return _LLVMDIBuilderCreateBitFieldMemberType(
      Builder,
      Scope,
      Name,
      NameLen,
      File,
      LineNumber,
      SizeInBits,
      OffsetInBits,
      StorageOffsetInBits,
      Flags,
      Type,
    );
  }

  late final _LLVMDIBuilderCreateBitFieldMemberTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Int32,
              LLVMMetadataRef)>>('LLVMDIBuilderCreateBitFieldMemberType');
  late final _LLVMDIBuilderCreateBitFieldMemberType =
      _LLVMDIBuilderCreateBitFieldMemberTypePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              int,
              int,
              int,
              int,
              LLVMMetadataRef)>();

  /// Create debugging information entry for a class.
  /// \param Scope               Scope in which this class is defined.
  /// \param Name                Class name.
  /// \param NameLen             The length of the C string passed to \c Name.
  /// \param File                File where this member is defined.
  /// \param LineNumber          Line number.
  /// \param SizeInBits          Member size.
  /// \param AlignInBits         Member alignment.
  /// \param OffsetInBits        Member offset.
  /// \param Flags               Flags to encode member attribute, e.g. private.
  /// \param DerivedFrom         Debug info of the base class of this type.
  /// \param Elements            Class members.
  /// \param NumElements         Number of class elements.
  /// \param VTableHolder        Debug info of the base class that contains vtable
  /// for this type. This is used in
  /// DW_AT_containing_type. See DWARF documentation
  /// for more info.
  /// \param TemplateParamsNode  Template type parameters.
  /// \param UniqueIdentifier    A unique identifier for the type.
  /// \param UniqueIdentifierLen Length of the unique identifier.
  LLVMMetadataRef LLVMDIBuilderCreateClassType(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef File,
    int LineNumber,
    int SizeInBits,
    int AlignInBits,
    int OffsetInBits,
    int Flags,
    LLVMMetadataRef DerivedFrom,
    ffi.Pointer<LLVMMetadataRef> Elements,
    int NumElements,
    LLVMMetadataRef VTableHolder,
    LLVMMetadataRef TemplateParamsNode,
    ffi.Pointer<ffi.Char> UniqueIdentifier,
    int UniqueIdentifierLen,
  ) {
    return _LLVMDIBuilderCreateClassType(
      Builder,
      Scope,
      Name,
      NameLen,
      File,
      LineNumber,
      SizeInBits,
      AlignInBits,
      OffsetInBits,
      Flags,
      DerivedFrom,
      Elements,
      NumElements,
      VTableHolder,
      TemplateParamsNode,
      UniqueIdentifier,
      UniqueIdentifierLen,
    );
  }

  late final _LLVMDIBuilderCreateClassTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Uint64,
              ffi.Int32,
              LLVMMetadataRef,
              ffi.Pointer<LLVMMetadataRef>,
              ffi.UnsignedInt,
              LLVMMetadataRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LLVMDIBuilderCreateClassType');
  late final _LLVMDIBuilderCreateClassType =
      _LLVMDIBuilderCreateClassTypePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              int,
              int,
              int,
              int,
              LLVMMetadataRef,
              ffi.Pointer<LLVMMetadataRef>,
              int,
              LLVMMetadataRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int)>();

  /// Create a uniqued DIType* clone with FlagArtificial set.
  /// \param Builder     The DIBuilder.
  /// \param Type        The underlying type.
  LLVMMetadataRef LLVMDIBuilderCreateArtificialType(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Type,
  ) {
    return _LLVMDIBuilderCreateArtificialType(
      Builder,
      Type,
    );
  }

  late final _LLVMDIBuilderCreateArtificialTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef,
              LLVMMetadataRef)>>('LLVMDIBuilderCreateArtificialType');
  late final _LLVMDIBuilderCreateArtificialType =
      _LLVMDIBuilderCreateArtificialTypePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, LLVMMetadataRef)>();

  /// Get the name of this DIType.
  /// \param DType     The DIType.
  /// \param Length    The length of the returned string.
  ///
  /// @see DIType::getName()
  ffi.Pointer<ffi.Char> LLVMDITypeGetName(
    LLVMMetadataRef DType,
    ffi.Pointer<ffi.Size> Length,
  ) {
    return _LLVMDITypeGetName(
      DType,
      Length,
    );
  }

  late final _LLVMDITypeGetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMMetadataRef, ffi.Pointer<ffi.Size>)>>('LLVMDITypeGetName');
  late final _LLVMDITypeGetName = _LLVMDITypeGetNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMMetadataRef, ffi.Pointer<ffi.Size>)>();

  /// Get the size of this DIType in bits.
  /// \param DType     The DIType.
  ///
  /// @see DIType::getSizeInBits()
  int LLVMDITypeGetSizeInBits(
    LLVMMetadataRef DType,
  ) {
    return _LLVMDITypeGetSizeInBits(
      DType,
    );
  }

  late final _LLVMDITypeGetSizeInBitsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(LLVMMetadataRef)>>(
          'LLVMDITypeGetSizeInBits');
  late final _LLVMDITypeGetSizeInBits =
      _LLVMDITypeGetSizeInBitsPtr.asFunction<int Function(LLVMMetadataRef)>();

  /// Get the offset of this DIType in bits.
  /// \param DType     The DIType.
  ///
  /// @see DIType::getOffsetInBits()
  int LLVMDITypeGetOffsetInBits(
    LLVMMetadataRef DType,
  ) {
    return _LLVMDITypeGetOffsetInBits(
      DType,
    );
  }

  late final _LLVMDITypeGetOffsetInBitsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(LLVMMetadataRef)>>(
          'LLVMDITypeGetOffsetInBits');
  late final _LLVMDITypeGetOffsetInBits =
      _LLVMDITypeGetOffsetInBitsPtr.asFunction<int Function(LLVMMetadataRef)>();

  /// Get the alignment of this DIType in bits.
  /// \param DType     The DIType.
  ///
  /// @see DIType::getAlignInBits()
  int LLVMDITypeGetAlignInBits(
    LLVMMetadataRef DType,
  ) {
    return _LLVMDITypeGetAlignInBits(
      DType,
    );
  }

  late final _LLVMDITypeGetAlignInBitsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(LLVMMetadataRef)>>(
          'LLVMDITypeGetAlignInBits');
  late final _LLVMDITypeGetAlignInBits =
      _LLVMDITypeGetAlignInBitsPtr.asFunction<int Function(LLVMMetadataRef)>();

  /// Get the source line where this DIType is declared.
  /// \param DType     The DIType.
  ///
  /// @see DIType::getLine()
  int LLVMDITypeGetLine(
    LLVMMetadataRef DType,
  ) {
    return _LLVMDITypeGetLine(
      DType,
    );
  }

  late final _LLVMDITypeGetLinePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMMetadataRef)>>(
          'LLVMDITypeGetLine');
  late final _LLVMDITypeGetLine =
      _LLVMDITypeGetLinePtr.asFunction<int Function(LLVMMetadataRef)>();

  /// Get the flags associated with this DIType.
  /// \param DType     The DIType.
  ///
  /// @see DIType::getFlags()
  int LLVMDITypeGetFlags(
    LLVMMetadataRef DType,
  ) {
    return _LLVMDITypeGetFlags(
      DType,
    );
  }

  late final _LLVMDITypeGetFlagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMMetadataRef)>>(
          'LLVMDITypeGetFlags');
  late final _LLVMDITypeGetFlags =
      _LLVMDITypeGetFlagsPtr.asFunction<int Function(LLVMMetadataRef)>();

  /// Create a descriptor for a value range.
  /// \param Builder    The DIBuilder.
  /// \param LowerBound Lower bound of the subrange, e.g. 0 for C, 1 for Fortran.
  /// \param Count      Count of elements in the subrange.
  LLVMMetadataRef LLVMDIBuilderGetOrCreateSubrange(
    LLVMDIBuilderRef Builder,
    int LowerBound,
    int Count,
  ) {
    return _LLVMDIBuilderGetOrCreateSubrange(
      Builder,
      LowerBound,
      Count,
    );
  }

  late final _LLVMDIBuilderGetOrCreateSubrangePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, ffi.Int64,
              ffi.Int64)>>('LLVMDIBuilderGetOrCreateSubrange');
  late final _LLVMDIBuilderGetOrCreateSubrange =
      _LLVMDIBuilderGetOrCreateSubrangePtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, int, int)>();

  /// Create an array of DI Nodes.
  /// \param Builder        The DIBuilder.
  /// \param Data           The DI Node elements.
  /// \param NumElements    Number of DI Node elements.
  LLVMMetadataRef LLVMDIBuilderGetOrCreateArray(
    LLVMDIBuilderRef Builder,
    ffi.Pointer<LLVMMetadataRef> Data,
    int NumElements,
  ) {
    return _LLVMDIBuilderGetOrCreateArray(
      Builder,
      Data,
      NumElements,
    );
  }

  late final _LLVMDIBuilderGetOrCreateArrayPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              ffi.Pointer<LLVMMetadataRef>,
              ffi.Size)>>('LLVMDIBuilderGetOrCreateArray');
  late final _LLVMDIBuilderGetOrCreateArray =
      _LLVMDIBuilderGetOrCreateArrayPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef, ffi.Pointer<LLVMMetadataRef>, int)>();

  /// Create a new descriptor for the specified variable which has a complex
  /// address expression for its address.
  /// \param Builder     The DIBuilder.
  /// \param Addr        An array of complex address operations.
  /// \param Length      Length of the address operation array.
  LLVMMetadataRef LLVMDIBuilderCreateExpression(
    LLVMDIBuilderRef Builder,
    ffi.Pointer<ffi.Uint64> Addr,
    int Length,
  ) {
    return _LLVMDIBuilderCreateExpression(
      Builder,
      Addr,
      Length,
    );
  }

  late final _LLVMDIBuilderCreateExpressionPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, ffi.Pointer<ffi.Uint64>,
              ffi.Size)>>('LLVMDIBuilderCreateExpression');
  late final _LLVMDIBuilderCreateExpression =
      _LLVMDIBuilderCreateExpressionPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef, ffi.Pointer<ffi.Uint64>, int)>();

  /// Create a new descriptor for the specified variable that does not have an
  /// address, but does have a constant value.
  /// \param Builder     The DIBuilder.
  /// \param Value       The constant value.
  LLVMMetadataRef LLVMDIBuilderCreateConstantValueExpression(
    LLVMDIBuilderRef Builder,
    int Value,
  ) {
    return _LLVMDIBuilderCreateConstantValueExpression(
      Builder,
      Value,
    );
  }

  late final _LLVMDIBuilderCreateConstantValueExpressionPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef,
              ffi.Uint64)>>('LLVMDIBuilderCreateConstantValueExpression');
  late final _LLVMDIBuilderCreateConstantValueExpression =
      _LLVMDIBuilderCreateConstantValueExpressionPtr.asFunction<
          LLVMMetadataRef Function(LLVMDIBuilderRef, int)>();

  /// Create a new descriptor for the specified variable.
  /// \param Scope       Variable scope.
  /// \param Name        Name of the variable.
  /// \param NameLen     The length of the C string passed to \c Name.
  /// \param Linkage     Mangled  name of the variable.
  /// \param LinkLen     The length of the C string passed to \c Linkage.
  /// \param File        File where this variable is defined.
  /// \param LineNo      Line number.
  /// \param Ty          Variable Type.
  /// \param LocalToUnit Boolean flag indicate whether this variable is
  /// externally visible or not.
  /// \param Expr        The location of the global relative to the attached
  /// GlobalVariable.
  /// \param Decl        Reference to the corresponding declaration.
  /// variables.
  /// \param AlignInBits Variable alignment(or 0 if no alignment attr was
  /// specified)
  LLVMMetadataRef LLVMDIBuilderCreateGlobalVariableExpression(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    ffi.Pointer<ffi.Char> Linkage,
    int LinkLen,
    LLVMMetadataRef File,
    int LineNo,
    LLVMMetadataRef Ty,
    int LocalToUnit,
    LLVMMetadataRef Expr,
    LLVMMetadataRef Decl,
    int AlignInBits,
  ) {
    return _LLVMDIBuilderCreateGlobalVariableExpression(
      Builder,
      Scope,
      Name,
      NameLen,
      Linkage,
      LinkLen,
      File,
      LineNo,
      Ty,
      LocalToUnit,
      Expr,
      Decl,
      AlignInBits,
    );
  }

  late final _LLVMDIBuilderCreateGlobalVariableExpressionPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              LLVMMetadataRef,
              LLVMBool,
              LLVMMetadataRef,
              LLVMMetadataRef,
              ffi.Uint32)>>('LLVMDIBuilderCreateGlobalVariableExpression');
  late final _LLVMDIBuilderCreateGlobalVariableExpression =
      _LLVMDIBuilderCreateGlobalVariableExpressionPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              LLVMMetadataRef,
              int,
              LLVMMetadataRef,
              LLVMMetadataRef,
              int)>();

  /// Retrieves the \c DIVariable associated with this global variable expression.
  /// \param GVE    The global variable expression.
  ///
  /// @see llvm::DIGlobalVariableExpression::getVariable()
  LLVMMetadataRef LLVMDIGlobalVariableExpressionGetVariable(
    LLVMMetadataRef GVE,
  ) {
    return _LLVMDIGlobalVariableExpressionGetVariable(
      GVE,
    );
  }

  late final _LLVMDIGlobalVariableExpressionGetVariablePtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMMetadataRef)>>(
          'LLVMDIGlobalVariableExpressionGetVariable');
  late final _LLVMDIGlobalVariableExpressionGetVariable =
      _LLVMDIGlobalVariableExpressionGetVariablePtr.asFunction<
          LLVMMetadataRef Function(LLVMMetadataRef)>();

  /// Retrieves the \c DIExpression associated with this global variable expression.
  /// \param GVE    The global variable expression.
  ///
  /// @see llvm::DIGlobalVariableExpression::getExpression()
  LLVMMetadataRef LLVMDIGlobalVariableExpressionGetExpression(
    LLVMMetadataRef GVE,
  ) {
    return _LLVMDIGlobalVariableExpressionGetExpression(
      GVE,
    );
  }

  late final _LLVMDIGlobalVariableExpressionGetExpressionPtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMMetadataRef)>>(
          'LLVMDIGlobalVariableExpressionGetExpression');
  late final _LLVMDIGlobalVariableExpressionGetExpression =
      _LLVMDIGlobalVariableExpressionGetExpressionPtr.asFunction<
          LLVMMetadataRef Function(LLVMMetadataRef)>();

  /// Get the metadata of the file associated with a given variable.
  /// \param Var     The variable object.
  ///
  /// @see DIVariable::getFile()
  LLVMMetadataRef LLVMDIVariableGetFile(
    LLVMMetadataRef Var,
  ) {
    return _LLVMDIVariableGetFile(
      Var,
    );
  }

  late final _LLVMDIVariableGetFilePtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMMetadataRef)>>(
          'LLVMDIVariableGetFile');
  late final _LLVMDIVariableGetFile = _LLVMDIVariableGetFilePtr.asFunction<
      LLVMMetadataRef Function(LLVMMetadataRef)>();

  /// Get the metadata of the scope associated with a given variable.
  /// \param Var     The variable object.
  ///
  /// @see DIVariable::getScope()
  LLVMMetadataRef LLVMDIVariableGetScope(
    LLVMMetadataRef Var,
  ) {
    return _LLVMDIVariableGetScope(
      Var,
    );
  }

  late final _LLVMDIVariableGetScopePtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMMetadataRef)>>(
          'LLVMDIVariableGetScope');
  late final _LLVMDIVariableGetScope = _LLVMDIVariableGetScopePtr.asFunction<
      LLVMMetadataRef Function(LLVMMetadataRef)>();

  /// Get the source line where this \c DIVariable is declared.
  /// \param Var     The DIVariable.
  ///
  /// @see DIVariable::getLine()
  int LLVMDIVariableGetLine(
    LLVMMetadataRef Var,
  ) {
    return _LLVMDIVariableGetLine(
      Var,
    );
  }

  late final _LLVMDIVariableGetLinePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMMetadataRef)>>(
          'LLVMDIVariableGetLine');
  late final _LLVMDIVariableGetLine =
      _LLVMDIVariableGetLinePtr.asFunction<int Function(LLVMMetadataRef)>();

  /// Create a new temporary \c MDNode.  Suitable for use in constructing cyclic
  /// \c MDNode structures. A temporary \c MDNode is not uniqued, may be RAUW'd,
  /// and must be manually deleted with \c LLVMDisposeTemporaryMDNode.
  /// \param Ctx            The context in which to construct the temporary node.
  /// \param Data           The metadata elements.
  /// \param NumElements    Number of metadata elements.
  LLVMMetadataRef LLVMTemporaryMDNode(
    LLVMContextRef Ctx,
    ffi.Pointer<LLVMMetadataRef> Data,
    int NumElements,
  ) {
    return _LLVMTemporaryMDNode(
      Ctx,
      Data,
      NumElements,
    );
  }

  late final _LLVMTemporaryMDNodePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMContextRef, ffi.Pointer<LLVMMetadataRef>,
              ffi.Size)>>('LLVMTemporaryMDNode');
  late final _LLVMTemporaryMDNode = _LLVMTemporaryMDNodePtr.asFunction<
      LLVMMetadataRef Function(
          LLVMContextRef, ffi.Pointer<LLVMMetadataRef>, int)>();

  /// Deallocate a temporary node.
  ///
  /// Calls \c replaceAllUsesWith(nullptr) before deleting, so any remaining
  /// references will be reset.
  /// \param TempNode    The temporary metadata node.
  void LLVMDisposeTemporaryMDNode(
    LLVMMetadataRef TempNode,
  ) {
    return _LLVMDisposeTemporaryMDNode(
      TempNode,
    );
  }

  late final _LLVMDisposeTemporaryMDNodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMMetadataRef)>>(
          'LLVMDisposeTemporaryMDNode');
  late final _LLVMDisposeTemporaryMDNode = _LLVMDisposeTemporaryMDNodePtr
      .asFunction<void Function(LLVMMetadataRef)>();

  /// Replace all uses of temporary metadata.
  /// \param TempTargetMetadata    The temporary metadata node.
  /// \param Replacement           The replacement metadata node.
  void LLVMMetadataReplaceAllUsesWith(
    LLVMMetadataRef TempTargetMetadata,
    LLVMMetadataRef Replacement,
  ) {
    return _LLVMMetadataReplaceAllUsesWith(
      TempTargetMetadata,
      Replacement,
    );
  }

  late final _LLVMMetadataReplaceAllUsesWithPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMMetadataRef,
              LLVMMetadataRef)>>('LLVMMetadataReplaceAllUsesWith');
  late final _LLVMMetadataReplaceAllUsesWith =
      _LLVMMetadataReplaceAllUsesWithPtr.asFunction<
          void Function(LLVMMetadataRef, LLVMMetadataRef)>();

  /// Create a new descriptor for the specified global variable that is temporary
  /// and meant to be RAUWed.
  /// \param Scope       Variable scope.
  /// \param Name        Name of the variable.
  /// \param NameLen     The length of the C string passed to \c Name.
  /// \param Linkage     Mangled  name of the variable.
  /// \param LnkLen      The length of the C string passed to \c Linkage.
  /// \param File        File where this variable is defined.
  /// \param LineNo      Line number.
  /// \param Ty          Variable Type.
  /// \param LocalToUnit Boolean flag indicate whether this variable is
  /// externally visible or not.
  /// \param Decl        Reference to the corresponding declaration.
  /// \param AlignInBits Variable alignment(or 0 if no alignment attr was
  /// specified)
  LLVMMetadataRef LLVMDIBuilderCreateTempGlobalVariableFwdDecl(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    ffi.Pointer<ffi.Char> Linkage,
    int LnkLen,
    LLVMMetadataRef File,
    int LineNo,
    LLVMMetadataRef Ty,
    int LocalToUnit,
    LLVMMetadataRef Decl,
    int AlignInBits,
  ) {
    return _LLVMDIBuilderCreateTempGlobalVariableFwdDecl(
      Builder,
      Scope,
      Name,
      NameLen,
      Linkage,
      LnkLen,
      File,
      LineNo,
      Ty,
      LocalToUnit,
      Decl,
      AlignInBits,
    );
  }

  late final _LLVMDIBuilderCreateTempGlobalVariableFwdDeclPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              LLVMMetadataRef,
              LLVMBool,
              LLVMMetadataRef,
              ffi.Uint32)>>('LLVMDIBuilderCreateTempGlobalVariableFwdDecl');
  late final _LLVMDIBuilderCreateTempGlobalVariableFwdDecl =
      _LLVMDIBuilderCreateTempGlobalVariableFwdDeclPtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              LLVMMetadataRef,
              int,
              LLVMMetadataRef,
              int)>();

  /// Insert a new llvm.dbg.declare intrinsic call before the given instruction.
  /// \param Builder     The DIBuilder.
  /// \param Storage     The storage of the variable to declare.
  /// \param VarInfo     The variable's debug info descriptor.
  /// \param Expr        A complex location expression for the variable.
  /// \param DebugLoc    Debug info location.
  /// \param Instr       Instruction acting as a location for the new intrinsic.
  LLVMValueRef LLVMDIBuilderInsertDeclareBefore(
    LLVMDIBuilderRef Builder,
    LLVMValueRef Storage,
    LLVMMetadataRef VarInfo,
    LLVMMetadataRef Expr,
    LLVMMetadataRef DebugLoc,
    LLVMValueRef Instr,
  ) {
    return _LLVMDIBuilderInsertDeclareBefore(
      Builder,
      Storage,
      VarInfo,
      Expr,
      DebugLoc,
      Instr,
    );
  }

  late final _LLVMDIBuilderInsertDeclareBeforePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMDIBuilderRef,
              LLVMValueRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMValueRef)>>('LLVMDIBuilderInsertDeclareBefore');
  late final _LLVMDIBuilderInsertDeclareBefore =
      _LLVMDIBuilderInsertDeclareBeforePtr.asFunction<
          LLVMValueRef Function(LLVMDIBuilderRef, LLVMValueRef, LLVMMetadataRef,
              LLVMMetadataRef, LLVMMetadataRef, LLVMValueRef)>();

  /// Insert a new llvm.dbg.declare intrinsic call at the end of the given basic
  /// block. If the basic block has a terminator instruction, the intrinsic is
  /// inserted before that terminator instruction.
  /// \param Builder     The DIBuilder.
  /// \param Storage     The storage of the variable to declare.
  /// \param VarInfo     The variable's debug info descriptor.
  /// \param Expr        A complex location expression for the variable.
  /// \param DebugLoc    Debug info location.
  /// \param Block       Basic block acting as a location for the new intrinsic.
  LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd(
    LLVMDIBuilderRef Builder,
    LLVMValueRef Storage,
    LLVMMetadataRef VarInfo,
    LLVMMetadataRef Expr,
    LLVMMetadataRef DebugLoc,
    LLVMBasicBlockRef Block,
  ) {
    return _LLVMDIBuilderInsertDeclareAtEnd(
      Builder,
      Storage,
      VarInfo,
      Expr,
      DebugLoc,
      Block,
    );
  }

  late final _LLVMDIBuilderInsertDeclareAtEndPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMDIBuilderRef,
              LLVMValueRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMBasicBlockRef)>>('LLVMDIBuilderInsertDeclareAtEnd');
  late final _LLVMDIBuilderInsertDeclareAtEnd =
      _LLVMDIBuilderInsertDeclareAtEndPtr.asFunction<
          LLVMValueRef Function(LLVMDIBuilderRef, LLVMValueRef, LLVMMetadataRef,
              LLVMMetadataRef, LLVMMetadataRef, LLVMBasicBlockRef)>();

  /// Insert a new llvm.dbg.value intrinsic call before the given instruction.
  /// \param Builder     The DIBuilder.
  /// \param Val         The value of the variable.
  /// \param VarInfo     The variable's debug info descriptor.
  /// \param Expr        A complex location expression for the variable.
  /// \param DebugLoc    Debug info location.
  /// \param Instr       Instruction acting as a location for the new intrinsic.
  LLVMValueRef LLVMDIBuilderInsertDbgValueBefore(
    LLVMDIBuilderRef Builder,
    LLVMValueRef Val,
    LLVMMetadataRef VarInfo,
    LLVMMetadataRef Expr,
    LLVMMetadataRef DebugLoc,
    LLVMValueRef Instr,
  ) {
    return _LLVMDIBuilderInsertDbgValueBefore(
      Builder,
      Val,
      VarInfo,
      Expr,
      DebugLoc,
      Instr,
    );
  }

  late final _LLVMDIBuilderInsertDbgValueBeforePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMDIBuilderRef,
              LLVMValueRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMValueRef)>>('LLVMDIBuilderInsertDbgValueBefore');
  late final _LLVMDIBuilderInsertDbgValueBefore =
      _LLVMDIBuilderInsertDbgValueBeforePtr.asFunction<
          LLVMValueRef Function(LLVMDIBuilderRef, LLVMValueRef, LLVMMetadataRef,
              LLVMMetadataRef, LLVMMetadataRef, LLVMValueRef)>();

  /// Insert a new llvm.dbg.value intrinsic call at the end of the given basic
  /// block. If the basic block has a terminator instruction, the intrinsic is
  /// inserted before that terminator instruction.
  /// \param Builder     The DIBuilder.
  /// \param Val         The value of the variable.
  /// \param VarInfo     The variable's debug info descriptor.
  /// \param Expr        A complex location expression for the variable.
  /// \param DebugLoc    Debug info location.
  /// \param Block       Basic block acting as a location for the new intrinsic.
  LLVMValueRef LLVMDIBuilderInsertDbgValueAtEnd(
    LLVMDIBuilderRef Builder,
    LLVMValueRef Val,
    LLVMMetadataRef VarInfo,
    LLVMMetadataRef Expr,
    LLVMMetadataRef DebugLoc,
    LLVMBasicBlockRef Block,
  ) {
    return _LLVMDIBuilderInsertDbgValueAtEnd(
      Builder,
      Val,
      VarInfo,
      Expr,
      DebugLoc,
      Block,
    );
  }

  late final _LLVMDIBuilderInsertDbgValueAtEndPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMDIBuilderRef,
              LLVMValueRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMMetadataRef,
              LLVMBasicBlockRef)>>('LLVMDIBuilderInsertDbgValueAtEnd');
  late final _LLVMDIBuilderInsertDbgValueAtEnd =
      _LLVMDIBuilderInsertDbgValueAtEndPtr.asFunction<
          LLVMValueRef Function(LLVMDIBuilderRef, LLVMValueRef, LLVMMetadataRef,
              LLVMMetadataRef, LLVMMetadataRef, LLVMBasicBlockRef)>();

  /// Create a new descriptor for a local auto variable.
  /// \param Builder         The DIBuilder.
  /// \param Scope           The local scope the variable is declared in.
  /// \param Name            Variable name.
  /// \param NameLen         Length of variable name.
  /// \param File            File where this variable is defined.
  /// \param LineNo          Line number.
  /// \param Ty              Metadata describing the type of the variable.
  /// \param AlwaysPreserve  If true, this descriptor will survive optimizations.
  /// \param Flags           Flags.
  /// \param AlignInBits     Variable alignment.
  LLVMMetadataRef LLVMDIBuilderCreateAutoVariable(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMMetadataRef File,
    int LineNo,
    LLVMMetadataRef Ty,
    int AlwaysPreserve,
    int Flags,
    int AlignInBits,
  ) {
    return _LLVMDIBuilderCreateAutoVariable(
      Builder,
      Scope,
      Name,
      NameLen,
      File,
      LineNo,
      Ty,
      AlwaysPreserve,
      Flags,
      AlignInBits,
    );
  }

  late final _LLVMDIBuilderCreateAutoVariablePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              LLVMMetadataRef,
              LLVMBool,
              ffi.Int32,
              ffi.Uint32)>>('LLVMDIBuilderCreateAutoVariable');
  late final _LLVMDIBuilderCreateAutoVariable =
      _LLVMDIBuilderCreateAutoVariablePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              LLVMMetadataRef,
              int,
              LLVMMetadataRef,
              int,
              int,
              int)>();

  /// Create a new descriptor for a function parameter variable.
  /// \param Builder         The DIBuilder.
  /// \param Scope           The local scope the variable is declared in.
  /// \param Name            Variable name.
  /// \param NameLen         Length of variable name.
  /// \param ArgNo           Unique argument number for this variable; starts at 1.
  /// \param File            File where this variable is defined.
  /// \param LineNo          Line number.
  /// \param Ty              Metadata describing the type of the variable.
  /// \param AlwaysPreserve  If true, this descriptor will survive optimizations.
  /// \param Flags           Flags.
  LLVMMetadataRef LLVMDIBuilderCreateParameterVariable(
    LLVMDIBuilderRef Builder,
    LLVMMetadataRef Scope,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    int ArgNo,
    LLVMMetadataRef File,
    int LineNo,
    LLVMMetadataRef Ty,
    int AlwaysPreserve,
    int Flags,
  ) {
    return _LLVMDIBuilderCreateParameterVariable(
      Builder,
      Scope,
      Name,
      NameLen,
      ArgNo,
      File,
      LineNo,
      Ty,
      AlwaysPreserve,
      Flags,
    );
  }

  late final _LLVMDIBuilderCreateParameterVariablePtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.UnsignedInt,
              LLVMMetadataRef,
              ffi.UnsignedInt,
              LLVMMetadataRef,
              LLVMBool,
              ffi.Int32)>>('LLVMDIBuilderCreateParameterVariable');
  late final _LLVMDIBuilderCreateParameterVariable =
      _LLVMDIBuilderCreateParameterVariablePtr.asFunction<
          LLVMMetadataRef Function(
              LLVMDIBuilderRef,
              LLVMMetadataRef,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              LLVMMetadataRef,
              int,
              LLVMMetadataRef,
              int,
              int)>();

  /// Get the metadata of the subprogram attached to a function.
  ///
  /// @see llvm::Function::getSubprogram()
  LLVMMetadataRef LLVMGetSubprogram(
    LLVMValueRef Func,
  ) {
    return _LLVMGetSubprogram(
      Func,
    );
  }

  late final _LLVMGetSubprogramPtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMValueRef)>>(
          'LLVMGetSubprogram');
  late final _LLVMGetSubprogram = _LLVMGetSubprogramPtr.asFunction<
      LLVMMetadataRef Function(LLVMValueRef)>();

  /// Set the subprogram attached to a function.
  ///
  /// @see llvm::Function::setSubprogram()
  void LLVMSetSubprogram(
    LLVMValueRef Func,
    LLVMMetadataRef SP,
  ) {
    return _LLVMSetSubprogram(
      Func,
      SP,
    );
  }

  late final _LLVMSetSubprogramPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMMetadataRef)>>(
      'LLVMSetSubprogram');
  late final _LLVMSetSubprogram = _LLVMSetSubprogramPtr.asFunction<
      void Function(LLVMValueRef, LLVMMetadataRef)>();

  /// Get the line associated with a given subprogram.
  /// \param Subprogram     The subprogram object.
  ///
  /// @see DISubprogram::getLine()
  int LLVMDISubprogramGetLine(
    LLVMMetadataRef Subprogram,
  ) {
    return _LLVMDISubprogramGetLine(
      Subprogram,
    );
  }

  late final _LLVMDISubprogramGetLinePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMMetadataRef)>>(
          'LLVMDISubprogramGetLine');
  late final _LLVMDISubprogramGetLine =
      _LLVMDISubprogramGetLinePtr.asFunction<int Function(LLVMMetadataRef)>();

  /// Get the debug location for the given instruction.
  ///
  /// @see llvm::Instruction::getDebugLoc()
  LLVMMetadataRef LLVMInstructionGetDebugLoc(
    LLVMValueRef Inst,
  ) {
    return _LLVMInstructionGetDebugLoc(
      Inst,
    );
  }

  late final _LLVMInstructionGetDebugLocPtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMValueRef)>>(
          'LLVMInstructionGetDebugLoc');
  late final _LLVMInstructionGetDebugLoc = _LLVMInstructionGetDebugLocPtr
      .asFunction<LLVMMetadataRef Function(LLVMValueRef)>();

  /// Set the debug location for the given instruction.
  ///
  /// To clear the location metadata of the given instruction, pass NULL to \p Loc.
  ///
  /// @see llvm::Instruction::setDebugLoc()
  void LLVMInstructionSetDebugLoc(
    LLVMValueRef Inst,
    LLVMMetadataRef Loc,
  ) {
    return _LLVMInstructionSetDebugLoc(
      Inst,
      Loc,
    );
  }

  late final _LLVMInstructionSetDebugLocPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMMetadataRef)>>(
      'LLVMInstructionSetDebugLoc');
  late final _LLVMInstructionSetDebugLoc = _LLVMInstructionSetDebugLocPtr
      .asFunction<void Function(LLVMValueRef, LLVMMetadataRef)>();

  /// Obtain the enumerated type of a Metadata instance.
  ///
  /// @see llvm::Metadata::getMetadataID()
  int LLVMGetMetadataKind(
    LLVMMetadataRef Metadata,
  ) {
    return _LLVMGetMetadataKind(
      Metadata,
    );
  }

  late final _LLVMGetMetadataKindPtr =
      _lookup<ffi.NativeFunction<LLVMMetadataKind Function(LLVMMetadataRef)>>(
          'LLVMGetMetadataKind');
  late final _LLVMGetMetadataKind =
      _LLVMGetMetadataKindPtr.asFunction<int Function(LLVMMetadataRef)>();
}

abstract class LLVMAttr {
  static const int FirstEnumAttr = 1;
  static const int AllocAlign = 1;
  static const int AllocatedPointer = 2;
  static const int AlwaysInline = 3;
  static const int Builtin = 4;
  static const int Cold = 5;
  static const int Convergent = 6;
  static const int DisableSanitizerInstrumentation = 7;
  static const int FnRetThunkExtern = 8;
  static const int Hot = 9;
  static const int ImmArg = 10;
  static const int InReg = 11;
  static const int InlineHint = 12;
  static const int JumpTable = 13;
  static const int MinSize = 14;
  static const int MustProgress = 15;
  static const int Naked = 16;
  static const int Nest = 17;
  static const int NoAlias = 18;
  static const int NoBuiltin = 19;
  static const int NoCallback = 20;
  static const int NoCapture = 21;
  static const int NoCfCheck = 22;
  static const int NoDuplicate = 23;
  static const int NoFree = 24;
  static const int NoImplicitFloat = 25;
  static const int NoInline = 26;
  static const int NoMerge = 27;
  static const int NoProfile = 28;
  static const int NoRecurse = 29;
  static const int NoRedZone = 30;
  static const int NoReturn = 31;
  static const int NoSanitizeBounds = 32;
  static const int NoSanitizeCoverage = 33;
  static const int NoSync = 34;
  static const int NoUndef = 35;
  static const int NoUnwind = 36;
  static const int NonLazyBind = 37;
  static const int NonNull = 38;
  static const int NullPointerIsValid = 39;
  static const int OptForFuzzing = 40;
  static const int OptimizeForSize = 41;
  static const int OptimizeNone = 42;
  static const int PresplitCoroutine = 43;
  static const int ReadNone = 44;
  static const int ReadOnly = 45;
  static const int Returned = 46;
  static const int ReturnsTwice = 47;
  static const int SExt = 48;
  static const int SafeStack = 49;
  static const int SanitizeAddress = 50;
  static const int SanitizeHWAddress = 51;
  static const int SanitizeMemTag = 52;
  static const int SanitizeMemory = 53;
  static const int SanitizeThread = 54;
  static const int ShadowCallStack = 55;
  static const int SkipProfile = 56;
  static const int Speculatable = 57;
  static const int SpeculativeLoadHardening = 58;
  static const int StackProtect = 59;
  static const int StackProtectReq = 60;
  static const int StackProtectStrong = 61;
  static const int StrictFP = 62;
  static const int SwiftAsync = 63;
  static const int SwiftError = 64;
  static const int SwiftSelf = 65;
  static const int WillReturn = 66;
  static const int WriteOnly = 67;
  static const int ZExt = 68;
  static const int LastEnumAttr = 68;
  static const int FirstTypeAttr = 69;
  static const int ByRef = 69;
  static const int ByVal = 70;
  static const int ElementType = 71;
  static const int InAlloca = 72;
  static const int Preallocated = 73;
  static const int StructRet = 74;
  static const int LastTypeAttr = 74;
  static const int FirstIntAttr = 75;
  static const int Alignment = 75;
  static const int AllocKind = 76;
  static const int AllocSize = 77;
  static const int Dereferenceable = 78;
  static const int DereferenceableOrNull = 79;
  static const int Memory = 80;
  static const int StackAlignment = 81;
  static const int UWTable = 82;
  static const int VScaleRange = 83;
  static const int LastIntAttr = 83;
}

/// External users depend on the following values being stable. It is not safe
/// to reorder them.
abstract class LLVMOpcode {
  static const int LLVMRet = 1;
  static const int LLVMBr = 2;
  static const int LLVMSwitch = 3;
  static const int LLVMIndirectBr = 4;
  static const int LLVMInvoke = 5;
  static const int LLVMUnreachable = 7;
  static const int LLVMCallBr = 67;
  static const int LLVMFNeg = 66;
  static const int LLVMAdd = 8;
  static const int LLVMFAdd = 9;
  static const int LLVMSub = 10;
  static const int LLVMFSub = 11;
  static const int LLVMMul = 12;
  static const int LLVMFMul = 13;
  static const int LLVMUDiv = 14;
  static const int LLVMSDiv = 15;
  static const int LLVMFDiv = 16;
  static const int LLVMURem = 17;
  static const int LLVMSRem = 18;
  static const int LLVMFRem = 19;
  static const int LLVMShl = 20;
  static const int LLVMLShr = 21;
  static const int LLVMAShr = 22;
  static const int LLVMAnd = 23;
  static const int LLVMOr = 24;
  static const int LLVMXor = 25;
  static const int LLVMAlloca = 26;
  static const int LLVMLoad = 27;
  static const int LLVMStore = 28;
  static const int LLVMGetElementPtr = 29;
  static const int LLVMTrunc = 30;
  static const int LLVMZExt = 31;
  static const int LLVMSExt = 32;
  static const int LLVMFPToUI = 33;
  static const int LLVMFPToSI = 34;
  static const int LLVMUIToFP = 35;
  static const int LLVMSIToFP = 36;
  static const int LLVMFPTrunc = 37;
  static const int LLVMFPExt = 38;
  static const int LLVMPtrToInt = 39;
  static const int LLVMIntToPtr = 40;
  static const int LLVMBitCast = 41;
  static const int LLVMAddrSpaceCast = 60;
  static const int LLVMICmp = 42;
  static const int LLVMFCmp = 43;
  static const int LLVMPHI = 44;
  static const int LLVMCall = 45;
  static const int LLVMSelect = 46;
  static const int LLVMUserOp1 = 47;
  static const int LLVMUserOp2 = 48;
  static const int LLVMVAArg = 49;
  static const int LLVMExtractElement = 50;
  static const int LLVMInsertElement = 51;
  static const int LLVMShuffleVector = 52;
  static const int LLVMExtractValue = 53;
  static const int LLVMInsertValue = 54;
  static const int LLVMFreeze = 68;
  static const int LLVMFence = 55;
  static const int LLVMAtomicCmpXchg = 56;
  static const int LLVMAtomicRMW = 57;
  static const int LLVMResume = 58;
  static const int LLVMLandingPad = 59;
  static const int LLVMCleanupRet = 61;
  static const int LLVMCatchRet = 62;
  static const int LLVMCatchPad = 63;
  static const int LLVMCleanupPad = 64;
  static const int LLVMCatchSwitch = 65;
}

abstract class LLVMTypeKind {
  /// < type with no size
  static const int LLVMVoidTypeKind = 0;

  /// < 16 bit floating point type
  static const int LLVMHalfTypeKind = 1;

  /// < 32 bit floating point type
  static const int LLVMFloatTypeKind = 2;

  /// < 64 bit floating point type
  static const int LLVMDoubleTypeKind = 3;

  /// < 80 bit floating point type (X87)
  static const int LLVMX86_FP80TypeKind = 4;

  /// < 128 bit floating point type (112-bit mantissa)
  static const int LLVMFP128TypeKind = 5;

  /// < 128 bit floating point type (two 64-bits)
  static const int LLVMPPC_FP128TypeKind = 6;

  /// < Labels
  static const int LLVMLabelTypeKind = 7;

  /// < Arbitrary bit width integers
  static const int LLVMIntegerTypeKind = 8;

  /// < Functions
  static const int LLVMFunctionTypeKind = 9;

  /// < Structures
  static const int LLVMStructTypeKind = 10;

  /// < Arrays
  static const int LLVMArrayTypeKind = 11;

  /// < Pointers
  static const int LLVMPointerTypeKind = 12;

  /// < Fixed width SIMD vector type
  static const int LLVMVectorTypeKind = 13;

  /// < Metadata
  static const int LLVMMetadataTypeKind = 14;

  /// < X86 MMX
  static const int LLVMX86_MMXTypeKind = 15;

  /// < Tokens
  static const int LLVMTokenTypeKind = 16;

  /// < Scalable SIMD vector type
  static const int LLVMScalableVectorTypeKind = 17;

  /// < 16 bit brain floating point type
  static const int LLVMBFloatTypeKind = 18;

  /// < X86 AMX
  static const int LLVMX86_AMXTypeKind = 19;

  /// < Target extension type
  static const int LLVMTargetExtTypeKind = 20;
}

abstract class LLVMLinkage {
  /// < Externally visible function
  static const int LLVMExternalLinkage = 0;
  static const int LLVMAvailableExternallyLinkage = 1;

  /// < Keep one copy of function when linking (inline)
  static const int LLVMLinkOnceAnyLinkage = 2;

  /// < Same, but only replaced by something
  /// equivalent.
  static const int LLVMLinkOnceODRLinkage = 3;

  /// < Obsolete
  static const int LLVMLinkOnceODRAutoHideLinkage = 4;

  /// < Keep one copy of function when linking (weak)
  static const int LLVMWeakAnyLinkage = 5;

  /// < Same, but only replaced by something
  /// equivalent.
  static const int LLVMWeakODRLinkage = 6;

  /// < Special purpose, only applies to global arrays
  static const int LLVMAppendingLinkage = 7;

  /// < Rename collisions when linking (static
  /// functions)
  static const int LLVMInternalLinkage = 8;

  /// < Like Internal, but omit from symbol table
  static const int LLVMPrivateLinkage = 9;

  /// < Obsolete
  static const int LLVMDLLImportLinkage = 10;

  /// < Obsolete
  static const int LLVMDLLExportLinkage = 11;

  /// < ExternalWeak linkage description
  static const int LLVMExternalWeakLinkage = 12;

  /// < Obsolete
  static const int LLVMGhostLinkage = 13;

  /// < Tentative definitions
  static const int LLVMCommonLinkage = 14;

  /// < Like Private, but linker removes.
  static const int LLVMLinkerPrivateLinkage = 15;

  /// < Like LinkerPrivate, but is weak.
  static const int LLVMLinkerPrivateWeakLinkage = 16;
}

abstract class LLVMVisibility {
  /// < The GV is visible
  static const int LLVMDefaultVisibility = 0;

  /// < The GV is hidden
  static const int LLVMHiddenVisibility = 1;

  /// < The GV is protected
  static const int LLVMProtectedVisibility = 2;
}

abstract class LLVMUnnamedAddr {
  /// < Address of the GV is significant.
  static const int LLVMNoUnnamedAddr = 0;

  /// < Address of the GV is locally insignificant.
  static const int LLVMLocalUnnamedAddr = 1;

  /// < Address of the GV is globally insignificant.
  static const int LLVMGlobalUnnamedAddr = 2;
}

abstract class LLVMDLLStorageClass {
  static const int LLVMDefaultStorageClass = 0;

  /// < Function to be imported from DLL.
  static const int LLVMDLLImportStorageClass = 1;

  /// < Function to be accessible from DLL.
  static const int LLVMDLLExportStorageClass = 2;
}

abstract class LLVMCallConv {
  static const int LLVMCCallConv = 0;
  static const int LLVMFastCallConv = 8;
  static const int LLVMColdCallConv = 9;
  static const int LLVMGHCCallConv = 10;
  static const int LLVMHiPECallConv = 11;
  static const int LLVMWebKitJSCallConv = 12;
  static const int LLVMAnyRegCallConv = 13;
  static const int LLVMPreserveMostCallConv = 14;
  static const int LLVMPreserveAllCallConv = 15;
  static const int LLVMSwiftCallConv = 16;
  static const int LLVMCXXFASTTLSCallConv = 17;
  static const int LLVMX86StdcallCallConv = 64;
  static const int LLVMX86FastcallCallConv = 65;
  static const int LLVMARMAPCSCallConv = 66;
  static const int LLVMARMAAPCSCallConv = 67;
  static const int LLVMARMAAPCSVFPCallConv = 68;
  static const int LLVMMSP430INTRCallConv = 69;
  static const int LLVMX86ThisCallCallConv = 70;
  static const int LLVMPTXKernelCallConv = 71;
  static const int LLVMPTXDeviceCallConv = 72;
  static const int LLVMSPIRFUNCCallConv = 75;
  static const int LLVMSPIRKERNELCallConv = 76;
  static const int LLVMIntelOCLBICallConv = 77;
  static const int LLVMX8664SysVCallConv = 78;
  static const int LLVMWin64CallConv = 79;
  static const int LLVMX86VectorCallCallConv = 80;
  static const int LLVMHHVMCallConv = 81;
  static const int LLVMHHVMCCallConv = 82;
  static const int LLVMX86INTRCallConv = 83;
  static const int LLVMAVRINTRCallConv = 84;
  static const int LLVMAVRSIGNALCallConv = 85;
  static const int LLVMAVRBUILTINCallConv = 86;
  static const int LLVMAMDGPUVSCallConv = 87;
  static const int LLVMAMDGPUGSCallConv = 88;
  static const int LLVMAMDGPUPSCallConv = 89;
  static const int LLVMAMDGPUCSCallConv = 90;
  static const int LLVMAMDGPUKERNELCallConv = 91;
  static const int LLVMX86RegCallCallConv = 92;
  static const int LLVMAMDGPUHSCallConv = 93;
  static const int LLVMMSP430BUILTINCallConv = 94;
  static const int LLVMAMDGPULSCallConv = 95;
  static const int LLVMAMDGPUESCallConv = 96;
}

abstract class LLVMValueKind {
  static const int LLVMArgumentValueKind = 0;
  static const int LLVMBasicBlockValueKind = 1;
  static const int LLVMMemoryUseValueKind = 2;
  static const int LLVMMemoryDefValueKind = 3;
  static const int LLVMMemoryPhiValueKind = 4;
  static const int LLVMFunctionValueKind = 5;
  static const int LLVMGlobalAliasValueKind = 6;
  static const int LLVMGlobalIFuncValueKind = 7;
  static const int LLVMGlobalVariableValueKind = 8;
  static const int LLVMBlockAddressValueKind = 9;
  static const int LLVMConstantExprValueKind = 10;
  static const int LLVMConstantArrayValueKind = 11;
  static const int LLVMConstantStructValueKind = 12;
  static const int LLVMConstantVectorValueKind = 13;
  static const int LLVMUndefValueValueKind = 14;
  static const int LLVMConstantAggregateZeroValueKind = 15;
  static const int LLVMConstantDataArrayValueKind = 16;
  static const int LLVMConstantDataVectorValueKind = 17;
  static const int LLVMConstantIntValueKind = 18;
  static const int LLVMConstantFPValueKind = 19;
  static const int LLVMConstantPointerNullValueKind = 20;
  static const int LLVMConstantTokenNoneValueKind = 21;
  static const int LLVMMetadataAsValueValueKind = 22;
  static const int LLVMInlineAsmValueKind = 23;
  static const int LLVMInstructionValueKind = 24;
  static const int LLVMPoisonValueValueKind = 25;
  static const int LLVMConstantTargetNoneValueKind = 26;
}

abstract class LLVMIntPredicate {
  /// < equal
  static const int LLVMIntEQ = 32;

  /// < not equal
  static const int LLVMIntNE = 33;

  /// < unsigned greater than
  static const int LLVMIntUGT = 34;

  /// < unsigned greater or equal
  static const int LLVMIntUGE = 35;

  /// < unsigned less than
  static const int LLVMIntULT = 36;

  /// < unsigned less or equal
  static const int LLVMIntULE = 37;

  /// < signed greater than
  static const int LLVMIntSGT = 38;

  /// < signed greater or equal
  static const int LLVMIntSGE = 39;

  /// < signed less than
  static const int LLVMIntSLT = 40;

  /// < signed less or equal
  static const int LLVMIntSLE = 41;
}

abstract class LLVMRealPredicate {
  /// < Always false (always folded)
  static const int LLVMRealPredicateFalse = 0;

  /// < True if ordered and equal
  static const int LLVMRealOEQ = 1;

  /// < True if ordered and greater than
  static const int LLVMRealOGT = 2;

  /// < True if ordered and greater than or equal
  static const int LLVMRealOGE = 3;

  /// < True if ordered and less than
  static const int LLVMRealOLT = 4;

  /// < True if ordered and less than or equal
  static const int LLVMRealOLE = 5;

  /// < True if ordered and operands are unequal
  static const int LLVMRealONE = 6;

  /// < True if ordered (no nans)
  static const int LLVMRealORD = 7;

  /// < True if unordered: isnan(X) | isnan(Y)
  static const int LLVMRealUNO = 8;

  /// < True if unordered or equal
  static const int LLVMRealUEQ = 9;

  /// < True if unordered or greater than
  static const int LLVMRealUGT = 10;

  /// < True if unordered, greater than, or equal
  static const int LLVMRealUGE = 11;

  /// < True if unordered or less than
  static const int LLVMRealULT = 12;

  /// < True if unordered, less than, or equal
  static const int LLVMRealULE = 13;

  /// < True if unordered or not equal
  static const int LLVMRealUNE = 14;

  /// < Always true (always folded)
  static const int LLVMRealPredicateTrue = 15;
}

abstract class LLVMLandingPadClauseTy {
  /// < A catch clause
  static const int LLVMLandingPadCatch = 0;

  /// < A filter clause
  static const int LLVMLandingPadFilter = 1;
}

abstract class LLVMThreadLocalMode {
  static const int LLVMNotThreadLocal = 0;
  static const int LLVMGeneralDynamicTLSModel = 1;
  static const int LLVMLocalDynamicTLSModel = 2;
  static const int LLVMInitialExecTLSModel = 3;
  static const int LLVMLocalExecTLSModel = 4;
}

abstract class LLVMAtomicOrdering {
  /// < A load or store which is not atomic
  static const int LLVMAtomicOrderingNotAtomic = 0;

  /// < Lowest level of atomicity, guarantees
  /// somewhat sane results, lock free.
  static const int LLVMAtomicOrderingUnordered = 1;

  /// < guarantees that if you take all the
  /// operations affecting a specific address,
  /// a consistent ordering exists
  static const int LLVMAtomicOrderingMonotonic = 2;

  /// < Acquire provides a barrier of the sort
  /// necessary to acquire a lock to access other
  /// memory with normal loads and stores.
  static const int LLVMAtomicOrderingAcquire = 4;

  /// < Release is similar to Acquire, but with
  /// a barrier of the sort necessary to release
  /// a lock.
  static const int LLVMAtomicOrderingRelease = 5;

  /// < provides both an Acquire and a
  /// Release barrier (for fences and
  /// operations which both read and write
  /// memory).
  static const int LLVMAtomicOrderingAcquireRelease = 6;

  /// < provides Acquire semantics
  /// for loads and Release
  /// semantics for stores.
  /// Additionally, it guarantees
  /// that a total ordering exists
  /// between all
  /// SequentiallyConsistent
  /// operations.
  static const int LLVMAtomicOrderingSequentiallyConsistent = 7;
}

abstract class LLVMAtomicRMWBinOp {
  /// < Set the new value and return the one old
  static const int LLVMAtomicRMWBinOpXchg = 0;

  /// < Add a value and return the old one
  static const int LLVMAtomicRMWBinOpAdd = 1;

  /// < Subtract a value and return the old one
  static const int LLVMAtomicRMWBinOpSub = 2;

  /// < And a value and return the old one
  static const int LLVMAtomicRMWBinOpAnd = 3;

  /// < Not-And a value and return the old one
  static const int LLVMAtomicRMWBinOpNand = 4;

  /// < OR a value and return the old one
  static const int LLVMAtomicRMWBinOpOr = 5;

  /// < Xor a value and return the old one
  static const int LLVMAtomicRMWBinOpXor = 6;

  /// < Sets the value if it's greater than the
  /// original using a signed comparison and return
  /// the old one
  static const int LLVMAtomicRMWBinOpMax = 7;

  /// < Sets the value if it's Smaller than the
  /// original using a signed comparison and return
  /// the old one
  static const int LLVMAtomicRMWBinOpMin = 8;

  /// < Sets the value if it's greater than the
  /// original using an unsigned comparison and return
  /// the old one
  static const int LLVMAtomicRMWBinOpUMax = 9;

  /// < Sets the value if it's greater than the
  /// original using an unsigned comparison and return
  /// the old one
  static const int LLVMAtomicRMWBinOpUMin = 10;

  /// < Add a floating point value and return the
  /// old one
  static const int LLVMAtomicRMWBinOpFAdd = 11;

  /// < Subtract a floating point value and return the
  /// old one
  static const int LLVMAtomicRMWBinOpFSub = 12;

  /// < Sets the value if it's greater than the
  /// original using an floating point comparison and
  /// return the old one
  static const int LLVMAtomicRMWBinOpFMax = 13;

  /// < Sets the value if it's smaller than the
  /// original using an floating point comparison and
  /// return the old one
  static const int LLVMAtomicRMWBinOpFMin = 14;
}

abstract class LLVMDiagnosticSeverity {
  static const int LLVMDSError = 0;
  static const int LLVMDSWarning = 1;
  static const int LLVMDSRemark = 2;
  static const int LLVMDSNote = 3;
}

abstract class LLVMInlineAsmDialect {
  static const int LLVMInlineAsmDialectATT = 0;
  static const int LLVMInlineAsmDialectIntel = 1;
}

abstract class LLVMModuleFlagBehavior {
  /// Emits an error if two values disagree, otherwise the resulting value is
  /// that of the operands.
  ///
  /// @see Module::ModFlagBehavior::Error
  static const int LLVMModuleFlagBehaviorError = 0;

  /// Emits a warning if two values disagree. The result value will be the
  /// operand for the flag from the first module being linked.
  ///
  /// @see Module::ModFlagBehavior::Warning
  static const int LLVMModuleFlagBehaviorWarning = 1;

  /// Adds a requirement that another module flag be present and have a
  /// specified value after linking is performed. The value must be a metadata
  /// pair, where the first element of the pair is the ID of the module flag
  /// to be restricted, and the second element of the pair is the value the
  /// module flag should be restricted to. This behavior can be used to
  /// restrict the allowable results (via triggering of an error) of linking
  /// IDs with the **Override** behavior.
  ///
  /// @see Module::ModFlagBehavior::Require
  static const int LLVMModuleFlagBehaviorRequire = 2;

  /// Uses the specified value, regardless of the behavior or value of the
  /// other module. If both modules specify **Override**, but the values
  /// differ, an error will be emitted.
  ///
  /// @see Module::ModFlagBehavior::Override
  static const int LLVMModuleFlagBehaviorOverride = 3;

  /// Appends the two values, which are required to be metadata nodes.
  ///
  /// @see Module::ModFlagBehavior::Append
  static const int LLVMModuleFlagBehaviorAppend = 4;

  /// Appends the two values, which are required to be metadata
  /// nodes. However, duplicate entries in the second list are dropped
  /// during the append operation.
  ///
  /// @see Module::ModFlagBehavior::AppendUnique
  static const int LLVMModuleFlagBehaviorAppendUnique = 5;
}

/// @see llvm::PassRegistry
typedef LLVMPassRegistryRef = ffi.Pointer<LLVMOpaquePassRegistry>;

final class LLVMOpaquePassRegistry extends ffi.Opaque {}

/// The top-level container for all LLVM global data. See the LLVMContext class.
typedef LLVMContextRef = ffi.Pointer<LLVMOpaqueContext>;

final class LLVMOpaqueContext extends ffi.Opaque {}

/// @defgroup LLVMCCoreContext Contexts
///
/// Contexts are execution states for the core LLVM IR system.
///
/// Most types are tied to a context instance. Multiple contexts can
/// exist simultaneously. A single context is not thread safe. However,
/// different contexts can execute on different threads simultaneously.
///
/// @{
typedef LLVMDiagnosticHandler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(LLVMDiagnosticInfoRef, ffi.Pointer<ffi.Void>)>>;

/// @see llvm::DiagnosticInfo
typedef LLVMDiagnosticInfoRef = ffi.Pointer<LLVMOpaqueDiagnosticInfo>;

final class LLVMOpaqueDiagnosticInfo extends ffi.Opaque {}

typedef LLVMYieldCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(LLVMContextRef, ffi.Pointer<ffi.Void>)>>;

/// @defgroup LLVMCSupportTypes Types and Enumerations
///
/// @{
typedef LLVMBool = ffi.Int;

/// Used to represent an attributes.
///
/// @see llvm::Attribute
typedef LLVMAttributeRef = ffi.Pointer<LLVMOpaqueAttributeRef>;

final class LLVMOpaqueAttributeRef extends ffi.Opaque {}

/// Each value in the LLVM IR has a type, an LLVMTypeRef.
///
/// @see llvm::Type
typedef LLVMTypeRef = ffi.Pointer<LLVMOpaqueType>;

final class LLVMOpaqueType extends ffi.Opaque {}

/// The top-level container for all other LLVM Intermediate Representation (IR)
/// objects.
///
/// @see llvm::Module
typedef LLVMModuleRef = ffi.Pointer<LLVMOpaqueModule>;

final class LLVMOpaqueModule extends ffi.Opaque {}

/// @see llvm::Module::ModuleFlagEntry
typedef LLVMModuleFlagEntry = LLVMOpaqueModuleFlagEntry;

final class LLVMOpaqueModuleFlagEntry extends ffi.Opaque {}

/// Represents an LLVM Metadata.
///
/// This models llvm::Metadata.
typedef LLVMMetadataRef = ffi.Pointer<LLVMOpaqueMetadata>;

final class LLVMOpaqueMetadata extends ffi.Opaque {}

/// Represents an individual value in LLVM IR.
///
/// This models llvm::Value.
typedef LLVMValueRef = ffi.Pointer<LLVMOpaqueValue>;

final class LLVMOpaqueValue extends ffi.Opaque {}

/// Represents an LLVM Named Metadata Node.
///
/// This models llvm::NamedMDNode.
typedef LLVMNamedMDNodeRef = ffi.Pointer<LLVMOpaqueNamedMDNode>;

final class LLVMOpaqueNamedMDNode extends ffi.Opaque {}

/// Used to get the users and usees of a Value.
///
/// @see llvm::Use
typedef LLVMUseRef = ffi.Pointer<LLVMOpaqueUse>;

final class LLVMOpaqueUse extends ffi.Opaque {}

/// Represents a basic block of instructions in LLVM IR.
///
/// This models llvm::BasicBlock.
typedef LLVMBasicBlockRef = ffi.Pointer<LLVMOpaqueBasicBlock>;

final class LLVMOpaqueBasicBlock extends ffi.Opaque {}

/// Represents an entry in a Global Object's metadata attachments.
///
/// This models std::pair<unsigned, MDNode *>
typedef LLVMValueMetadataEntry = LLVMOpaqueValueMetadataEntry;

final class LLVMOpaqueValueMetadataEntry extends ffi.Opaque {}

typedef LLVMAttributeIndex = ffi.UnsignedInt;

/// Represents an LLVM basic block builder.
///
/// This models llvm::IRBuilder.
typedef LLVMBuilderRef = ffi.Pointer<LLVMOpaqueBuilder>;

final class LLVMOpaqueBuilder extends ffi.Opaque {}

/// Interface used to provide a module to JIT or interpreter.
/// This is now just a synonym for llvm::Module, but we have to keep using the
/// different type to keep binary compatibility.
typedef LLVMModuleProviderRef = ffi.Pointer<LLVMOpaqueModuleProvider>;

final class LLVMOpaqueModuleProvider extends ffi.Opaque {}

/// Used to pass regions of memory through LLVM interfaces.
///
/// @see llvm::MemoryBuffer
typedef LLVMMemoryBufferRef = ffi.Pointer<LLVMOpaqueMemoryBuffer>;

final class LLVMOpaqueMemoryBuffer extends ffi.Opaque {}

/// @see llvm::PassManagerBase
typedef LLVMPassManagerRef = ffi.Pointer<LLVMOpaquePassManager>;

final class LLVMOpaquePassManager extends ffi.Opaque {}

typedef KModuleRef = ffi.Pointer<KOpaqueModule>;

final class KOpaqueModule extends ffi.Opaque {}

/// Represents an LLVM debug info builder.
///
/// This models llvm::DIBuilder.
typedef LLVMDIBuilderRef = ffi.Pointer<LLVMOpaqueDIBuilder>;

final class LLVMOpaqueDIBuilder extends ffi.Opaque {}

/// @defgroup LLVMCTarget Target information
/// @ingroup LLVMC
///
/// @{
abstract class LLVMByteOrdering {
  static const int LLVMBigEndian = 0;
  static const int LLVMLittleEndian = 1;
}

final class LLVMOpaqueTargetData extends ffi.Opaque {}

final class LLVMOpaqueTargetLibraryInfotData extends ffi.Opaque {}

typedef LLVMTargetDataRef = ffi.Pointer<LLVMOpaqueTargetData>;
typedef LLVMTargetLibraryInfoRef
    = ffi.Pointer<LLVMOpaqueTargetLibraryInfotData>;

final class LLVMOpaqueTargetMachine extends ffi.Opaque {}

final class LLVMTarget extends ffi.Opaque {}

abstract class LLVMCodeGenOptLevel {
  static const int LLVMCodeGenLevelNone = 0;
  static const int LLVMCodeGenLevelLess = 1;
  static const int LLVMCodeGenLevelDefault = 2;
  static const int LLVMCodeGenLevelAggressive = 3;
}

abstract class LLVMRelocMode {
  static const int LLVMRelocDefault = 0;
  static const int LLVMRelocStatic = 1;
  static const int LLVMRelocPIC = 2;
  static const int LLVMRelocDynamicNoPic = 3;
  static const int LLVMRelocROPI = 4;
  static const int LLVMRelocRWPI = 5;
  static const int LLVMRelocROPI_RWPI = 6;
}

abstract class LLVMCodeModel {
  static const int LLVMCodeModelDefault = 0;
  static const int LLVMCodeModelJITDefault = 1;
  static const int LLVMCodeModelTiny = 2;
  static const int LLVMCodeModelSmall = 3;
  static const int LLVMCodeModelKernel = 4;
  static const int LLVMCodeModelMedium = 5;
  static const int LLVMCodeModelLarge = 6;
}

abstract class LLVMCodeGenFileType {
  static const int LLVMAssemblyFile = 0;
  static const int LLVMObjectFile = 1;
}

typedef LLVMTargetRef = ffi.Pointer<LLVMTarget>;

/// @addtogroup LLVMCTarget
///
/// @{
typedef LLVMTargetMachineRef = ffi.Pointer<LLVMOpaqueTargetMachine>;

/// Debug info flags.
abstract class LLVMDIFlags {
  static const int LLVMDIFlagZero = 0;
  static const int LLVMDIFlagPrivate = 1;
  static const int LLVMDIFlagProtected = 2;
  static const int LLVMDIFlagPublic = 3;
  static const int LLVMDIFlagFwdDecl = 4;
  static const int LLVMDIFlagAppleBlock = 8;
  static const int LLVMDIFlagReservedBit4 = 16;
  static const int LLVMDIFlagVirtual = 32;
  static const int LLVMDIFlagArtificial = 64;
  static const int LLVMDIFlagExplicit = 128;
  static const int LLVMDIFlagPrototyped = 256;
  static const int LLVMDIFlagObjcClassComplete = 512;
  static const int LLVMDIFlagObjectPointer = 1024;
  static const int LLVMDIFlagVector = 2048;
  static const int LLVMDIFlagStaticMember = 4096;
  static const int LLVMDIFlagLValueReference = 8192;
  static const int LLVMDIFlagRValueReference = 16384;
  static const int LLVMDIFlagReserved = 32768;
  static const int LLVMDIFlagSingleInheritance = 65536;
  static const int LLVMDIFlagMultipleInheritance = 131072;
  static const int LLVMDIFlagVirtualInheritance = 196608;
  static const int LLVMDIFlagIntroducedVirtual = 262144;
  static const int LLVMDIFlagBitField = 524288;
  static const int LLVMDIFlagNoReturn = 1048576;
  static const int LLVMDIFlagTypePassByValue = 4194304;
  static const int LLVMDIFlagTypePassByReference = 8388608;
  static const int LLVMDIFlagEnumClass = 16777216;
  static const int LLVMDIFlagFixedEnum = 16777216;
  static const int LLVMDIFlagThunk = 33554432;
  static const int LLVMDIFlagNonTrivial = 67108864;
  static const int LLVMDIFlagBigEndian = 134217728;
  static const int LLVMDIFlagLittleEndian = 268435456;
  static const int LLVMDIFlagIndirectVirtualBase = 36;
  static const int LLVMDIFlagAccessibility = 3;
  static const int LLVMDIFlagPtrToMemberRep = 196608;
}

/// Source languages known by DWARF.
abstract class LLVMDWARFSourceLanguage {
  static const int LLVMDWARFSourceLanguageC89 = 0;
  static const int LLVMDWARFSourceLanguageC = 1;
  static const int LLVMDWARFSourceLanguageAda83 = 2;
  static const int LLVMDWARFSourceLanguageC_plus_plus = 3;
  static const int LLVMDWARFSourceLanguageCobol74 = 4;
  static const int LLVMDWARFSourceLanguageCobol85 = 5;
  static const int LLVMDWARFSourceLanguageFortran77 = 6;
  static const int LLVMDWARFSourceLanguageFortran90 = 7;
  static const int LLVMDWARFSourceLanguagePascal83 = 8;
  static const int LLVMDWARFSourceLanguageModula2 = 9;
  static const int LLVMDWARFSourceLanguageJava = 10;
  static const int LLVMDWARFSourceLanguageC99 = 11;
  static const int LLVMDWARFSourceLanguageAda95 = 12;
  static const int LLVMDWARFSourceLanguageFortran95 = 13;
  static const int LLVMDWARFSourceLanguagePLI = 14;
  static const int LLVMDWARFSourceLanguageObjC = 15;
  static const int LLVMDWARFSourceLanguageObjC_plus_plus = 16;
  static const int LLVMDWARFSourceLanguageUPC = 17;
  static const int LLVMDWARFSourceLanguageD = 18;
  static const int LLVMDWARFSourceLanguagePython = 19;
  static const int LLVMDWARFSourceLanguageOpenCL = 20;
  static const int LLVMDWARFSourceLanguageGo = 21;
  static const int LLVMDWARFSourceLanguageModula3 = 22;
  static const int LLVMDWARFSourceLanguageHaskell = 23;
  static const int LLVMDWARFSourceLanguageC_plus_plus_03 = 24;
  static const int LLVMDWARFSourceLanguageC_plus_plus_11 = 25;
  static const int LLVMDWARFSourceLanguageOCaml = 26;
  static const int LLVMDWARFSourceLanguageRust = 27;
  static const int LLVMDWARFSourceLanguageC11 = 28;
  static const int LLVMDWARFSourceLanguageSwift = 29;
  static const int LLVMDWARFSourceLanguageJulia = 30;
  static const int LLVMDWARFSourceLanguageDylan = 31;
  static const int LLVMDWARFSourceLanguageC_plus_plus_14 = 32;
  static const int LLVMDWARFSourceLanguageFortran03 = 33;
  static const int LLVMDWARFSourceLanguageFortran08 = 34;
  static const int LLVMDWARFSourceLanguageRenderScript = 35;
  static const int LLVMDWARFSourceLanguageBLISS = 36;
  static const int LLVMDWARFSourceLanguageKotlin = 37;
  static const int LLVMDWARFSourceLanguageZig = 38;
  static const int LLVMDWARFSourceLanguageCrystal = 39;
  static const int LLVMDWARFSourceLanguageC_plus_plus_17 = 40;
  static const int LLVMDWARFSourceLanguageC_plus_plus_20 = 41;
  static const int LLVMDWARFSourceLanguageC17 = 42;
  static const int LLVMDWARFSourceLanguageFortran18 = 43;
  static const int LLVMDWARFSourceLanguageAda2005 = 44;
  static const int LLVMDWARFSourceLanguageAda2012 = 45;
  static const int LLVMDWARFSourceLanguageMips_Assembler = 46;
  static const int LLVMDWARFSourceLanguageGOOGLE_RenderScript = 47;
  static const int LLVMDWARFSourceLanguageBORLAND_Delphi = 48;
}

/// The amount of debug information to emit.
abstract class LLVMDWARFEmissionKind {
  static const int LLVMDWARFEmissionNone = 0;
  static const int LLVMDWARFEmissionFull = 1;
  static const int LLVMDWARFEmissionLineTablesOnly = 2;
}

/// Describes the kind of macro declaration used for LLVMDIBuilderCreateMacro.
/// @see llvm::dwarf::MacinfoRecordType
/// @note Values are from DW_MACINFO_* constants in the DWARF specification.
abstract class LLVMDWARFMacinfoRecordType {
  static const int LLVMDWARFMacinfoRecordTypeDefine = 1;
  static const int LLVMDWARFMacinfoRecordTypeMacro = 2;
  static const int LLVMDWARFMacinfoRecordTypeStartFile = 3;
  static const int LLVMDWARFMacinfoRecordTypeEndFile = 4;
  static const int LLVMDWARFMacinfoRecordTypeVendorExt = 255;
}

/// An LLVM DWARF type encoding.
typedef LLVMDWARFTypeEncoding = ffi.UnsignedInt;
typedef LLVMMetadataKind = ffi.UnsignedInt;

const int LLVMAttributeReturnIndex = 0;

const int LLVMAttributeFunctionIndex = -1;

const int LLVMMDStringMetadataKind = 0;

const int LLVMConstantAsMetadataMetadataKind = 1;

const int LLVMLocalAsMetadataMetadataKind = 2;

const int LLVMDistinctMDOperandPlaceholderMetadataKind = 3;

const int LLVMMDTupleMetadataKind = 4;

const int LLVMDILocationMetadataKind = 5;

const int LLVMDIExpressionMetadataKind = 6;

const int LLVMDIGlobalVariableExpressionMetadataKind = 7;

const int LLVMGenericDINodeMetadataKind = 8;

const int LLVMDISubrangeMetadataKind = 9;

const int LLVMDIEnumeratorMetadataKind = 10;

const int LLVMDIBasicTypeMetadataKind = 11;

const int LLVMDIDerivedTypeMetadataKind = 12;

const int LLVMDICompositeTypeMetadataKind = 13;

const int LLVMDISubroutineTypeMetadataKind = 14;

const int LLVMDIFileMetadataKind = 15;

const int LLVMDICompileUnitMetadataKind = 16;

const int LLVMDISubprogramMetadataKind = 17;

const int LLVMDILexicalBlockMetadataKind = 18;

const int LLVMDILexicalBlockFileMetadataKind = 19;

const int LLVMDINamespaceMetadataKind = 20;

const int LLVMDIModuleMetadataKind = 21;

const int LLVMDITemplateTypeParameterMetadataKind = 22;

const int LLVMDITemplateValueParameterMetadataKind = 23;

const int LLVMDIGlobalVariableMetadataKind = 24;

const int LLVMDILocalVariableMetadataKind = 25;

const int LLVMDILabelMetadataKind = 26;

const int LLVMDIObjCPropertyMetadataKind = 27;

const int LLVMDIImportedEntityMetadataKind = 28;

const int LLVMDIMacroMetadataKind = 29;

const int LLVMDIMacroFileMetadataKind = 30;

const int LLVMDICommonBlockMetadataKind = 31;

const int LLVMDIStringTypeMetadataKind = 32;

const int LLVMDIGenericSubrangeMetadataKind = 33;

const int LLVMDIArgListMetadataKind = 34;

const int LLVMDIAssignIDMetadataKind = 35;

const String LLVM_DEFAULT_TARGET_TRIPLE = 'arm64-apple-darwin22.4.0';

const int LLVM_ENABLE_THREADS = 1;

const int LLVM_HAS_ATOMICS = 1;

const String LLVM_HOST_TRIPLE = 'arm64-apple-darwin22.4.0';

const int LLVM_ON_UNIX = 1;

const int LLVM_USE_INTEL_JITEVENTS = 0;

const int LLVM_USE_OPROFILE = 0;

const int LLVM_USE_PERF = 0;

const int LLVM_VERSION_MAJOR = 16;

const int LLVM_VERSION_MINOR = 0;

const int LLVM_VERSION_PATCH = 6;

const String LLVM_VERSION_STRING = '16.0.6';

const int LLVM_FORCE_ENABLE_STATS = 0;

const int LLVM_WITH_Z3 = 1;

const int LLVM_ENABLE_ZLIB = 1;

const int LLVM_ENABLE_ZSTD = 1;

const int HAVE_SYSEXITS_H = 1;

const int LLVM_HAVE_LIBXAR = 1;

const int LLVM_UNREACHABLE_OPTIMIZE = 1;

const int LLVM_ENABLE_DIA_SDK = 0;

const int LLVM_ENABLE_ABI_BREAKING_CHECKS = 0;

const int LLVM_ENABLE_REVERSE_ITERATION = 0;
