// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class LLVMCore {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LLVMCore(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LLVMCore.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void LLVMInitializeCore(
    LLVMPassRegistryRef R,
  ) {
    return _LLVMInitializeCore(
      R,
    );
  }

  late final _LLVMInitializeCorePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMPassRegistryRef)>>(
          'LLVMInitializeCore');
  late final _LLVMInitializeCore =
      _LLVMInitializeCorePtr.asFunction<void Function(LLVMPassRegistryRef)>();

  void LLVMShutdown() {
    return _LLVMShutdown();
  }

  late final _LLVMShutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('LLVMShutdown');
  late final _LLVMShutdown = _LLVMShutdownPtr.asFunction<void Function()>();

  void LLVMGetVersion(
    ffi.Pointer<ffi.UnsignedInt> Major,
    ffi.Pointer<ffi.UnsignedInt> Minor,
    ffi.Pointer<ffi.UnsignedInt> Patch,
  ) {
    return _LLVMGetVersion(
      Major,
      Minor,
      Patch,
    );
  }

  late final _LLVMGetVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMGetVersion');
  late final _LLVMGetVersion = _LLVMGetVersionPtr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> LLVMCreateMessage(
    ffi.Pointer<ffi.Char> Message,
  ) {
    return _LLVMCreateMessage(
      Message,
    );
  }

  late final _LLVMCreateMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('LLVMCreateMessage');
  late final _LLVMCreateMessage = _LLVMCreateMessagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void LLVMDisposeMessage(
    ffi.Pointer<ffi.Char> Message,
  ) {
    return _LLVMDisposeMessage(
      Message,
    );
  }

  late final _LLVMDisposeMessagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'LLVMDisposeMessage');
  late final _LLVMDisposeMessage =
      _LLVMDisposeMessagePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  LLVMContextRef LLVMContextCreate() {
    return _LLVMContextCreate();
  }

  late final _LLVMContextCreatePtr =
      _lookup<ffi.NativeFunction<LLVMContextRef Function()>>(
          'LLVMContextCreate');
  late final _LLVMContextCreate =
      _LLVMContextCreatePtr.asFunction<LLVMContextRef Function()>();

  LLVMContextRef LLVMGetGlobalContext() {
    return _LLVMGetGlobalContext();
  }

  late final _LLVMGetGlobalContextPtr =
      _lookup<ffi.NativeFunction<LLVMContextRef Function()>>(
          'LLVMGetGlobalContext');
  late final _LLVMGetGlobalContext =
      _LLVMGetGlobalContextPtr.asFunction<LLVMContextRef Function()>();

  void LLVMContextSetDiagnosticHandler(
    LLVMContextRef C,
    LLVMDiagnosticHandler Handler,
    ffi.Pointer<ffi.Void> DiagnosticContext,
  ) {
    return _LLVMContextSetDiagnosticHandler(
      C,
      Handler,
      DiagnosticContext,
    );
  }

  late final _LLVMContextSetDiagnosticHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMContextRef, LLVMDiagnosticHandler,
              ffi.Pointer<ffi.Void>)>>('LLVMContextSetDiagnosticHandler');
  late final _LLVMContextSetDiagnosticHandler =
      _LLVMContextSetDiagnosticHandlerPtr.asFunction<
          void Function(
              LLVMContextRef, LLVMDiagnosticHandler, ffi.Pointer<ffi.Void>)>();

  LLVMDiagnosticHandler LLVMContextGetDiagnosticHandler(
    LLVMContextRef C,
  ) {
    return _LLVMContextGetDiagnosticHandler(
      C,
    );
  }

  late final _LLVMContextGetDiagnosticHandlerPtr = _lookup<
          ffi.NativeFunction<LLVMDiagnosticHandler Function(LLVMContextRef)>>(
      'LLVMContextGetDiagnosticHandler');
  late final _LLVMContextGetDiagnosticHandler =
      _LLVMContextGetDiagnosticHandlerPtr.asFunction<
          LLVMDiagnosticHandler Function(LLVMContextRef)>();

  ffi.Pointer<ffi.Void> LLVMContextGetDiagnosticContext(
    LLVMContextRef C,
  ) {
    return _LLVMContextGetDiagnosticContext(
      C,
    );
  }

  late final _LLVMContextGetDiagnosticContextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(LLVMContextRef)>>(
      'LLVMContextGetDiagnosticContext');
  late final _LLVMContextGetDiagnosticContext =
      _LLVMContextGetDiagnosticContextPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(LLVMContextRef)>();

  void LLVMContextSetYieldCallback(
    LLVMContextRef C,
    LLVMYieldCallback Callback,
    ffi.Pointer<ffi.Void> OpaqueHandle,
  ) {
    return _LLVMContextSetYieldCallback(
      C,
      Callback,
      OpaqueHandle,
    );
  }

  late final _LLVMContextSetYieldCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMContextRef, LLVMYieldCallback,
              ffi.Pointer<ffi.Void>)>>('LLVMContextSetYieldCallback');
  late final _LLVMContextSetYieldCallback =
      _LLVMContextSetYieldCallbackPtr.asFunction<
          void Function(
              LLVMContextRef, LLVMYieldCallback, ffi.Pointer<ffi.Void>)>();

  int LLVMContextShouldDiscardValueNames(
    LLVMContextRef C,
  ) {
    return _LLVMContextShouldDiscardValueNames(
      C,
    );
  }

  late final _LLVMContextShouldDiscardValueNamesPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMContextRef)>>(
          'LLVMContextShouldDiscardValueNames');
  late final _LLVMContextShouldDiscardValueNames =
      _LLVMContextShouldDiscardValueNamesPtr.asFunction<
          int Function(LLVMContextRef)>();

  void LLVMContextSetDiscardValueNames(
    LLVMContextRef C,
    int Discard,
  ) {
    return _LLVMContextSetDiscardValueNames(
      C,
      Discard,
    );
  }

  late final _LLVMContextSetDiscardValueNamesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMContextRef, LLVMBool)>>(
          'LLVMContextSetDiscardValueNames');
  late final _LLVMContextSetDiscardValueNames =
      _LLVMContextSetDiscardValueNamesPtr.asFunction<
          void Function(LLVMContextRef, int)>();

  void LLVMContextDispose(
    LLVMContextRef C,
  ) {
    return _LLVMContextDispose(
      C,
    );
  }

  late final _LLVMContextDisposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMContextRef)>>(
          'LLVMContextDispose');
  late final _LLVMContextDispose =
      _LLVMContextDisposePtr.asFunction<void Function(LLVMContextRef)>();

  ffi.Pointer<ffi.Char> LLVMGetDiagInfoDescription(
    LLVMDiagnosticInfoRef DI,
  ) {
    return _LLVMGetDiagInfoDescription(
      DI,
    );
  }

  late final _LLVMGetDiagInfoDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMDiagnosticInfoRef)>>('LLVMGetDiagInfoDescription');
  late final _LLVMGetDiagInfoDescription = _LLVMGetDiagInfoDescriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(LLVMDiagnosticInfoRef)>();

  int LLVMGetDiagInfoSeverity(
    LLVMDiagnosticInfoRef DI,
  ) {
    return _LLVMGetDiagInfoSeverity(
      DI,
    );
  }

  late final _LLVMGetDiagInfoSeverityPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMDiagnosticInfoRef)>>(
          'LLVMGetDiagInfoSeverity');
  late final _LLVMGetDiagInfoSeverity = _LLVMGetDiagInfoSeverityPtr.asFunction<
      int Function(LLVMDiagnosticInfoRef)>();

  int LLVMGetMDKindIDInContext(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Name,
    int SLen,
  ) {
    return _LLVMGetMDKindIDInContext(
      C,
      Name,
      SLen,
    );
  }

  late final _LLVMGetMDKindIDInContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(LLVMContextRef, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMGetMDKindIDInContext');
  late final _LLVMGetMDKindIDInContext = _LLVMGetMDKindIDInContextPtr
      .asFunction<int Function(LLVMContextRef, ffi.Pointer<ffi.Char>, int)>();

  int LLVMGetMDKindID(
    ffi.Pointer<ffi.Char> Name,
    int SLen,
  ) {
    return _LLVMGetMDKindID(
      Name,
      SLen,
    );
  }

  late final _LLVMGetMDKindIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('LLVMGetMDKindID');
  late final _LLVMGetMDKindID = _LLVMGetMDKindIDPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  int LLVMGetEnumAttributeKindForName(
    ffi.Pointer<ffi.Char> Name,
    int SLen,
  ) {
    return _LLVMGetEnumAttributeKindForName(
      Name,
      SLen,
    );
  }

  late final _LLVMGetEnumAttributeKindForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>,
              ffi.Int)>>('LLVMGetEnumAttributeKindForName');
  late final _LLVMGetEnumAttributeKindForName =
      _LLVMGetEnumAttributeKindForNamePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int)>();

  int LLVMGetLastEnumAttributeKind() {
    return _LLVMGetLastEnumAttributeKind();
  }

  late final _LLVMGetLastEnumAttributeKindPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'LLVMGetLastEnumAttributeKind');
  late final _LLVMGetLastEnumAttributeKind =
      _LLVMGetLastEnumAttributeKindPtr.asFunction<int Function()>();

  LLVMAttributeRef LLVMCreateEnumAttribute(
    LLVMContextRef C,
    int KindID,
    int Val,
  ) {
    return _LLVMCreateEnumAttribute(
      C,
      KindID,
      Val,
    );
  }

  late final _LLVMCreateEnumAttributePtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(LLVMContextRef, ffi.UnsignedInt,
              ffi.Uint64)>>('LLVMCreateEnumAttribute');
  late final _LLVMCreateEnumAttribute = _LLVMCreateEnumAttributePtr.asFunction<
      LLVMAttributeRef Function(LLVMContextRef, int, int)>();

  int LLVMGetEnumAttributeKind(
    LLVMAttributeRef A,
  ) {
    return _LLVMGetEnumAttributeKind(
      A,
    );
  }

  late final _LLVMGetEnumAttributeKindPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMAttributeRef)>>(
          'LLVMGetEnumAttributeKind');
  late final _LLVMGetEnumAttributeKind =
      _LLVMGetEnumAttributeKindPtr.asFunction<int Function(LLVMAttributeRef)>();

  int LLVMGetEnumAttributeValue(
    LLVMAttributeRef A,
  ) {
    return _LLVMGetEnumAttributeValue(
      A,
    );
  }

  late final _LLVMGetEnumAttributeValuePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(LLVMAttributeRef)>>(
          'LLVMGetEnumAttributeValue');
  late final _LLVMGetEnumAttributeValue = _LLVMGetEnumAttributeValuePtr
      .asFunction<int Function(LLVMAttributeRef)>();

  LLVMAttributeRef LLVMCreateTypeAttribute(
    LLVMContextRef C,
    int KindID,
    LLVMTypeRef type_ref,
  ) {
    return _LLVMCreateTypeAttribute(
      C,
      KindID,
      type_ref,
    );
  }

  late final _LLVMCreateTypeAttributePtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(LLVMContextRef, ffi.UnsignedInt,
              LLVMTypeRef)>>('LLVMCreateTypeAttribute');
  late final _LLVMCreateTypeAttribute = _LLVMCreateTypeAttributePtr.asFunction<
      LLVMAttributeRef Function(LLVMContextRef, int, LLVMTypeRef)>();

  LLVMTypeRef LLVMGetTypeAttributeValue(
    LLVMAttributeRef A,
  ) {
    return _LLVMGetTypeAttributeValue(
      A,
    );
  }

  late final _LLVMGetTypeAttributeValuePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMAttributeRef)>>(
          'LLVMGetTypeAttributeValue');
  late final _LLVMGetTypeAttributeValue = _LLVMGetTypeAttributeValuePtr
      .asFunction<LLVMTypeRef Function(LLVMAttributeRef)>();

  LLVMAttributeRef LLVMCreateStringAttribute(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> K,
    int KLength,
    ffi.Pointer<ffi.Char> V,
    int VLength,
  ) {
    return _LLVMCreateStringAttribute(
      C,
      K,
      KLength,
      V,
      VLength,
    );
  }

  late final _LLVMCreateStringAttributePtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(
              LLVMContextRef,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMCreateStringAttribute');
  late final _LLVMCreateStringAttribute =
      _LLVMCreateStringAttributePtr.asFunction<
          LLVMAttributeRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> LLVMGetStringAttributeKind(
    LLVMAttributeRef A,
    ffi.Pointer<ffi.UnsignedInt> Length,
  ) {
    return _LLVMGetStringAttributeKind(
      A,
      Length,
    );
  }

  late final _LLVMGetStringAttributeKindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMAttributeRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMGetStringAttributeKind');
  late final _LLVMGetStringAttributeKind =
      _LLVMGetStringAttributeKindPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMAttributeRef, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> LLVMGetStringAttributeValue(
    LLVMAttributeRef A,
    ffi.Pointer<ffi.UnsignedInt> Length,
  ) {
    return _LLVMGetStringAttributeValue(
      A,
      Length,
    );
  }

  late final _LLVMGetStringAttributeValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMAttributeRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMGetStringAttributeValue');
  late final _LLVMGetStringAttributeValue =
      _LLVMGetStringAttributeValuePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMAttributeRef, ffi.Pointer<ffi.UnsignedInt>)>();

  int LLVMIsEnumAttribute(
    LLVMAttributeRef A,
  ) {
    return _LLVMIsEnumAttribute(
      A,
    );
  }

  late final _LLVMIsEnumAttributePtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMAttributeRef)>>(
          'LLVMIsEnumAttribute');
  late final _LLVMIsEnumAttribute =
      _LLVMIsEnumAttributePtr.asFunction<int Function(LLVMAttributeRef)>();

  int LLVMIsStringAttribute(
    LLVMAttributeRef A,
  ) {
    return _LLVMIsStringAttribute(
      A,
    );
  }

  late final _LLVMIsStringAttributePtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMAttributeRef)>>(
          'LLVMIsStringAttribute');
  late final _LLVMIsStringAttribute =
      _LLVMIsStringAttributePtr.asFunction<int Function(LLVMAttributeRef)>();

  int LLVMIsTypeAttribute(
    LLVMAttributeRef A,
  ) {
    return _LLVMIsTypeAttribute(
      A,
    );
  }

  late final _LLVMIsTypeAttributePtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMAttributeRef)>>(
          'LLVMIsTypeAttribute');
  late final _LLVMIsTypeAttribute =
      _LLVMIsTypeAttributePtr.asFunction<int Function(LLVMAttributeRef)>();

  LLVMTypeRef LLVMGetTypeByName2(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMGetTypeByName2(
      C,
      Name,
    );
  }

  late final _LLVMGetTypeByName2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMContextRef, ffi.Pointer<ffi.Char>)>>('LLVMGetTypeByName2');
  late final _LLVMGetTypeByName2 = _LLVMGetTypeByName2Ptr.asFunction<
      LLVMTypeRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>)>();

  LLVMModuleRef LLVMModuleCreateWithName(
    ffi.Pointer<ffi.Char> ModuleID,
  ) {
    return _LLVMModuleCreateWithName(
      ModuleID,
    );
  }

  late final _LLVMModuleCreateWithNamePtr = _lookup<
          ffi.NativeFunction<LLVMModuleRef Function(ffi.Pointer<ffi.Char>)>>(
      'LLVMModuleCreateWithName');
  late final _LLVMModuleCreateWithName = _LLVMModuleCreateWithNamePtr
      .asFunction<LLVMModuleRef Function(ffi.Pointer<ffi.Char>)>();

  LLVMModuleRef LLVMModuleCreateWithNameInContext(
    ffi.Pointer<ffi.Char> ModuleID,
    LLVMContextRef C,
  ) {
    return _LLVMModuleCreateWithNameInContext(
      ModuleID,
      C,
    );
  }

  late final _LLVMModuleCreateWithNameInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMModuleRef Function(ffi.Pointer<ffi.Char>,
              LLVMContextRef)>>('LLVMModuleCreateWithNameInContext');
  late final _LLVMModuleCreateWithNameInContext =
      _LLVMModuleCreateWithNameInContextPtr.asFunction<
          LLVMModuleRef Function(ffi.Pointer<ffi.Char>, LLVMContextRef)>();

  LLVMModuleRef LLVMCloneModule(
    LLVMModuleRef M,
  ) {
    return _LLVMCloneModule(
      M,
    );
  }

  late final _LLVMCloneModulePtr =
      _lookup<ffi.NativeFunction<LLVMModuleRef Function(LLVMModuleRef)>>(
          'LLVMCloneModule');
  late final _LLVMCloneModule =
      _LLVMCloneModulePtr.asFunction<LLVMModuleRef Function(LLVMModuleRef)>();

  void LLVMDisposeModule(
    LLVMModuleRef M,
  ) {
    return _LLVMDisposeModule(
      M,
    );
  }

  late final _LLVMDisposeModulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMModuleRef)>>(
          'LLVMDisposeModule');
  late final _LLVMDisposeModule =
      _LLVMDisposeModulePtr.asFunction<void Function(LLVMModuleRef)>();

  ffi.Pointer<ffi.Char> LLVMGetModuleIdentifier(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Int> Len,
  ) {
    return _LLVMGetModuleIdentifier(
      M,
      Len,
    );
  }

  late final _LLVMGetModuleIdentifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMModuleRef, ffi.Pointer<ffi.Int>)>>('LLVMGetModuleIdentifier');
  late final _LLVMGetModuleIdentifier = _LLVMGetModuleIdentifierPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef, ffi.Pointer<ffi.Int>)>();

  void LLVMSetModuleIdentifier(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Ident,
    int Len,
  ) {
    return _LLVMSetModuleIdentifier(
      M,
      Ident,
      Len,
    );
  }

  late final _LLVMSetModuleIdentifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('LLVMSetModuleIdentifier');
  late final _LLVMSetModuleIdentifier = _LLVMSetModuleIdentifierPtr.asFunction<
      void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> LLVMGetSourceFileName(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Int> Len,
  ) {
    return _LLVMGetSourceFileName(
      M,
      Len,
    );
  }

  late final _LLVMGetSourceFileNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMModuleRef, ffi.Pointer<ffi.Int>)>>('LLVMGetSourceFileName');
  late final _LLVMGetSourceFileName = _LLVMGetSourceFileNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef, ffi.Pointer<ffi.Int>)>();

  void LLVMSetSourceFileName(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    int Len,
  ) {
    return _LLVMSetSourceFileName(
      M,
      Name,
      Len,
    );
  }

  late final _LLVMSetSourceFileNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('LLVMSetSourceFileName');
  late final _LLVMSetSourceFileName = _LLVMSetSourceFileNamePtr.asFunction<
      void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> LLVMGetDataLayoutStr(
    LLVMModuleRef M,
  ) {
    return _LLVMGetDataLayoutStr(
      M,
    );
  }

  late final _LLVMGetDataLayoutStrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>>(
      'LLVMGetDataLayoutStr');
  late final _LLVMGetDataLayoutStr = _LLVMGetDataLayoutStrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>();

  ffi.Pointer<ffi.Char> LLVMGetDataLayout(
    LLVMModuleRef M,
  ) {
    return _LLVMGetDataLayout(
      M,
    );
  }

  late final _LLVMGetDataLayoutPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>>(
      'LLVMGetDataLayout');
  late final _LLVMGetDataLayout = _LLVMGetDataLayoutPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>();

  void LLVMSetDataLayout(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> DataLayoutStr,
  ) {
    return _LLVMSetDataLayout(
      M,
      DataLayoutStr,
    );
  }

  late final _LLVMSetDataLayoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>)>>('LLVMSetDataLayout');
  late final _LLVMSetDataLayout = _LLVMSetDataLayoutPtr.asFunction<
      void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> LLVMGetTarget(
    LLVMModuleRef M,
  ) {
    return _LLVMGetTarget(
      M,
    );
  }

  late final _LLVMGetTargetPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>>(
      'LLVMGetTarget');
  late final _LLVMGetTarget = _LLVMGetTargetPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>();

  void LLVMSetTarget(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Triple,
  ) {
    return _LLVMSetTarget(
      M,
      Triple,
    );
  }

  late final _LLVMSetTargetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>)>>('LLVMSetTarget');
  late final _LLVMSetTarget = _LLVMSetTargetPtr.asFunction<
      void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<LLVMModuleFlagEntry> LLVMCopyModuleFlagsMetadata(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Int> Len,
  ) {
    return _LLVMCopyModuleFlagsMetadata(
      M,
      Len,
    );
  }

  late final _LLVMCopyModuleFlagsMetadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LLVMModuleFlagEntry> Function(LLVMModuleRef,
              ffi.Pointer<ffi.Int>)>>('LLVMCopyModuleFlagsMetadata');
  late final _LLVMCopyModuleFlagsMetadata =
      _LLVMCopyModuleFlagsMetadataPtr.asFunction<
          ffi.Pointer<LLVMModuleFlagEntry> Function(
              LLVMModuleRef, ffi.Pointer<ffi.Int>)>();

  void LLVMDisposeModuleFlagsMetadata(
    ffi.Pointer<LLVMModuleFlagEntry> Entries,
  ) {
    return _LLVMDisposeModuleFlagsMetadata(
      Entries,
    );
  }

  late final _LLVMDisposeModuleFlagsMetadataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<LLVMModuleFlagEntry>)>>(
      'LLVMDisposeModuleFlagsMetadata');
  late final _LLVMDisposeModuleFlagsMetadata =
      _LLVMDisposeModuleFlagsMetadataPtr.asFunction<
          void Function(ffi.Pointer<LLVMModuleFlagEntry>)>();

  int LLVMModuleFlagEntriesGetFlagBehavior(
    ffi.Pointer<LLVMModuleFlagEntry> Entries,
    int Index,
  ) {
    return _LLVMModuleFlagEntriesGetFlagBehavior(
      Entries,
      Index,
    );
  }

  late final _LLVMModuleFlagEntriesGetFlagBehaviorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<LLVMModuleFlagEntry>,
              ffi.UnsignedInt)>>('LLVMModuleFlagEntriesGetFlagBehavior');
  late final _LLVMModuleFlagEntriesGetFlagBehavior =
      _LLVMModuleFlagEntriesGetFlagBehaviorPtr.asFunction<
          int Function(ffi.Pointer<LLVMModuleFlagEntry>, int)>();

  ffi.Pointer<ffi.Char> LLVMModuleFlagEntriesGetKey(
    ffi.Pointer<LLVMModuleFlagEntry> Entries,
    int Index,
    ffi.Pointer<ffi.Int> Len,
  ) {
    return _LLVMModuleFlagEntriesGetKey(
      Entries,
      Index,
      Len,
    );
  }

  late final _LLVMModuleFlagEntriesGetKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<LLVMModuleFlagEntry>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>)>>('LLVMModuleFlagEntriesGetKey');
  late final _LLVMModuleFlagEntriesGetKey =
      _LLVMModuleFlagEntriesGetKeyPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<LLVMModuleFlagEntry>, int, ffi.Pointer<ffi.Int>)>();

  LLVMMetadataRef LLVMModuleFlagEntriesGetMetadata(
    ffi.Pointer<LLVMModuleFlagEntry> Entries,
    int Index,
  ) {
    return _LLVMModuleFlagEntriesGetMetadata(
      Entries,
      Index,
    );
  }

  late final _LLVMModuleFlagEntriesGetMetadataPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(ffi.Pointer<LLVMModuleFlagEntry>,
              ffi.UnsignedInt)>>('LLVMModuleFlagEntriesGetMetadata');
  late final _LLVMModuleFlagEntriesGetMetadata =
      _LLVMModuleFlagEntriesGetMetadataPtr.asFunction<
          LLVMMetadataRef Function(ffi.Pointer<LLVMModuleFlagEntry>, int)>();

  LLVMMetadataRef LLVMGetModuleFlag(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Key,
    int KeyLen,
  ) {
    return _LLVMGetModuleFlag(
      M,
      Key,
      KeyLen,
    );
  }

  late final _LLVMGetModuleFlagPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('LLVMGetModuleFlag');
  late final _LLVMGetModuleFlag = _LLVMGetModuleFlagPtr.asFunction<
      LLVMMetadataRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  void LLVMAddModuleFlag(
    LLVMModuleRef M,
    int Behavior,
    ffi.Pointer<ffi.Char> Key,
    int KeyLen,
    LLVMMetadataRef Val,
  ) {
    return _LLVMAddModuleFlag(
      M,
      Behavior,
      Key,
      KeyLen,
      Val,
    );
  }

  late final _LLVMAddModuleFlagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Int32, ffi.Pointer<ffi.Char>,
              ffi.Int, LLVMMetadataRef)>>('LLVMAddModuleFlag');
  late final _LLVMAddModuleFlag = _LLVMAddModuleFlagPtr.asFunction<
      void Function(
          LLVMModuleRef, int, ffi.Pointer<ffi.Char>, int, LLVMMetadataRef)>();

  void LLVMDumpModule(
    LLVMModuleRef M,
  ) {
    return _LLVMDumpModule(
      M,
    );
  }

  late final _LLVMDumpModulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMModuleRef)>>(
          'LLVMDumpModule');
  late final _LLVMDumpModule =
      _LLVMDumpModulePtr.asFunction<void Function(LLVMModuleRef)>();

  int LLVMPrintModuleToFile(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Filename,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ErrorMessage,
  ) {
    return _LLVMPrintModuleToFile(
      M,
      Filename,
      ErrorMessage,
    );
  }

  late final _LLVMPrintModuleToFilePtr = _lookup<
      ffi.NativeFunction<
          LLVMBool Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('LLVMPrintModuleToFile');
  late final _LLVMPrintModuleToFile = _LLVMPrintModuleToFilePtr.asFunction<
      int Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> LLVMPrintModuleToString(
    LLVMModuleRef M,
  ) {
    return _LLVMPrintModuleToString(
      M,
    );
  }

  late final _LLVMPrintModuleToStringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>>(
      'LLVMPrintModuleToString');
  late final _LLVMPrintModuleToString = _LLVMPrintModuleToStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef)>();

  ffi.Pointer<ffi.Char> LLVMGetModuleInlineAsm(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Int> Len,
  ) {
    return _LLVMGetModuleInlineAsm(
      M,
      Len,
    );
  }

  late final _LLVMGetModuleInlineAsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMModuleRef, ffi.Pointer<ffi.Int>)>>('LLVMGetModuleInlineAsm');
  late final _LLVMGetModuleInlineAsm = _LLVMGetModuleInlineAsmPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMModuleRef, ffi.Pointer<ffi.Int>)>();

  void LLVMSetModuleInlineAsm2(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Asm,
    int Len,
  ) {
    return _LLVMSetModuleInlineAsm2(
      M,
      Asm,
      Len,
    );
  }

  late final _LLVMSetModuleInlineAsm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('LLVMSetModuleInlineAsm2');
  late final _LLVMSetModuleInlineAsm2 = _LLVMSetModuleInlineAsm2Ptr.asFunction<
      void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  void LLVMAppendModuleInlineAsm(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Asm,
    int Len,
  ) {
    return _LLVMAppendModuleInlineAsm(
      M,
      Asm,
      Len,
    );
  }

  late final _LLVMAppendModuleInlineAsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('LLVMAppendModuleInlineAsm');
  late final _LLVMAppendModuleInlineAsm = _LLVMAppendModuleInlineAsmPtr
      .asFunction<void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  LLVMValueRef LLVMGetInlineAsm(
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> AsmString,
    int AsmStringSize,
    ffi.Pointer<ffi.Char> Constraints,
    int ConstraintsSize,
    int HasSideEffects,
    int IsAlignStack,
    int Dialect,
    int CanThrow,
  ) {
    return _LLVMGetInlineAsm(
      Ty,
      AsmString,
      AsmStringSize,
      Constraints,
      ConstraintsSize,
      HasSideEffects,
      IsAlignStack,
      Dialect,
      CanThrow,
    );
  }

  late final _LLVMGetInlineAsmPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMTypeRef,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              LLVMBool,
              LLVMBool,
              ffi.Int32,
              LLVMBool)>>('LLVMGetInlineAsm');
  late final _LLVMGetInlineAsm = _LLVMGetInlineAsmPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, int, int, int, int)>();

  LLVMContextRef LLVMGetModuleContext(
    LLVMModuleRef M,
  ) {
    return _LLVMGetModuleContext(
      M,
    );
  }

  late final _LLVMGetModuleContextPtr =
      _lookup<ffi.NativeFunction<LLVMContextRef Function(LLVMModuleRef)>>(
          'LLVMGetModuleContext');
  late final _LLVMGetModuleContext = _LLVMGetModuleContextPtr.asFunction<
      LLVMContextRef Function(LLVMModuleRef)>();

  LLVMTypeRef LLVMGetTypeByName(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMGetTypeByName(
      M,
      Name,
    );
  }

  late final _LLVMGetTypeByNamePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>)>>('LLVMGetTypeByName');
  late final _LLVMGetTypeByName = _LLVMGetTypeByNamePtr.asFunction<
      LLVMTypeRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  LLVMNamedMDNodeRef LLVMGetFirstNamedMetadata(
    LLVMModuleRef M,
  ) {
    return _LLVMGetFirstNamedMetadata(
      M,
    );
  }

  late final _LLVMGetFirstNamedMetadataPtr =
      _lookup<ffi.NativeFunction<LLVMNamedMDNodeRef Function(LLVMModuleRef)>>(
          'LLVMGetFirstNamedMetadata');
  late final _LLVMGetFirstNamedMetadata = _LLVMGetFirstNamedMetadataPtr
      .asFunction<LLVMNamedMDNodeRef Function(LLVMModuleRef)>();

  LLVMNamedMDNodeRef LLVMGetLastNamedMetadata(
    LLVMModuleRef M,
  ) {
    return _LLVMGetLastNamedMetadata(
      M,
    );
  }

  late final _LLVMGetLastNamedMetadataPtr =
      _lookup<ffi.NativeFunction<LLVMNamedMDNodeRef Function(LLVMModuleRef)>>(
          'LLVMGetLastNamedMetadata');
  late final _LLVMGetLastNamedMetadata = _LLVMGetLastNamedMetadataPtr
      .asFunction<LLVMNamedMDNodeRef Function(LLVMModuleRef)>();

  LLVMNamedMDNodeRef LLVMGetNextNamedMetadata(
    LLVMNamedMDNodeRef NamedMDNode,
  ) {
    return _LLVMGetNextNamedMetadata(
      NamedMDNode,
    );
  }

  late final _LLVMGetNextNamedMetadataPtr = _lookup<
          ffi.NativeFunction<LLVMNamedMDNodeRef Function(LLVMNamedMDNodeRef)>>(
      'LLVMGetNextNamedMetadata');
  late final _LLVMGetNextNamedMetadata = _LLVMGetNextNamedMetadataPtr
      .asFunction<LLVMNamedMDNodeRef Function(LLVMNamedMDNodeRef)>();

  LLVMNamedMDNodeRef LLVMGetPreviousNamedMetadata(
    LLVMNamedMDNodeRef NamedMDNode,
  ) {
    return _LLVMGetPreviousNamedMetadata(
      NamedMDNode,
    );
  }

  late final _LLVMGetPreviousNamedMetadataPtr = _lookup<
          ffi.NativeFunction<LLVMNamedMDNodeRef Function(LLVMNamedMDNodeRef)>>(
      'LLVMGetPreviousNamedMetadata');
  late final _LLVMGetPreviousNamedMetadata = _LLVMGetPreviousNamedMetadataPtr
      .asFunction<LLVMNamedMDNodeRef Function(LLVMNamedMDNodeRef)>();

  LLVMNamedMDNodeRef LLVMGetNamedMetadata(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMGetNamedMetadata(
      M,
      Name,
      NameLen,
    );
  }

  late final _LLVMGetNamedMetadataPtr = _lookup<
      ffi.NativeFunction<
          LLVMNamedMDNodeRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('LLVMGetNamedMetadata');
  late final _LLVMGetNamedMetadata = _LLVMGetNamedMetadataPtr.asFunction<
      LLVMNamedMDNodeRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  LLVMNamedMDNodeRef LLVMGetOrInsertNamedMetadata(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMGetOrInsertNamedMetadata(
      M,
      Name,
      NameLen,
    );
  }

  late final _LLVMGetOrInsertNamedMetadataPtr = _lookup<
      ffi.NativeFunction<
          LLVMNamedMDNodeRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('LLVMGetOrInsertNamedMetadata');
  late final _LLVMGetOrInsertNamedMetadata =
      _LLVMGetOrInsertNamedMetadataPtr.asFunction<
          LLVMNamedMDNodeRef Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> LLVMGetNamedMetadataName(
    LLVMNamedMDNodeRef NamedMD,
    ffi.Pointer<ffi.Int> NameLen,
  ) {
    return _LLVMGetNamedMetadataName(
      NamedMD,
      NameLen,
    );
  }

  late final _LLVMGetNamedMetadataNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMNamedMDNodeRef,
              ffi.Pointer<ffi.Int>)>>('LLVMGetNamedMetadataName');
  late final _LLVMGetNamedMetadataName =
      _LLVMGetNamedMetadataNamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMNamedMDNodeRef, ffi.Pointer<ffi.Int>)>();

  int LLVMGetNamedMetadataNumOperands(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMGetNamedMetadataNumOperands(
      M,
      Name,
    );
  }

  late final _LLVMGetNamedMetadataNumOperandsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(LLVMModuleRef,
              ffi.Pointer<ffi.Char>)>>('LLVMGetNamedMetadataNumOperands');
  late final _LLVMGetNamedMetadataNumOperands =
      _LLVMGetNamedMetadataNumOperandsPtr.asFunction<
          int Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  void LLVMGetNamedMetadataOperands(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    ffi.Pointer<LLVMValueRef> Dest,
  ) {
    return _LLVMGetNamedMetadataOperands(
      M,
      Name,
      Dest,
    );
  }

  late final _LLVMGetNamedMetadataOperandsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<LLVMValueRef>)>>('LLVMGetNamedMetadataOperands');
  late final _LLVMGetNamedMetadataOperands =
      _LLVMGetNamedMetadataOperandsPtr.asFunction<
          void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<LLVMValueRef>)>();

  void LLVMAddNamedMetadataOperand(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    LLVMValueRef Val,
  ) {
    return _LLVMAddNamedMetadataOperand(
      M,
      Name,
      Val,
    );
  }

  late final _LLVMAddNamedMetadataOperandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              LLVMValueRef)>>('LLVMAddNamedMetadataOperand');
  late final _LLVMAddNamedMetadataOperand =
      _LLVMAddNamedMetadataOperandPtr.asFunction<
          void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, LLVMValueRef)>();

  ffi.Pointer<ffi.Char> LLVMGetDebugLocDirectory(
    LLVMValueRef Val,
    ffi.Pointer<ffi.UnsignedInt> Length,
  ) {
    return _LLVMGetDebugLocDirectory(
      Val,
      Length,
    );
  }

  late final _LLVMGetDebugLocDirectoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMValueRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMGetDebugLocDirectory');
  late final _LLVMGetDebugLocDirectory =
      _LLVMGetDebugLocDirectoryPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMValueRef, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> LLVMGetDebugLocFilename(
    LLVMValueRef Val,
    ffi.Pointer<ffi.UnsignedInt> Length,
  ) {
    return _LLVMGetDebugLocFilename(
      Val,
      Length,
    );
  }

  late final _LLVMGetDebugLocFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(LLVMValueRef,
              ffi.Pointer<ffi.UnsignedInt>)>>('LLVMGetDebugLocFilename');
  late final _LLVMGetDebugLocFilename = _LLVMGetDebugLocFilenamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          LLVMValueRef, ffi.Pointer<ffi.UnsignedInt>)>();

  int LLVMGetDebugLocLine(
    LLVMValueRef Val,
  ) {
    return _LLVMGetDebugLocLine(
      Val,
    );
  }

  late final _LLVMGetDebugLocLinePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetDebugLocLine');
  late final _LLVMGetDebugLocLine =
      _LLVMGetDebugLocLinePtr.asFunction<int Function(LLVMValueRef)>();

  int LLVMGetDebugLocColumn(
    LLVMValueRef Val,
  ) {
    return _LLVMGetDebugLocColumn(
      Val,
    );
  }

  late final _LLVMGetDebugLocColumnPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetDebugLocColumn');
  late final _LLVMGetDebugLocColumn =
      _LLVMGetDebugLocColumnPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMAddFunction(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    LLVMTypeRef FunctionTy,
  ) {
    return _LLVMAddFunction(
      M,
      Name,
      FunctionTy,
    );
  }

  late final _LLVMAddFunctionPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              LLVMTypeRef)>>('LLVMAddFunction');
  late final _LLVMAddFunction = _LLVMAddFunctionPtr.asFunction<
      LLVMValueRef Function(
          LLVMModuleRef, ffi.Pointer<ffi.Char>, LLVMTypeRef)>();

  LLVMValueRef LLVMGetNamedFunction(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMGetNamedFunction(
      M,
      Name,
    );
  }

  late final _LLVMGetNamedFunctionPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>)>>('LLVMGetNamedFunction');
  late final _LLVMGetNamedFunction = _LLVMGetNamedFunctionPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMGetFirstFunction(
    LLVMModuleRef M,
  ) {
    return _LLVMGetFirstFunction(
      M,
    );
  }

  late final _LLVMGetFirstFunctionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetFirstFunction');
  late final _LLVMGetFirstFunction = _LLVMGetFirstFunctionPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef)>();

  LLVMValueRef LLVMGetLastFunction(
    LLVMModuleRef M,
  ) {
    return _LLVMGetLastFunction(
      M,
    );
  }

  late final _LLVMGetLastFunctionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetLastFunction');
  late final _LLVMGetLastFunction = _LLVMGetLastFunctionPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef)>();

  LLVMValueRef LLVMGetNextFunction(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetNextFunction(
      Fn,
    );
  }

  late final _LLVMGetNextFunctionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetNextFunction');
  late final _LLVMGetNextFunction =
      _LLVMGetNextFunctionPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetPreviousFunction(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetPreviousFunction(
      Fn,
    );
  }

  late final _LLVMGetPreviousFunctionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPreviousFunction');
  late final _LLVMGetPreviousFunction = _LLVMGetPreviousFunctionPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  void LLVMSetModuleInlineAsm(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Asm,
  ) {
    return _LLVMSetModuleInlineAsm(
      M,
      Asm,
    );
  }

  late final _LLVMSetModuleInlineAsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>)>>('LLVMSetModuleInlineAsm');
  late final _LLVMSetModuleInlineAsm = _LLVMSetModuleInlineAsmPtr.asFunction<
      void Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  int LLVMGetTypeKind(
    LLVMTypeRef Ty,
  ) {
    return _LLVMGetTypeKind(
      Ty,
    );
  }

  late final _LLVMGetTypeKindPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMTypeRef)>>(
          'LLVMGetTypeKind');
  late final _LLVMGetTypeKind =
      _LLVMGetTypeKindPtr.asFunction<int Function(LLVMTypeRef)>();

  int LLVMTypeIsSized(
    LLVMTypeRef Ty,
  ) {
    return _LLVMTypeIsSized(
      Ty,
    );
  }

  late final _LLVMTypeIsSizedPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTypeRef)>>(
          'LLVMTypeIsSized');
  late final _LLVMTypeIsSized =
      _LLVMTypeIsSizedPtr.asFunction<int Function(LLVMTypeRef)>();

  LLVMContextRef LLVMGetTypeContext(
    LLVMTypeRef Ty,
  ) {
    return _LLVMGetTypeContext(
      Ty,
    );
  }

  late final _LLVMGetTypeContextPtr =
      _lookup<ffi.NativeFunction<LLVMContextRef Function(LLVMTypeRef)>>(
          'LLVMGetTypeContext');
  late final _LLVMGetTypeContext =
      _LLVMGetTypeContextPtr.asFunction<LLVMContextRef Function(LLVMTypeRef)>();

  void LLVMDumpType(
    LLVMTypeRef Val,
  ) {
    return _LLVMDumpType(
      Val,
    );
  }

  late final _LLVMDumpTypePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMTypeRef)>>(
          'LLVMDumpType');
  late final _LLVMDumpType =
      _LLVMDumpTypePtr.asFunction<void Function(LLVMTypeRef)>();

  ffi.Pointer<ffi.Char> LLVMPrintTypeToString(
    LLVMTypeRef Val,
  ) {
    return _LLVMPrintTypeToString(
      Val,
    );
  }

  late final _LLVMPrintTypeToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMTypeRef)>>(
          'LLVMPrintTypeToString');
  late final _LLVMPrintTypeToString = _LLVMPrintTypeToStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMTypeRef)>();

  LLVMTypeRef LLVMInt1TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMInt1TypeInContext(
      C,
    );
  }

  late final _LLVMInt1TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMInt1TypeInContext');
  late final _LLVMInt1TypeInContext = _LLVMInt1TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMInt8TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMInt8TypeInContext(
      C,
    );
  }

  late final _LLVMInt8TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMInt8TypeInContext');
  late final _LLVMInt8TypeInContext = _LLVMInt8TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMInt16TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMInt16TypeInContext(
      C,
    );
  }

  late final _LLVMInt16TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMInt16TypeInContext');
  late final _LLVMInt16TypeInContext = _LLVMInt16TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMInt32TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMInt32TypeInContext(
      C,
    );
  }

  late final _LLVMInt32TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMInt32TypeInContext');
  late final _LLVMInt32TypeInContext = _LLVMInt32TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMInt64TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMInt64TypeInContext(
      C,
    );
  }

  late final _LLVMInt64TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMInt64TypeInContext');
  late final _LLVMInt64TypeInContext = _LLVMInt64TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMInt128TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMInt128TypeInContext(
      C,
    );
  }

  late final _LLVMInt128TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMInt128TypeInContext');
  late final _LLVMInt128TypeInContext = _LLVMInt128TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMIntTypeInContext(
    LLVMContextRef C,
    int NumBits,
  ) {
    return _LLVMIntTypeInContext(
      C,
      NumBits,
    );
  }

  late final _LLVMIntTypeInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMContextRef, ffi.UnsignedInt)>>('LLVMIntTypeInContext');
  late final _LLVMIntTypeInContext = _LLVMIntTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef, int)>();

  LLVMTypeRef LLVMInt1Type() {
    return _LLVMInt1Type();
  }

  late final _LLVMInt1TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMInt1Type');
  late final _LLVMInt1Type =
      _LLVMInt1TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMInt8Type() {
    return _LLVMInt8Type();
  }

  late final _LLVMInt8TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMInt8Type');
  late final _LLVMInt8Type =
      _LLVMInt8TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMInt16Type() {
    return _LLVMInt16Type();
  }

  late final _LLVMInt16TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMInt16Type');
  late final _LLVMInt16Type =
      _LLVMInt16TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMInt32Type() {
    return _LLVMInt32Type();
  }

  late final _LLVMInt32TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMInt32Type');
  late final _LLVMInt32Type =
      _LLVMInt32TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMInt64Type() {
    return _LLVMInt64Type();
  }

  late final _LLVMInt64TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMInt64Type');
  late final _LLVMInt64Type =
      _LLVMInt64TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMInt128Type() {
    return _LLVMInt128Type();
  }

  late final _LLVMInt128TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMInt128Type');
  late final _LLVMInt128Type =
      _LLVMInt128TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMIntType(
    int NumBits,
  ) {
    return _LLVMIntType(
      NumBits,
    );
  }

  late final _LLVMIntTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(ffi.UnsignedInt)>>(
          'LLVMIntType');
  late final _LLVMIntType =
      _LLVMIntTypePtr.asFunction<LLVMTypeRef Function(int)>();

  int LLVMGetIntTypeWidth(
    LLVMTypeRef IntegerTy,
  ) {
    return _LLVMGetIntTypeWidth(
      IntegerTy,
    );
  }

  late final _LLVMGetIntTypeWidthPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMGetIntTypeWidth');
  late final _LLVMGetIntTypeWidth =
      _LLVMGetIntTypeWidthPtr.asFunction<int Function(LLVMTypeRef)>();

  LLVMTypeRef LLVMHalfTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMHalfTypeInContext(
      C,
    );
  }

  late final _LLVMHalfTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMHalfTypeInContext');
  late final _LLVMHalfTypeInContext = _LLVMHalfTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMBFloatTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMBFloatTypeInContext(
      C,
    );
  }

  late final _LLVMBFloatTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMBFloatTypeInContext');
  late final _LLVMBFloatTypeInContext = _LLVMBFloatTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMFloatTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMFloatTypeInContext(
      C,
    );
  }

  late final _LLVMFloatTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMFloatTypeInContext');
  late final _LLVMFloatTypeInContext = _LLVMFloatTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMDoubleTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMDoubleTypeInContext(
      C,
    );
  }

  late final _LLVMDoubleTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMDoubleTypeInContext');
  late final _LLVMDoubleTypeInContext = _LLVMDoubleTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMX86FP80TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMX86FP80TypeInContext(
      C,
    );
  }

  late final _LLVMX86FP80TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMX86FP80TypeInContext');
  late final _LLVMX86FP80TypeInContext = _LLVMX86FP80TypeInContextPtr
      .asFunction<LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMFP128TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMFP128TypeInContext(
      C,
    );
  }

  late final _LLVMFP128TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMFP128TypeInContext');
  late final _LLVMFP128TypeInContext = _LLVMFP128TypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMPPCFP128TypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMPPCFP128TypeInContext(
      C,
    );
  }

  late final _LLVMPPCFP128TypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMPPCFP128TypeInContext');
  late final _LLVMPPCFP128TypeInContext = _LLVMPPCFP128TypeInContextPtr
      .asFunction<LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMHalfType() {
    return _LLVMHalfType();
  }

  late final _LLVMHalfTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMHalfType');
  late final _LLVMHalfType =
      _LLVMHalfTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMBFloatType() {
    return _LLVMBFloatType();
  }

  late final _LLVMBFloatTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMBFloatType');
  late final _LLVMBFloatType =
      _LLVMBFloatTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMFloatType() {
    return _LLVMFloatType();
  }

  late final _LLVMFloatTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMFloatType');
  late final _LLVMFloatType =
      _LLVMFloatTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMDoubleType() {
    return _LLVMDoubleType();
  }

  late final _LLVMDoubleTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMDoubleType');
  late final _LLVMDoubleType =
      _LLVMDoubleTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMX86FP80Type() {
    return _LLVMX86FP80Type();
  }

  late final _LLVMX86FP80TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMX86FP80Type');
  late final _LLVMX86FP80Type =
      _LLVMX86FP80TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMFP128Type() {
    return _LLVMFP128Type();
  }

  late final _LLVMFP128TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMFP128Type');
  late final _LLVMFP128Type =
      _LLVMFP128TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMPPCFP128Type() {
    return _LLVMPPCFP128Type();
  }

  late final _LLVMPPCFP128TypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMPPCFP128Type');
  late final _LLVMPPCFP128Type =
      _LLVMPPCFP128TypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMFunctionType(
    LLVMTypeRef ReturnType,
    ffi.Pointer<LLVMTypeRef> ParamTypes,
    int ParamCount,
    int IsVarArg,
  ) {
    return _LLVMFunctionType(
      ReturnType,
      ParamTypes,
      ParamCount,
      IsVarArg,
    );
  }

  late final _LLVMFunctionTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>,
              ffi.UnsignedInt, LLVMBool)>>('LLVMFunctionType');
  late final _LLVMFunctionType = _LLVMFunctionTypePtr.asFunction<
      LLVMTypeRef Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>, int, int)>();

  int LLVMIsFunctionVarArg(
    LLVMTypeRef FunctionTy,
  ) {
    return _LLVMIsFunctionVarArg(
      FunctionTy,
    );
  }

  late final _LLVMIsFunctionVarArgPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTypeRef)>>(
          'LLVMIsFunctionVarArg');
  late final _LLVMIsFunctionVarArg =
      _LLVMIsFunctionVarArgPtr.asFunction<int Function(LLVMTypeRef)>();

  LLVMTypeRef LLVMGetReturnType(
    LLVMTypeRef FunctionTy,
  ) {
    return _LLVMGetReturnType(
      FunctionTy,
    );
  }

  late final _LLVMGetReturnTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMTypeRef)>>(
          'LLVMGetReturnType');
  late final _LLVMGetReturnType =
      _LLVMGetReturnTypePtr.asFunction<LLVMTypeRef Function(LLVMTypeRef)>();

  int LLVMCountParamTypes(
    LLVMTypeRef FunctionTy,
  ) {
    return _LLVMCountParamTypes(
      FunctionTy,
    );
  }

  late final _LLVMCountParamTypesPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMCountParamTypes');
  late final _LLVMCountParamTypes =
      _LLVMCountParamTypesPtr.asFunction<int Function(LLVMTypeRef)>();

  void LLVMGetParamTypes(
    LLVMTypeRef FunctionTy,
    ffi.Pointer<LLVMTypeRef> Dest,
  ) {
    return _LLVMGetParamTypes(
      FunctionTy,
      Dest,
    );
  }

  late final _LLVMGetParamTypesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMTypeRef, ffi.Pointer<LLVMTypeRef>)>>('LLVMGetParamTypes');
  late final _LLVMGetParamTypes = _LLVMGetParamTypesPtr.asFunction<
      void Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>)>();

  LLVMTypeRef LLVMStructTypeInContext(
    LLVMContextRef C,
    ffi.Pointer<LLVMTypeRef> ElementTypes,
    int ElementCount,
    int Packed,
  ) {
    return _LLVMStructTypeInContext(
      C,
      ElementTypes,
      ElementCount,
      Packed,
    );
  }

  late final _LLVMStructTypeInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(LLVMContextRef, ffi.Pointer<LLVMTypeRef>,
              ffi.UnsignedInt, LLVMBool)>>('LLVMStructTypeInContext');
  late final _LLVMStructTypeInContext = _LLVMStructTypeInContextPtr.asFunction<
      LLVMTypeRef Function(
          LLVMContextRef, ffi.Pointer<LLVMTypeRef>, int, int)>();

  LLVMTypeRef LLVMStructType(
    ffi.Pointer<LLVMTypeRef> ElementTypes,
    int ElementCount,
    int Packed,
  ) {
    return _LLVMStructType(
      ElementTypes,
      ElementCount,
      Packed,
    );
  }

  late final _LLVMStructTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(ffi.Pointer<LLVMTypeRef>, ffi.UnsignedInt,
              LLVMBool)>>('LLVMStructType');
  late final _LLVMStructType = _LLVMStructTypePtr.asFunction<
      LLVMTypeRef Function(ffi.Pointer<LLVMTypeRef>, int, int)>();

  LLVMTypeRef LLVMStructCreateNamed(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMStructCreateNamed(
      C,
      Name,
    );
  }

  late final _LLVMStructCreateNamedPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMContextRef, ffi.Pointer<ffi.Char>)>>('LLVMStructCreateNamed');
  late final _LLVMStructCreateNamed = _LLVMStructCreateNamedPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> LLVMGetStructName(
    LLVMTypeRef Ty,
  ) {
    return _LLVMGetStructName(
      Ty,
    );
  }

  late final _LLVMGetStructNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMTypeRef)>>(
          'LLVMGetStructName');
  late final _LLVMGetStructName = _LLVMGetStructNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMTypeRef)>();

  void LLVMStructSetBody(
    LLVMTypeRef StructTy,
    ffi.Pointer<LLVMTypeRef> ElementTypes,
    int ElementCount,
    int Packed,
  ) {
    return _LLVMStructSetBody(
      StructTy,
      ElementTypes,
      ElementCount,
      Packed,
    );
  }

  late final _LLVMStructSetBodyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>,
              ffi.UnsignedInt, LLVMBool)>>('LLVMStructSetBody');
  late final _LLVMStructSetBody = _LLVMStructSetBodyPtr.asFunction<
      void Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>, int, int)>();

  int LLVMCountStructElementTypes(
    LLVMTypeRef StructTy,
  ) {
    return _LLVMCountStructElementTypes(
      StructTy,
    );
  }

  late final _LLVMCountStructElementTypesPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMCountStructElementTypes');
  late final _LLVMCountStructElementTypes =
      _LLVMCountStructElementTypesPtr.asFunction<int Function(LLVMTypeRef)>();

  void LLVMGetStructElementTypes(
    LLVMTypeRef StructTy,
    ffi.Pointer<LLVMTypeRef> Dest,
  ) {
    return _LLVMGetStructElementTypes(
      StructTy,
      Dest,
    );
  }

  late final _LLVMGetStructElementTypesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMTypeRef,
              ffi.Pointer<LLVMTypeRef>)>>('LLVMGetStructElementTypes');
  late final _LLVMGetStructElementTypes = _LLVMGetStructElementTypesPtr
      .asFunction<void Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>)>();

  LLVMTypeRef LLVMStructGetTypeAtIndex(
    LLVMTypeRef StructTy,
    int i,
  ) {
    return _LLVMStructGetTypeAtIndex(
      StructTy,
      i,
    );
  }

  late final _LLVMStructGetTypeAtIndexPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMTypeRef, ffi.UnsignedInt)>>('LLVMStructGetTypeAtIndex');
  late final _LLVMStructGetTypeAtIndex = _LLVMStructGetTypeAtIndexPtr
      .asFunction<LLVMTypeRef Function(LLVMTypeRef, int)>();

  int LLVMIsPackedStruct(
    LLVMTypeRef StructTy,
  ) {
    return _LLVMIsPackedStruct(
      StructTy,
    );
  }

  late final _LLVMIsPackedStructPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTypeRef)>>(
          'LLVMIsPackedStruct');
  late final _LLVMIsPackedStruct =
      _LLVMIsPackedStructPtr.asFunction<int Function(LLVMTypeRef)>();

  int LLVMIsOpaqueStruct(
    LLVMTypeRef StructTy,
  ) {
    return _LLVMIsOpaqueStruct(
      StructTy,
    );
  }

  late final _LLVMIsOpaqueStructPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTypeRef)>>(
          'LLVMIsOpaqueStruct');
  late final _LLVMIsOpaqueStruct =
      _LLVMIsOpaqueStructPtr.asFunction<int Function(LLVMTypeRef)>();

  int LLVMIsLiteralStruct(
    LLVMTypeRef StructTy,
  ) {
    return _LLVMIsLiteralStruct(
      StructTy,
    );
  }

  late final _LLVMIsLiteralStructPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTypeRef)>>(
          'LLVMIsLiteralStruct');
  late final _LLVMIsLiteralStruct =
      _LLVMIsLiteralStructPtr.asFunction<int Function(LLVMTypeRef)>();

  LLVMTypeRef LLVMGetElementType(
    LLVMTypeRef Ty,
  ) {
    return _LLVMGetElementType(
      Ty,
    );
  }

  late final _LLVMGetElementTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMTypeRef)>>(
          'LLVMGetElementType');
  late final _LLVMGetElementType =
      _LLVMGetElementTypePtr.asFunction<LLVMTypeRef Function(LLVMTypeRef)>();

  void LLVMGetSubtypes(
    LLVMTypeRef Tp,
    ffi.Pointer<LLVMTypeRef> Arr,
  ) {
    return _LLVMGetSubtypes(
      Tp,
      Arr,
    );
  }

  late final _LLVMGetSubtypesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMTypeRef, ffi.Pointer<LLVMTypeRef>)>>('LLVMGetSubtypes');
  late final _LLVMGetSubtypes = _LLVMGetSubtypesPtr.asFunction<
      void Function(LLVMTypeRef, ffi.Pointer<LLVMTypeRef>)>();

  int LLVMGetNumContainedTypes(
    LLVMTypeRef Tp,
  ) {
    return _LLVMGetNumContainedTypes(
      Tp,
    );
  }

  late final _LLVMGetNumContainedTypesPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMGetNumContainedTypes');
  late final _LLVMGetNumContainedTypes =
      _LLVMGetNumContainedTypesPtr.asFunction<int Function(LLVMTypeRef)>();

  LLVMTypeRef LLVMArrayType(
    LLVMTypeRef ElementType,
    int ElementCount,
  ) {
    return _LLVMArrayType(
      ElementType,
      ElementCount,
    );
  }

  late final _LLVMArrayTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(LLVMTypeRef, ffi.UnsignedInt)>>('LLVMArrayType');
  late final _LLVMArrayType =
      _LLVMArrayTypePtr.asFunction<LLVMTypeRef Function(LLVMTypeRef, int)>();

  LLVMTypeRef LLVMArrayType2(
    LLVMTypeRef ElementType,
    int ElementCount,
  ) {
    return _LLVMArrayType2(
      ElementType,
      ElementCount,
    );
  }

  late final _LLVMArrayType2Ptr = _lookup<
          ffi.NativeFunction<LLVMTypeRef Function(LLVMTypeRef, ffi.Uint64)>>(
      'LLVMArrayType2');
  late final _LLVMArrayType2 =
      _LLVMArrayType2Ptr.asFunction<LLVMTypeRef Function(LLVMTypeRef, int)>();

  int LLVMGetArrayLength(
    LLVMTypeRef ArrayTy,
  ) {
    return _LLVMGetArrayLength(
      ArrayTy,
    );
  }

  late final _LLVMGetArrayLengthPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMGetArrayLength');
  late final _LLVMGetArrayLength =
      _LLVMGetArrayLengthPtr.asFunction<int Function(LLVMTypeRef)>();

  int LLVMGetArrayLength2(
    LLVMTypeRef ArrayTy,
  ) {
    return _LLVMGetArrayLength2(
      ArrayTy,
    );
  }

  late final _LLVMGetArrayLength2Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(LLVMTypeRef)>>(
          'LLVMGetArrayLength2');
  late final _LLVMGetArrayLength2 =
      _LLVMGetArrayLength2Ptr.asFunction<int Function(LLVMTypeRef)>();

  LLVMTypeRef LLVMPointerType(
    LLVMTypeRef ElementType,
    int AddressSpace,
  ) {
    return _LLVMPointerType(
      ElementType,
      AddressSpace,
    );
  }

  late final _LLVMPointerTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMTypeRef, ffi.UnsignedInt)>>('LLVMPointerType');
  late final _LLVMPointerType =
      _LLVMPointerTypePtr.asFunction<LLVMTypeRef Function(LLVMTypeRef, int)>();

  int LLVMPointerTypeIsOpaque(
    LLVMTypeRef Ty,
  ) {
    return _LLVMPointerTypeIsOpaque(
      Ty,
    );
  }

  late final _LLVMPointerTypeIsOpaquePtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTypeRef)>>(
          'LLVMPointerTypeIsOpaque');
  late final _LLVMPointerTypeIsOpaque =
      _LLVMPointerTypeIsOpaquePtr.asFunction<int Function(LLVMTypeRef)>();

  LLVMTypeRef LLVMPointerTypeInContext(
    LLVMContextRef C,
    int AddressSpace,
  ) {
    return _LLVMPointerTypeInContext(
      C,
      AddressSpace,
    );
  }

  late final _LLVMPointerTypeInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMContextRef, ffi.UnsignedInt)>>('LLVMPointerTypeInContext');
  late final _LLVMPointerTypeInContext = _LLVMPointerTypeInContextPtr
      .asFunction<LLVMTypeRef Function(LLVMContextRef, int)>();

  int LLVMGetPointerAddressSpace(
    LLVMTypeRef PointerTy,
  ) {
    return _LLVMGetPointerAddressSpace(
      PointerTy,
    );
  }

  late final _LLVMGetPointerAddressSpacePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMGetPointerAddressSpace');
  late final _LLVMGetPointerAddressSpace =
      _LLVMGetPointerAddressSpacePtr.asFunction<int Function(LLVMTypeRef)>();

  LLVMTypeRef LLVMVectorType(
    LLVMTypeRef ElementType,
    int ElementCount,
  ) {
    return _LLVMVectorType(
      ElementType,
      ElementCount,
    );
  }

  late final _LLVMVectorTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMTypeRef, ffi.UnsignedInt)>>('LLVMVectorType');
  late final _LLVMVectorType =
      _LLVMVectorTypePtr.asFunction<LLVMTypeRef Function(LLVMTypeRef, int)>();

  LLVMTypeRef LLVMScalableVectorType(
    LLVMTypeRef ElementType,
    int ElementCount,
  ) {
    return _LLVMScalableVectorType(
      ElementType,
      ElementCount,
    );
  }

  late final _LLVMScalableVectorTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMTypeRef, ffi.UnsignedInt)>>('LLVMScalableVectorType');
  late final _LLVMScalableVectorType = _LLVMScalableVectorTypePtr.asFunction<
      LLVMTypeRef Function(LLVMTypeRef, int)>();

  int LLVMGetVectorSize(
    LLVMTypeRef VectorTy,
  ) {
    return _LLVMGetVectorSize(
      VectorTy,
    );
  }

  late final _LLVMGetVectorSizePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMTypeRef)>>(
          'LLVMGetVectorSize');
  late final _LLVMGetVectorSize =
      _LLVMGetVectorSizePtr.asFunction<int Function(LLVMTypeRef)>();

  LLVMTypeRef LLVMVoidTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMVoidTypeInContext(
      C,
    );
  }

  late final _LLVMVoidTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMVoidTypeInContext');
  late final _LLVMVoidTypeInContext = _LLVMVoidTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMLabelTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMLabelTypeInContext(
      C,
    );
  }

  late final _LLVMLabelTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMLabelTypeInContext');
  late final _LLVMLabelTypeInContext = _LLVMLabelTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMX86MMXTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMX86MMXTypeInContext(
      C,
    );
  }

  late final _LLVMX86MMXTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMX86MMXTypeInContext');
  late final _LLVMX86MMXTypeInContext = _LLVMX86MMXTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMX86AMXTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMX86AMXTypeInContext(
      C,
    );
  }

  late final _LLVMX86AMXTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMX86AMXTypeInContext');
  late final _LLVMX86AMXTypeInContext = _LLVMX86AMXTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMTokenTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMTokenTypeInContext(
      C,
    );
  }

  late final _LLVMTokenTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMTokenTypeInContext');
  late final _LLVMTokenTypeInContext = _LLVMTokenTypeInContextPtr.asFunction<
      LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMMetadataTypeInContext(
    LLVMContextRef C,
  ) {
    return _LLVMMetadataTypeInContext(
      C,
    );
  }

  late final _LLVMMetadataTypeInContextPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMContextRef)>>(
          'LLVMMetadataTypeInContext');
  late final _LLVMMetadataTypeInContext = _LLVMMetadataTypeInContextPtr
      .asFunction<LLVMTypeRef Function(LLVMContextRef)>();

  LLVMTypeRef LLVMVoidType() {
    return _LLVMVoidType();
  }

  late final _LLVMVoidTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMVoidType');
  late final _LLVMVoidType =
      _LLVMVoidTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMLabelType() {
    return _LLVMLabelType();
  }

  late final _LLVMLabelTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMLabelType');
  late final _LLVMLabelType =
      _LLVMLabelTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMX86MMXType() {
    return _LLVMX86MMXType();
  }

  late final _LLVMX86MMXTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMX86MMXType');
  late final _LLVMX86MMXType =
      _LLVMX86MMXTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMX86AMXType() {
    return _LLVMX86AMXType();
  }

  late final _LLVMX86AMXTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function()>>('LLVMX86AMXType');
  late final _LLVMX86AMXType =
      _LLVMX86AMXTypePtr.asFunction<LLVMTypeRef Function()>();

  LLVMTypeRef LLVMTargetExtTypeInContext(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Name,
    ffi.Pointer<LLVMTypeRef> TypeParams,
    int TypeParamCount,
    ffi.Pointer<ffi.UnsignedInt> IntParams,
    int IntParamCount,
  ) {
    return _LLVMTargetExtTypeInContext(
      C,
      Name,
      TypeParams,
      TypeParamCount,
      IntParams,
      IntParamCount,
    );
  }

  late final _LLVMTargetExtTypeInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(
              LLVMContextRef,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<LLVMTypeRef>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('LLVMTargetExtTypeInContext');
  late final _LLVMTargetExtTypeInContext =
      _LLVMTargetExtTypeInContextPtr.asFunction<
          LLVMTypeRef Function(
              LLVMContextRef,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<LLVMTypeRef>,
              int,
              ffi.Pointer<ffi.UnsignedInt>,
              int)>();

  LLVMTypeRef LLVMTypeOf(
    LLVMValueRef Val,
  ) {
    return _LLVMTypeOf(
      Val,
    );
  }

  late final _LLVMTypeOfPtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMValueRef)>>(
          'LLVMTypeOf');
  late final _LLVMTypeOf =
      _LLVMTypeOfPtr.asFunction<LLVMTypeRef Function(LLVMValueRef)>();

  int LLVMGetValueKind(
    LLVMValueRef Val,
  ) {
    return _LLVMGetValueKind(
      Val,
    );
  }

  late final _LLVMGetValueKindPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetValueKind');
  late final _LLVMGetValueKind =
      _LLVMGetValueKindPtr.asFunction<int Function(LLVMValueRef)>();

  ffi.Pointer<ffi.Char> LLVMGetValueName2(
    LLVMValueRef Val,
    ffi.Pointer<ffi.Int> Length,
  ) {
    return _LLVMGetValueName2(
      Val,
      Length,
    );
  }

  late final _LLVMGetValueName2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMValueRef, ffi.Pointer<ffi.Int>)>>('LLVMGetValueName2');
  late final _LLVMGetValueName2 = _LLVMGetValueName2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMValueRef, ffi.Pointer<ffi.Int>)>();

  void LLVMSetValueName2(
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMSetValueName2(
      Val,
      Name,
      NameLen,
    );
  }

  late final _LLVMSetValueName2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('LLVMSetValueName2');
  late final _LLVMSetValueName2 = _LLVMSetValueName2Ptr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<ffi.Char>, int)>();

  void LLVMDumpValue(
    LLVMValueRef Val,
  ) {
    return _LLVMDumpValue(
      Val,
    );
  }

  late final _LLVMDumpValuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMDumpValue');
  late final _LLVMDumpValue =
      _LLVMDumpValuePtr.asFunction<void Function(LLVMValueRef)>();

  ffi.Pointer<ffi.Char> LLVMPrintValueToString(
    LLVMValueRef Val,
  ) {
    return _LLVMPrintValueToString(
      Val,
    );
  }

  late final _LLVMPrintValueToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMValueRef)>>(
          'LLVMPrintValueToString');
  late final _LLVMPrintValueToString = _LLVMPrintValueToStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMValueRef)>();

  void LLVMReplaceAllUsesWith(
    LLVMValueRef OldVal,
    LLVMValueRef NewVal,
  ) {
    return _LLVMReplaceAllUsesWith(
      OldVal,
      NewVal,
    );
  }

  late final _LLVMReplaceAllUsesWithPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMReplaceAllUsesWith');
  late final _LLVMReplaceAllUsesWith = _LLVMReplaceAllUsesWithPtr.asFunction<
      void Function(LLVMValueRef, LLVMValueRef)>();

  int LLVMIsConstant(
    LLVMValueRef Val,
  ) {
    return _LLVMIsConstant(
      Val,
    );
  }

  late final _LLVMIsConstantPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsConstant');
  late final _LLVMIsConstant =
      _LLVMIsConstantPtr.asFunction<int Function(LLVMValueRef)>();

  int LLVMIsUndef(
    LLVMValueRef Val,
  ) {
    return _LLVMIsUndef(
      Val,
    );
  }

  late final _LLVMIsUndefPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsUndef');
  late final _LLVMIsUndef =
      _LLVMIsUndefPtr.asFunction<int Function(LLVMValueRef)>();

  int LLVMIsPoison(
    LLVMValueRef Val,
  ) {
    return _LLVMIsPoison(
      Val,
    );
  }

  late final _LLVMIsPoisonPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsPoison');
  late final _LLVMIsPoison =
      _LLVMIsPoisonPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAArgument(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAArgument(
      Val,
    );
  }

  late final _LLVMIsAArgumentPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAArgument');
  late final _LLVMIsAArgument =
      _LLVMIsAArgumentPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsABasicBlock(
    LLVMValueRef Val,
  ) {
    return _LLVMIsABasicBlock(
      Val,
    );
  }

  late final _LLVMIsABasicBlockPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsABasicBlock');
  late final _LLVMIsABasicBlock =
      _LLVMIsABasicBlockPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAInlineAsm(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAInlineAsm(
      Val,
    );
  }

  late final _LLVMIsAInlineAsmPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAInlineAsm');
  late final _LLVMIsAInlineAsm =
      _LLVMIsAInlineAsmPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAUser(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAUser(
      Val,
    );
  }

  late final _LLVMIsAUserPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAUser');
  late final _LLVMIsAUser =
      _LLVMIsAUserPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstant(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstant(
      Val,
    );
  }

  late final _LLVMIsAConstantPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstant');
  late final _LLVMIsAConstant =
      _LLVMIsAConstantPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsABlockAddress(
    LLVMValueRef Val,
  ) {
    return _LLVMIsABlockAddress(
      Val,
    );
  }

  late final _LLVMIsABlockAddressPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsABlockAddress');
  late final _LLVMIsABlockAddress =
      _LLVMIsABlockAddressPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantAggregateZero(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantAggregateZero(
      Val,
    );
  }

  late final _LLVMIsAConstantAggregateZeroPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantAggregateZero');
  late final _LLVMIsAConstantAggregateZero = _LLVMIsAConstantAggregateZeroPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantArray(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantArray(
      Val,
    );
  }

  late final _LLVMIsAConstantArrayPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantArray');
  late final _LLVMIsAConstantArray = _LLVMIsAConstantArrayPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantDataSequential(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantDataSequential(
      Val,
    );
  }

  late final _LLVMIsAConstantDataSequentialPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantDataSequential');
  late final _LLVMIsAConstantDataSequential = _LLVMIsAConstantDataSequentialPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantDataArray(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantDataArray(
      Val,
    );
  }

  late final _LLVMIsAConstantDataArrayPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantDataArray');
  late final _LLVMIsAConstantDataArray = _LLVMIsAConstantDataArrayPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantDataVector(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantDataVector(
      Val,
    );
  }

  late final _LLVMIsAConstantDataVectorPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantDataVector');
  late final _LLVMIsAConstantDataVector = _LLVMIsAConstantDataVectorPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantExpr(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantExpr(
      Val,
    );
  }

  late final _LLVMIsAConstantExprPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantExpr');
  late final _LLVMIsAConstantExpr =
      _LLVMIsAConstantExprPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantFP(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantFP(
      Val,
    );
  }

  late final _LLVMIsAConstantFPPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantFP');
  late final _LLVMIsAConstantFP =
      _LLVMIsAConstantFPPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantInt(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantInt(
      Val,
    );
  }

  late final _LLVMIsAConstantIntPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantInt');
  late final _LLVMIsAConstantInt =
      _LLVMIsAConstantIntPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantPointerNull(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantPointerNull(
      Val,
    );
  }

  late final _LLVMIsAConstantPointerNullPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantPointerNull');
  late final _LLVMIsAConstantPointerNull = _LLVMIsAConstantPointerNullPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantStruct(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantStruct(
      Val,
    );
  }

  late final _LLVMIsAConstantStructPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantStruct');
  late final _LLVMIsAConstantStruct = _LLVMIsAConstantStructPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantTokenNone(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantTokenNone(
      Val,
    );
  }

  late final _LLVMIsAConstantTokenNonePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantTokenNone');
  late final _LLVMIsAConstantTokenNone = _LLVMIsAConstantTokenNonePtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAConstantVector(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAConstantVector(
      Val,
    );
  }

  late final _LLVMIsAConstantVectorPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAConstantVector');
  late final _LLVMIsAConstantVector = _LLVMIsAConstantVectorPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAGlobalValue(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAGlobalValue(
      Val,
    );
  }

  late final _LLVMIsAGlobalValuePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAGlobalValue');
  late final _LLVMIsAGlobalValue =
      _LLVMIsAGlobalValuePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAGlobalAlias(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAGlobalAlias(
      Val,
    );
  }

  late final _LLVMIsAGlobalAliasPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAGlobalAlias');
  late final _LLVMIsAGlobalAlias =
      _LLVMIsAGlobalAliasPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAGlobalObject(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAGlobalObject(
      Val,
    );
  }

  late final _LLVMIsAGlobalObjectPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAGlobalObject');
  late final _LLVMIsAGlobalObject =
      _LLVMIsAGlobalObjectPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFunction(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFunction(
      Val,
    );
  }

  late final _LLVMIsAFunctionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFunction');
  late final _LLVMIsAFunction =
      _LLVMIsAFunctionPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAGlobalVariable(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAGlobalVariable(
      Val,
    );
  }

  late final _LLVMIsAGlobalVariablePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAGlobalVariable');
  late final _LLVMIsAGlobalVariable = _LLVMIsAGlobalVariablePtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAGlobalIFunc(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAGlobalIFunc(
      Val,
    );
  }

  late final _LLVMIsAGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAGlobalIFunc');
  late final _LLVMIsAGlobalIFunc =
      _LLVMIsAGlobalIFuncPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAUndefValue(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAUndefValue(
      Val,
    );
  }

  late final _LLVMIsAUndefValuePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAUndefValue');
  late final _LLVMIsAUndefValue =
      _LLVMIsAUndefValuePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAPoisonValue(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAPoisonValue(
      Val,
    );
  }

  late final _LLVMIsAPoisonValuePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAPoisonValue');
  late final _LLVMIsAPoisonValue =
      _LLVMIsAPoisonValuePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAInstruction(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAInstruction(
      Val,
    );
  }

  late final _LLVMIsAInstructionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAInstruction');
  late final _LLVMIsAInstruction =
      _LLVMIsAInstructionPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAUnaryOperator(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAUnaryOperator(
      Val,
    );
  }

  late final _LLVMIsAUnaryOperatorPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAUnaryOperator');
  late final _LLVMIsAUnaryOperator = _LLVMIsAUnaryOperatorPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsABinaryOperator(
    LLVMValueRef Val,
  ) {
    return _LLVMIsABinaryOperator(
      Val,
    );
  }

  late final _LLVMIsABinaryOperatorPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsABinaryOperator');
  late final _LLVMIsABinaryOperator = _LLVMIsABinaryOperatorPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACallInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACallInst(
      Val,
    );
  }

  late final _LLVMIsACallInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACallInst');
  late final _LLVMIsACallInst =
      _LLVMIsACallInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAIntrinsicInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAIntrinsicInst(
      Val,
    );
  }

  late final _LLVMIsAIntrinsicInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAIntrinsicInst');
  late final _LLVMIsAIntrinsicInst = _LLVMIsAIntrinsicInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsADbgInfoIntrinsic(
    LLVMValueRef Val,
  ) {
    return _LLVMIsADbgInfoIntrinsic(
      Val,
    );
  }

  late final _LLVMIsADbgInfoIntrinsicPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsADbgInfoIntrinsic');
  late final _LLVMIsADbgInfoIntrinsic = _LLVMIsADbgInfoIntrinsicPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsADbgVariableIntrinsic(
    LLVMValueRef Val,
  ) {
    return _LLVMIsADbgVariableIntrinsic(
      Val,
    );
  }

  late final _LLVMIsADbgVariableIntrinsicPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsADbgVariableIntrinsic');
  late final _LLVMIsADbgVariableIntrinsic = _LLVMIsADbgVariableIntrinsicPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsADbgDeclareInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsADbgDeclareInst(
      Val,
    );
  }

  late final _LLVMIsADbgDeclareInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsADbgDeclareInst');
  late final _LLVMIsADbgDeclareInst = _LLVMIsADbgDeclareInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsADbgLabelInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsADbgLabelInst(
      Val,
    );
  }

  late final _LLVMIsADbgLabelInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsADbgLabelInst');
  late final _LLVMIsADbgLabelInst =
      _LLVMIsADbgLabelInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAMemIntrinsic(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAMemIntrinsic(
      Val,
    );
  }

  late final _LLVMIsAMemIntrinsicPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAMemIntrinsic');
  late final _LLVMIsAMemIntrinsic =
      _LLVMIsAMemIntrinsicPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAMemCpyInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAMemCpyInst(
      Val,
    );
  }

  late final _LLVMIsAMemCpyInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAMemCpyInst');
  late final _LLVMIsAMemCpyInst =
      _LLVMIsAMemCpyInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAMemMoveInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAMemMoveInst(
      Val,
    );
  }

  late final _LLVMIsAMemMoveInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAMemMoveInst');
  late final _LLVMIsAMemMoveInst =
      _LLVMIsAMemMoveInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAMemSetInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAMemSetInst(
      Val,
    );
  }

  late final _LLVMIsAMemSetInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAMemSetInst');
  late final _LLVMIsAMemSetInst =
      _LLVMIsAMemSetInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACmpInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACmpInst(
      Val,
    );
  }

  late final _LLVMIsACmpInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACmpInst');
  late final _LLVMIsACmpInst =
      _LLVMIsACmpInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFCmpInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFCmpInst(
      Val,
    );
  }

  late final _LLVMIsAFCmpInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFCmpInst');
  late final _LLVMIsAFCmpInst =
      _LLVMIsAFCmpInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAICmpInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAICmpInst(
      Val,
    );
  }

  late final _LLVMIsAICmpInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAICmpInst');
  late final _LLVMIsAICmpInst =
      _LLVMIsAICmpInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAExtractElementInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAExtractElementInst(
      Val,
    );
  }

  late final _LLVMIsAExtractElementInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAExtractElementInst');
  late final _LLVMIsAExtractElementInst = _LLVMIsAExtractElementInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAGetElementPtrInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAGetElementPtrInst(
      Val,
    );
  }

  late final _LLVMIsAGetElementPtrInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAGetElementPtrInst');
  late final _LLVMIsAGetElementPtrInst = _LLVMIsAGetElementPtrInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAInsertElementInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAInsertElementInst(
      Val,
    );
  }

  late final _LLVMIsAInsertElementInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAInsertElementInst');
  late final _LLVMIsAInsertElementInst = _LLVMIsAInsertElementInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAInsertValueInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAInsertValueInst(
      Val,
    );
  }

  late final _LLVMIsAInsertValueInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAInsertValueInst');
  late final _LLVMIsAInsertValueInst = _LLVMIsAInsertValueInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsALandingPadInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsALandingPadInst(
      Val,
    );
  }

  late final _LLVMIsALandingPadInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsALandingPadInst');
  late final _LLVMIsALandingPadInst = _LLVMIsALandingPadInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAPHINode(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAPHINode(
      Val,
    );
  }

  late final _LLVMIsAPHINodePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAPHINode');
  late final _LLVMIsAPHINode =
      _LLVMIsAPHINodePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsASelectInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsASelectInst(
      Val,
    );
  }

  late final _LLVMIsASelectInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsASelectInst');
  late final _LLVMIsASelectInst =
      _LLVMIsASelectInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAShuffleVectorInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAShuffleVectorInst(
      Val,
    );
  }

  late final _LLVMIsAShuffleVectorInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAShuffleVectorInst');
  late final _LLVMIsAShuffleVectorInst = _LLVMIsAShuffleVectorInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAStoreInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAStoreInst(
      Val,
    );
  }

  late final _LLVMIsAStoreInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAStoreInst');
  late final _LLVMIsAStoreInst =
      _LLVMIsAStoreInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsABranchInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsABranchInst(
      Val,
    );
  }

  late final _LLVMIsABranchInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsABranchInst');
  late final _LLVMIsABranchInst =
      _LLVMIsABranchInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAIndirectBrInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAIndirectBrInst(
      Val,
    );
  }

  late final _LLVMIsAIndirectBrInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAIndirectBrInst');
  late final _LLVMIsAIndirectBrInst = _LLVMIsAIndirectBrInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAInvokeInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAInvokeInst(
      Val,
    );
  }

  late final _LLVMIsAInvokeInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAInvokeInst');
  late final _LLVMIsAInvokeInst =
      _LLVMIsAInvokeInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAReturnInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAReturnInst(
      Val,
    );
  }

  late final _LLVMIsAReturnInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAReturnInst');
  late final _LLVMIsAReturnInst =
      _LLVMIsAReturnInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsASwitchInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsASwitchInst(
      Val,
    );
  }

  late final _LLVMIsASwitchInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsASwitchInst');
  late final _LLVMIsASwitchInst =
      _LLVMIsASwitchInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAUnreachableInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAUnreachableInst(
      Val,
    );
  }

  late final _LLVMIsAUnreachableInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAUnreachableInst');
  late final _LLVMIsAUnreachableInst = _LLVMIsAUnreachableInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAResumeInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAResumeInst(
      Val,
    );
  }

  late final _LLVMIsAResumeInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAResumeInst');
  late final _LLVMIsAResumeInst =
      _LLVMIsAResumeInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACleanupReturnInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACleanupReturnInst(
      Val,
    );
  }

  late final _LLVMIsACleanupReturnInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACleanupReturnInst');
  late final _LLVMIsACleanupReturnInst = _LLVMIsACleanupReturnInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACatchReturnInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACatchReturnInst(
      Val,
    );
  }

  late final _LLVMIsACatchReturnInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACatchReturnInst');
  late final _LLVMIsACatchReturnInst = _LLVMIsACatchReturnInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACatchSwitchInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACatchSwitchInst(
      Val,
    );
  }

  late final _LLVMIsACatchSwitchInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACatchSwitchInst');
  late final _LLVMIsACatchSwitchInst = _LLVMIsACatchSwitchInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACallBrInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACallBrInst(
      Val,
    );
  }

  late final _LLVMIsACallBrInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACallBrInst');
  late final _LLVMIsACallBrInst =
      _LLVMIsACallBrInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFuncletPadInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFuncletPadInst(
      Val,
    );
  }

  late final _LLVMIsAFuncletPadInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFuncletPadInst');
  late final _LLVMIsAFuncletPadInst = _LLVMIsAFuncletPadInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACatchPadInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACatchPadInst(
      Val,
    );
  }

  late final _LLVMIsACatchPadInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACatchPadInst');
  late final _LLVMIsACatchPadInst =
      _LLVMIsACatchPadInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACleanupPadInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACleanupPadInst(
      Val,
    );
  }

  late final _LLVMIsACleanupPadInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACleanupPadInst');
  late final _LLVMIsACleanupPadInst = _LLVMIsACleanupPadInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAUnaryInstruction(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAUnaryInstruction(
      Val,
    );
  }

  late final _LLVMIsAUnaryInstructionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAUnaryInstruction');
  late final _LLVMIsAUnaryInstruction = _LLVMIsAUnaryInstructionPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAAllocaInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAAllocaInst(
      Val,
    );
  }

  late final _LLVMIsAAllocaInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAAllocaInst');
  late final _LLVMIsAAllocaInst =
      _LLVMIsAAllocaInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsACastInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsACastInst(
      Val,
    );
  }

  late final _LLVMIsACastInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsACastInst');
  late final _LLVMIsACastInst =
      _LLVMIsACastInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAAddrSpaceCastInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAAddrSpaceCastInst(
      Val,
    );
  }

  late final _LLVMIsAAddrSpaceCastInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAAddrSpaceCastInst');
  late final _LLVMIsAAddrSpaceCastInst = _LLVMIsAAddrSpaceCastInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsABitCastInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsABitCastInst(
      Val,
    );
  }

  late final _LLVMIsABitCastInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsABitCastInst');
  late final _LLVMIsABitCastInst =
      _LLVMIsABitCastInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFPExtInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFPExtInst(
      Val,
    );
  }

  late final _LLVMIsAFPExtInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFPExtInst');
  late final _LLVMIsAFPExtInst =
      _LLVMIsAFPExtInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFPToSIInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFPToSIInst(
      Val,
    );
  }

  late final _LLVMIsAFPToSIInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFPToSIInst');
  late final _LLVMIsAFPToSIInst =
      _LLVMIsAFPToSIInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFPToUIInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFPToUIInst(
      Val,
    );
  }

  late final _LLVMIsAFPToUIInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFPToUIInst');
  late final _LLVMIsAFPToUIInst =
      _LLVMIsAFPToUIInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFPTruncInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFPTruncInst(
      Val,
    );
  }

  late final _LLVMIsAFPTruncInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFPTruncInst');
  late final _LLVMIsAFPTruncInst =
      _LLVMIsAFPTruncInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAIntToPtrInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAIntToPtrInst(
      Val,
    );
  }

  late final _LLVMIsAIntToPtrInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAIntToPtrInst');
  late final _LLVMIsAIntToPtrInst =
      _LLVMIsAIntToPtrInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAPtrToIntInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAPtrToIntInst(
      Val,
    );
  }

  late final _LLVMIsAPtrToIntInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAPtrToIntInst');
  late final _LLVMIsAPtrToIntInst =
      _LLVMIsAPtrToIntInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsASExtInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsASExtInst(
      Val,
    );
  }

  late final _LLVMIsASExtInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsASExtInst');
  late final _LLVMIsASExtInst =
      _LLVMIsASExtInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsASIToFPInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsASIToFPInst(
      Val,
    );
  }

  late final _LLVMIsASIToFPInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsASIToFPInst');
  late final _LLVMIsASIToFPInst =
      _LLVMIsASIToFPInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsATruncInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsATruncInst(
      Val,
    );
  }

  late final _LLVMIsATruncInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsATruncInst');
  late final _LLVMIsATruncInst =
      _LLVMIsATruncInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAUIToFPInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAUIToFPInst(
      Val,
    );
  }

  late final _LLVMIsAUIToFPInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAUIToFPInst');
  late final _LLVMIsAUIToFPInst =
      _LLVMIsAUIToFPInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAZExtInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAZExtInst(
      Val,
    );
  }

  late final _LLVMIsAZExtInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAZExtInst');
  late final _LLVMIsAZExtInst =
      _LLVMIsAZExtInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAExtractValueInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAExtractValueInst(
      Val,
    );
  }

  late final _LLVMIsAExtractValueInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAExtractValueInst');
  late final _LLVMIsAExtractValueInst = _LLVMIsAExtractValueInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsALoadInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsALoadInst(
      Val,
    );
  }

  late final _LLVMIsALoadInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsALoadInst');
  late final _LLVMIsALoadInst =
      _LLVMIsALoadInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAVAArgInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAVAArgInst(
      Val,
    );
  }

  late final _LLVMIsAVAArgInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAVAArgInst');
  late final _LLVMIsAVAArgInst =
      _LLVMIsAVAArgInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFreezeInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFreezeInst(
      Val,
    );
  }

  late final _LLVMIsAFreezeInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFreezeInst');
  late final _LLVMIsAFreezeInst =
      _LLVMIsAFreezeInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAAtomicCmpXchgInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAAtomicCmpXchgInst(
      Val,
    );
  }

  late final _LLVMIsAAtomicCmpXchgInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAAtomicCmpXchgInst');
  late final _LLVMIsAAtomicCmpXchgInst = _LLVMIsAAtomicCmpXchgInstPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAAtomicRMWInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAAtomicRMWInst(
      Val,
    );
  }

  late final _LLVMIsAAtomicRMWInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAAtomicRMWInst');
  late final _LLVMIsAAtomicRMWInst = _LLVMIsAAtomicRMWInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAFenceInst(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAFenceInst(
      Val,
    );
  }

  late final _LLVMIsAFenceInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAFenceInst');
  late final _LLVMIsAFenceInst =
      _LLVMIsAFenceInstPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAMDNode(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAMDNode(
      Val,
    );
  }

  late final _LLVMIsAMDNodePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAMDNode');
  late final _LLVMIsAMDNode =
      _LLVMIsAMDNodePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAValueAsMetadata(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAValueAsMetadata(
      Val,
    );
  }

  late final _LLVMIsAValueAsMetadataPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAValueAsMetadata');
  late final _LLVMIsAValueAsMetadata = _LLVMIsAValueAsMetadataPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsAMDString(
    LLVMValueRef Val,
  ) {
    return _LLVMIsAMDString(
      Val,
    );
  }

  late final _LLVMIsAMDStringPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsAMDString');
  late final _LLVMIsAMDString =
      _LLVMIsAMDStringPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  ffi.Pointer<ffi.Char> LLVMGetValueName(
    LLVMValueRef Val,
  ) {
    return _LLVMGetValueName(
      Val,
    );
  }

  late final _LLVMGetValueNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMValueRef)>>(
          'LLVMGetValueName');
  late final _LLVMGetValueName = _LLVMGetValueNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMValueRef)>();

  void LLVMSetValueName(
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMSetValueName(
      Val,
      Name,
    );
  }

  late final _LLVMSetValueNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMSetValueName');
  late final _LLVMSetValueName = _LLVMSetValueNamePtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMUseRef LLVMGetFirstUse(
    LLVMValueRef Val,
  ) {
    return _LLVMGetFirstUse(
      Val,
    );
  }

  late final _LLVMGetFirstUsePtr =
      _lookup<ffi.NativeFunction<LLVMUseRef Function(LLVMValueRef)>>(
          'LLVMGetFirstUse');
  late final _LLVMGetFirstUse =
      _LLVMGetFirstUsePtr.asFunction<LLVMUseRef Function(LLVMValueRef)>();

  LLVMUseRef LLVMGetNextUse(
    LLVMUseRef U,
  ) {
    return _LLVMGetNextUse(
      U,
    );
  }

  late final _LLVMGetNextUsePtr =
      _lookup<ffi.NativeFunction<LLVMUseRef Function(LLVMUseRef)>>(
          'LLVMGetNextUse');
  late final _LLVMGetNextUse =
      _LLVMGetNextUsePtr.asFunction<LLVMUseRef Function(LLVMUseRef)>();

  LLVMValueRef LLVMGetUser(
    LLVMUseRef U,
  ) {
    return _LLVMGetUser(
      U,
    );
  }

  late final _LLVMGetUserPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMUseRef)>>(
          'LLVMGetUser');
  late final _LLVMGetUser =
      _LLVMGetUserPtr.asFunction<LLVMValueRef Function(LLVMUseRef)>();

  LLVMValueRef LLVMGetUsedValue(
    LLVMUseRef U,
  ) {
    return _LLVMGetUsedValue(
      U,
    );
  }

  late final _LLVMGetUsedValuePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMUseRef)>>(
          'LLVMGetUsedValue');
  late final _LLVMGetUsedValue =
      _LLVMGetUsedValuePtr.asFunction<LLVMValueRef Function(LLVMUseRef)>();

  LLVMValueRef LLVMGetOperand(
    LLVMValueRef Val,
    int Index,
  ) {
    return _LLVMGetOperand(
      Val,
      Index,
    );
  }

  late final _LLVMGetOperandPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetOperand');
  late final _LLVMGetOperand =
      _LLVMGetOperandPtr.asFunction<LLVMValueRef Function(LLVMValueRef, int)>();

  LLVMUseRef LLVMGetOperandUse(
    LLVMValueRef Val,
    int Index,
  ) {
    return _LLVMGetOperandUse(
      Val,
      Index,
    );
  }

  late final _LLVMGetOperandUsePtr = _lookup<
      ffi.NativeFunction<
          LLVMUseRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetOperandUse');
  late final _LLVMGetOperandUse = _LLVMGetOperandUsePtr.asFunction<
      LLVMUseRef Function(LLVMValueRef, int)>();

  void LLVMSetOperand(
    LLVMValueRef User,
    int Index,
    LLVMValueRef Val,
  ) {
    return _LLVMSetOperand(
      User,
      Index,
      Val,
    );
  }

  late final _LLVMSetOperandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, ffi.UnsignedInt, LLVMValueRef)>>('LLVMSetOperand');
  late final _LLVMSetOperand = _LLVMSetOperandPtr.asFunction<
      void Function(LLVMValueRef, int, LLVMValueRef)>();

  int LLVMGetNumOperands(
    LLVMValueRef Val,
  ) {
    return _LLVMGetNumOperands(
      Val,
    );
  }

  late final _LLVMGetNumOperandsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LLVMValueRef)>>(
          'LLVMGetNumOperands');
  late final _LLVMGetNumOperands =
      _LLVMGetNumOperandsPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMConstNull(
    LLVMTypeRef Ty,
  ) {
    return _LLVMConstNull(
      Ty,
    );
  }

  late final _LLVMConstNullPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMConstNull');
  late final _LLVMConstNull =
      _LLVMConstNullPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  LLVMValueRef LLVMConstAllOnes(
    LLVMTypeRef Ty,
  ) {
    return _LLVMConstAllOnes(
      Ty,
    );
  }

  late final _LLVMConstAllOnesPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMConstAllOnes');
  late final _LLVMConstAllOnes =
      _LLVMConstAllOnesPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  LLVMValueRef LLVMGetUndef(
    LLVMTypeRef Ty,
  ) {
    return _LLVMGetUndef(
      Ty,
    );
  }

  late final _LLVMGetUndefPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMGetUndef');
  late final _LLVMGetUndef =
      _LLVMGetUndefPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  LLVMValueRef LLVMGetPoison(
    LLVMTypeRef Ty,
  ) {
    return _LLVMGetPoison(
      Ty,
    );
  }

  late final _LLVMGetPoisonPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMGetPoison');
  late final _LLVMGetPoison =
      _LLVMGetPoisonPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  int LLVMIsNull(
    LLVMValueRef Val,
  ) {
    return _LLVMIsNull(
      Val,
    );
  }

  late final _LLVMIsNullPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsNull');
  late final _LLVMIsNull =
      _LLVMIsNullPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMConstPointerNull(
    LLVMTypeRef Ty,
  ) {
    return _LLVMConstPointerNull(
      Ty,
    );
  }

  late final _LLVMConstPointerNullPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMConstPointerNull');
  late final _LLVMConstPointerNull =
      _LLVMConstPointerNullPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  LLVMValueRef LLVMConstInt(
    LLVMTypeRef IntTy,
    int N,
    int SignExtend,
  ) {
    return _LLVMConstInt(
      IntTy,
      N,
      SignExtend,
    );
  }

  late final _LLVMConstIntPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMTypeRef, ffi.UnsignedLongLong, LLVMBool)>>('LLVMConstInt');
  late final _LLVMConstInt = _LLVMConstIntPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, int, int)>();

  LLVMValueRef LLVMConstIntOfArbitraryPrecision(
    LLVMTypeRef IntTy,
    int NumWords,
    ffi.Pointer<ffi.Uint64> Words,
  ) {
    return _LLVMConstIntOfArbitraryPrecision(
      IntTy,
      NumWords,
      Words,
    );
  }

  late final _LLVMConstIntOfArbitraryPrecisionPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.UnsignedInt,
              ffi.Pointer<ffi.Uint64>)>>('LLVMConstIntOfArbitraryPrecision');
  late final _LLVMConstIntOfArbitraryPrecision =
      _LLVMConstIntOfArbitraryPrecisionPtr.asFunction<
          LLVMValueRef Function(LLVMTypeRef, int, ffi.Pointer<ffi.Uint64>)>();

  LLVMValueRef LLVMConstIntOfString(
    LLVMTypeRef IntTy,
    ffi.Pointer<ffi.Char> Text,
    int Radix,
  ) {
    return _LLVMConstIntOfString(
      IntTy,
      Text,
      Radix,
    );
  }

  late final _LLVMConstIntOfStringPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>,
              ffi.Uint8)>>('LLVMConstIntOfString');
  late final _LLVMConstIntOfString = _LLVMConstIntOfStringPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>, int)>();

  LLVMValueRef LLVMConstIntOfStringAndSize(
    LLVMTypeRef IntTy,
    ffi.Pointer<ffi.Char> Text,
    int SLen,
    int Radix,
  ) {
    return _LLVMConstIntOfStringAndSize(
      IntTy,
      Text,
      SLen,
      Radix,
    );
  }

  late final _LLVMConstIntOfStringAndSizePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.Uint8)>>('LLVMConstIntOfStringAndSize');
  late final _LLVMConstIntOfStringAndSize =
      _LLVMConstIntOfStringAndSizePtr.asFunction<
          LLVMValueRef Function(
              LLVMTypeRef, ffi.Pointer<ffi.Char>, int, int)>();

  LLVMValueRef LLVMConstReal(
    LLVMTypeRef RealTy,
    double N,
  ) {
    return _LLVMConstReal(
      RealTy,
      N,
    );
  }

  late final _LLVMConstRealPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef, ffi.Double)>>(
      'LLVMConstReal');
  late final _LLVMConstReal = _LLVMConstRealPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, double)>();

  LLVMValueRef LLVMConstRealOfString(
    LLVMTypeRef RealTy,
    ffi.Pointer<ffi.Char> Text,
  ) {
    return _LLVMConstRealOfString(
      RealTy,
      Text,
    );
  }

  late final _LLVMConstRealOfStringPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMTypeRef, ffi.Pointer<ffi.Char>)>>('LLVMConstRealOfString');
  late final _LLVMConstRealOfString = _LLVMConstRealOfStringPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMConstRealOfStringAndSize(
    LLVMTypeRef RealTy,
    ffi.Pointer<ffi.Char> Text,
    int SLen,
  ) {
    return _LLVMConstRealOfStringAndSize(
      RealTy,
      Text,
      SLen,
    );
  }

  late final _LLVMConstRealOfStringAndSizePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMConstRealOfStringAndSize');
  late final _LLVMConstRealOfStringAndSize =
      _LLVMConstRealOfStringAndSizePtr.asFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>, int)>();

  int LLVMConstIntGetZExtValue(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMConstIntGetZExtValue(
      ConstantVal,
    );
  }

  late final _LLVMConstIntGetZExtValuePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLongLong Function(LLVMValueRef)>>(
          'LLVMConstIntGetZExtValue');
  late final _LLVMConstIntGetZExtValue =
      _LLVMConstIntGetZExtValuePtr.asFunction<int Function(LLVMValueRef)>();

  int LLVMConstIntGetSExtValue(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMConstIntGetSExtValue(
      ConstantVal,
    );
  }

  late final _LLVMConstIntGetSExtValuePtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(LLVMValueRef)>>(
          'LLVMConstIntGetSExtValue');
  late final _LLVMConstIntGetSExtValue =
      _LLVMConstIntGetSExtValuePtr.asFunction<int Function(LLVMValueRef)>();

  double LLVMConstRealGetDouble(
    LLVMValueRef ConstantVal,
    ffi.Pointer<LLVMBool> losesInfo,
  ) {
    return _LLVMConstRealGetDouble(
      ConstantVal,
      losesInfo,
    );
  }

  late final _LLVMConstRealGetDoublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              LLVMValueRef, ffi.Pointer<LLVMBool>)>>('LLVMConstRealGetDouble');
  late final _LLVMConstRealGetDouble = _LLVMConstRealGetDoublePtr.asFunction<
      double Function(LLVMValueRef, ffi.Pointer<LLVMBool>)>();

  LLVMValueRef LLVMConstStringInContext(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Str,
    int Length,
    int DontNullTerminate,
  ) {
    return _LLVMConstStringInContext(
      C,
      Str,
      Length,
      DontNullTerminate,
    );
  }

  late final _LLVMConstStringInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, LLVMBool)>>('LLVMConstStringInContext');
  late final _LLVMConstStringInContext =
      _LLVMConstStringInContextPtr.asFunction<
          LLVMValueRef Function(
              LLVMContextRef, ffi.Pointer<ffi.Char>, int, int)>();

  LLVMValueRef LLVMConstString(
    ffi.Pointer<ffi.Char> Str,
    int Length,
    int DontNullTerminate,
  ) {
    return _LLVMConstString(
      Str,
      Length,
      DontNullTerminate,
    );
  }

  late final _LLVMConstStringPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              LLVMBool)>>('LLVMConstString');
  late final _LLVMConstString = _LLVMConstStringPtr.asFunction<
      LLVMValueRef Function(ffi.Pointer<ffi.Char>, int, int)>();

  int LLVMIsConstantString(
    LLVMValueRef c,
  ) {
    return _LLVMIsConstantString(
      c,
    );
  }

  late final _LLVMIsConstantStringPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsConstantString');
  late final _LLVMIsConstantString =
      _LLVMIsConstantStringPtr.asFunction<int Function(LLVMValueRef)>();

  ffi.Pointer<ffi.Char> LLVMGetAsString(
    LLVMValueRef c,
    ffi.Pointer<ffi.Int> Length,
  ) {
    return _LLVMGetAsString(
      c,
      Length,
    );
  }

  late final _LLVMGetAsStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMValueRef, ffi.Pointer<ffi.Int>)>>('LLVMGetAsString');
  late final _LLVMGetAsString = _LLVMGetAsStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMValueRef, ffi.Pointer<ffi.Int>)>();

  LLVMValueRef LLVMConstStructInContext(
    LLVMContextRef C,
    ffi.Pointer<LLVMValueRef> ConstantVals,
    int Count,
    int Packed,
  ) {
    return _LLVMConstStructInContext(
      C,
      ConstantVals,
      Count,
      Packed,
    );
  }

  late final _LLVMConstStructInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMContextRef, ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt, LLVMBool)>>('LLVMConstStructInContext');
  late final _LLVMConstStructInContext =
      _LLVMConstStructInContextPtr.asFunction<
          LLVMValueRef Function(
              LLVMContextRef, ffi.Pointer<LLVMValueRef>, int, int)>();

  LLVMValueRef LLVMConstStruct(
    ffi.Pointer<LLVMValueRef> ConstantVals,
    int Count,
    int Packed,
  ) {
    return _LLVMConstStruct(
      ConstantVals,
      Count,
      Packed,
    );
  }

  late final _LLVMConstStructPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(ffi.Pointer<LLVMValueRef>, ffi.UnsignedInt,
              LLVMBool)>>('LLVMConstStruct');
  late final _LLVMConstStruct = _LLVMConstStructPtr.asFunction<
      LLVMValueRef Function(ffi.Pointer<LLVMValueRef>, int, int)>();

  LLVMValueRef LLVMConstArray(
    LLVMTypeRef ElementTy,
    ffi.Pointer<LLVMValueRef> ConstantVals,
    int Length,
  ) {
    return _LLVMConstArray(
      ElementTy,
      ConstantVals,
      Length,
    );
  }

  late final _LLVMConstArrayPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt)>>('LLVMConstArray');
  late final _LLVMConstArray = _LLVMConstArrayPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<LLVMValueRef>, int)>();

  LLVMValueRef LLVMConstArray2(
    LLVMTypeRef ElementTy,
    ffi.Pointer<LLVMValueRef> ConstantVals,
    int Length,
  ) {
    return _LLVMConstArray2(
      ElementTy,
      ConstantVals,
      Length,
    );
  }

  late final _LLVMConstArray2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<LLVMValueRef>,
              ffi.Uint64)>>('LLVMConstArray2');
  late final _LLVMConstArray2 = _LLVMConstArray2Ptr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<LLVMValueRef>, int)>();

  LLVMValueRef LLVMConstNamedStruct(
    LLVMTypeRef StructTy,
    ffi.Pointer<LLVMValueRef> ConstantVals,
    int Count,
  ) {
    return _LLVMConstNamedStruct(
      StructTy,
      ConstantVals,
      Count,
    );
  }

  late final _LLVMConstNamedStructPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt)>>('LLVMConstNamedStruct');
  late final _LLVMConstNamedStruct = _LLVMConstNamedStructPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<LLVMValueRef>, int)>();

  LLVMValueRef LLVMGetAggregateElement(
    LLVMValueRef C,
    int Idx,
  ) {
    return _LLVMGetAggregateElement(
      C,
      Idx,
    );
  }

  late final _LLVMGetAggregateElementPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetAggregateElement');
  late final _LLVMGetAggregateElement = _LLVMGetAggregateElementPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, int)>();

  LLVMValueRef LLVMGetElementAsConstant(
    LLVMValueRef C,
    int idx,
  ) {
    return _LLVMGetElementAsConstant(
      C,
      idx,
    );
  }

  late final _LLVMGetElementAsConstantPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetElementAsConstant');
  late final _LLVMGetElementAsConstant = _LLVMGetElementAsConstantPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef, int)>();

  LLVMValueRef LLVMConstVector(
    ffi.Pointer<LLVMValueRef> ScalarConstantVals,
    int Size,
  ) {
    return _LLVMConstVector(
      ScalarConstantVals,
      Size,
    );
  }

  late final _LLVMConstVectorPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              ffi.Pointer<LLVMValueRef>, ffi.UnsignedInt)>>('LLVMConstVector');
  late final _LLVMConstVector = _LLVMConstVectorPtr.asFunction<
      LLVMValueRef Function(ffi.Pointer<LLVMValueRef>, int)>();

  int LLVMGetConstOpcode(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMGetConstOpcode(
      ConstantVal,
    );
  }

  late final _LLVMGetConstOpcodePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetConstOpcode');
  late final _LLVMGetConstOpcode =
      _LLVMGetConstOpcodePtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMAlignOf(
    LLVMTypeRef Ty,
  ) {
    return _LLVMAlignOf(
      Ty,
    );
  }

  late final _LLVMAlignOfPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMAlignOf');
  late final _LLVMAlignOf =
      _LLVMAlignOfPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  LLVMValueRef LLVMSizeOf(
    LLVMTypeRef Ty,
  ) {
    return _LLVMSizeOf(
      Ty,
    );
  }

  late final _LLVMSizeOfPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMTypeRef)>>(
          'LLVMSizeOf');
  late final _LLVMSizeOf =
      _LLVMSizeOfPtr.asFunction<LLVMValueRef Function(LLVMTypeRef)>();

  LLVMValueRef LLVMConstNeg(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMConstNeg(
      ConstantVal,
    );
  }

  late final _LLVMConstNegPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMConstNeg');
  late final _LLVMConstNeg =
      _LLVMConstNegPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMConstNSWNeg(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMConstNSWNeg(
      ConstantVal,
    );
  }

  late final _LLVMConstNSWNegPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMConstNSWNeg');
  late final _LLVMConstNSWNeg =
      _LLVMConstNSWNegPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMConstNUWNeg(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMConstNUWNeg(
      ConstantVal,
    );
  }

  late final _LLVMConstNUWNegPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMConstNUWNeg');
  late final _LLVMConstNUWNeg =
      _LLVMConstNUWNegPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMConstNot(
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMConstNot(
      ConstantVal,
    );
  }

  late final _LLVMConstNotPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMConstNot');
  late final _LLVMConstNot =
      _LLVMConstNotPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMConstAdd(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstAdd(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstAdd');
  late final _LLVMConstAdd = _LLVMConstAddPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstNSWAdd(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstNSWAdd(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstNSWAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstNSWAdd');
  late final _LLVMConstNSWAdd = _LLVMConstNSWAddPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstNUWAdd(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstNUWAdd(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstNUWAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstNUWAdd');
  late final _LLVMConstNUWAdd = _LLVMConstNUWAddPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstSub(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstSub(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstSub');
  late final _LLVMConstSub = _LLVMConstSubPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstNSWSub(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstNSWSub(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstNSWSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstNSWSub');
  late final _LLVMConstNSWSub = _LLVMConstNSWSubPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstNUWSub(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstNUWSub(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstNUWSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstNUWSub');
  late final _LLVMConstNUWSub = _LLVMConstNUWSubPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstMul(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstMul(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstMul');
  late final _LLVMConstMul = _LLVMConstMulPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstNSWMul(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstNSWMul(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstNSWMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstNSWMul');
  late final _LLVMConstNSWMul = _LLVMConstNSWMulPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstNUWMul(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstNUWMul(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstNUWMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstNUWMul');
  late final _LLVMConstNUWMul = _LLVMConstNUWMulPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstAnd(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstAnd(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstAndPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstAnd');
  late final _LLVMConstAnd = _LLVMConstAndPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstOr(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstOr(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstOrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstOr');
  late final _LLVMConstOr = _LLVMConstOrPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstXor(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstXor(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstXorPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstXor');
  late final _LLVMConstXor = _LLVMConstXorPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstICmp(
    int Predicate,
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstICmp(
      Predicate,
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstICmpPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              ffi.Int32, LLVMValueRef, LLVMValueRef)>>('LLVMConstICmp');
  late final _LLVMConstICmp = _LLVMConstICmpPtr.asFunction<
      LLVMValueRef Function(int, LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstFCmp(
    int Predicate,
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstFCmp(
      Predicate,
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstFCmpPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              ffi.Int32, LLVMValueRef, LLVMValueRef)>>('LLVMConstFCmp');
  late final _LLVMConstFCmp = _LLVMConstFCmpPtr.asFunction<
      LLVMValueRef Function(int, LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstShl(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstShl(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstShlPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstShl');
  late final _LLVMConstShl = _LLVMConstShlPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstLShr(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstLShr(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstLShrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstLShr');
  late final _LLVMConstLShr = _LLVMConstLShrPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstAShr(
    LLVMValueRef LHSConstant,
    LLVMValueRef RHSConstant,
  ) {
    return _LLVMConstAShr(
      LHSConstant,
      RHSConstant,
    );
  }

  late final _LLVMConstAShrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>>('LLVMConstAShr');
  late final _LLVMConstAShr = _LLVMConstAShrPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstGEP2(
    LLVMTypeRef Ty,
    LLVMValueRef ConstantVal,
    ffi.Pointer<LLVMValueRef> ConstantIndices,
    int NumIndices,
  ) {
    return _LLVMConstGEP2(
      Ty,
      ConstantVal,
      ConstantIndices,
      NumIndices,
    );
  }

  late final _LLVMConstGEP2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMTypeRef, LLVMValueRef,
              ffi.Pointer<LLVMValueRef>, ffi.UnsignedInt)>>('LLVMConstGEP2');
  late final _LLVMConstGEP2 = _LLVMConstGEP2Ptr.asFunction<
      LLVMValueRef Function(
          LLVMTypeRef, LLVMValueRef, ffi.Pointer<LLVMValueRef>, int)>();

  LLVMValueRef LLVMConstInBoundsGEP2(
    LLVMTypeRef Ty,
    LLVMValueRef ConstantVal,
    ffi.Pointer<LLVMValueRef> ConstantIndices,
    int NumIndices,
  ) {
    return _LLVMConstInBoundsGEP2(
      Ty,
      ConstantVal,
      ConstantIndices,
      NumIndices,
    );
  }

  late final _LLVMConstInBoundsGEP2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMTypeRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt)>>('LLVMConstInBoundsGEP2');
  late final _LLVMConstInBoundsGEP2 = _LLVMConstInBoundsGEP2Ptr.asFunction<
      LLVMValueRef Function(
          LLVMTypeRef, LLVMValueRef, ffi.Pointer<LLVMValueRef>, int)>();

  LLVMValueRef LLVMConstTrunc(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstTrunc(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstTruncPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstTrunc');
  late final _LLVMConstTrunc = _LLVMConstTruncPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstSExt(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstSExt(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstSExtPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstSExt');
  late final _LLVMConstSExt = _LLVMConstSExtPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstZExt(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstZExt(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstZExtPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstZExt');
  late final _LLVMConstZExt = _LLVMConstZExtPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstFPTrunc(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstFPTrunc(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstFPTruncPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstFPTrunc');
  late final _LLVMConstFPTrunc = _LLVMConstFPTruncPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstFPExt(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstFPExt(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstFPExtPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstFPExt');
  late final _LLVMConstFPExt = _LLVMConstFPExtPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstUIToFP(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstUIToFP(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstUIToFPPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstUIToFP');
  late final _LLVMConstUIToFP = _LLVMConstUIToFPPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstSIToFP(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstSIToFP(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstSIToFPPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstSIToFP');
  late final _LLVMConstSIToFP = _LLVMConstSIToFPPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstFPToUI(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstFPToUI(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstFPToUIPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstFPToUI');
  late final _LLVMConstFPToUI = _LLVMConstFPToUIPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstFPToSI(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstFPToSI(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstFPToSIPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstFPToSI');
  late final _LLVMConstFPToSI = _LLVMConstFPToSIPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstPtrToInt(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstPtrToInt(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstPtrToIntPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstPtrToInt');
  late final _LLVMConstPtrToInt = _LLVMConstPtrToIntPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstIntToPtr(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstIntToPtr(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstIntToPtrPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstIntToPtr');
  late final _LLVMConstIntToPtr = _LLVMConstIntToPtrPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstBitCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstBitCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstBitCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstBitCast');
  late final _LLVMConstBitCast = _LLVMConstBitCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstAddrSpaceCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstAddrSpaceCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstAddrSpaceCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstAddrSpaceCast');
  late final _LLVMConstAddrSpaceCast = _LLVMConstAddrSpaceCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstZExtOrBitCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstZExtOrBitCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstZExtOrBitCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstZExtOrBitCast');
  late final _LLVMConstZExtOrBitCast = _LLVMConstZExtOrBitCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstSExtOrBitCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstSExtOrBitCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstSExtOrBitCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstSExtOrBitCast');
  late final _LLVMConstSExtOrBitCast = _LLVMConstSExtOrBitCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstTruncOrBitCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstTruncOrBitCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstTruncOrBitCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstTruncOrBitCast');
  late final _LLVMConstTruncOrBitCast = _LLVMConstTruncOrBitCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstPointerCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstPointerCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstPointerCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstPointerCast');
  late final _LLVMConstPointerCast = _LLVMConstPointerCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstIntCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
    int isSigned,
  ) {
    return _LLVMConstIntCast(
      ConstantVal,
      ToType,
      isSigned,
    );
  }

  late final _LLVMConstIntCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMTypeRef, LLVMBool)>>('LLVMConstIntCast');
  late final _LLVMConstIntCast = _LLVMConstIntCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef, int)>();

  LLVMValueRef LLVMConstFPCast(
    LLVMValueRef ConstantVal,
    LLVMTypeRef ToType,
  ) {
    return _LLVMConstFPCast(
      ConstantVal,
      ToType,
    );
  }

  late final _LLVMConstFPCastPtr = _lookup<
          ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>>(
      'LLVMConstFPCast');
  late final _LLVMConstFPCast = _LLVMConstFPCastPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMTypeRef)>();

  LLVMValueRef LLVMConstSelect(
    LLVMValueRef ConstantCondition,
    LLVMValueRef ConstantIfTrue,
    LLVMValueRef ConstantIfFalse,
  ) {
    return _LLVMConstSelect(
      ConstantCondition,
      ConstantIfTrue,
      ConstantIfFalse,
    );
  }

  late final _LLVMConstSelectPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef, LLVMValueRef)>>('LLVMConstSelect');
  late final _LLVMConstSelect = _LLVMConstSelectPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstExtractElement(
    LLVMValueRef VectorConstant,
    LLVMValueRef IndexConstant,
  ) {
    return _LLVMConstExtractElement(
      VectorConstant,
      IndexConstant,
    );
  }

  late final _LLVMConstExtractElementPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMValueRef)>>('LLVMConstExtractElement');
  late final _LLVMConstExtractElement = _LLVMConstExtractElementPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstInsertElement(
    LLVMValueRef VectorConstant,
    LLVMValueRef ElementValueConstant,
    LLVMValueRef IndexConstant,
  ) {
    return _LLVMConstInsertElement(
      VectorConstant,
      ElementValueConstant,
      IndexConstant,
    );
  }

  late final _LLVMConstInsertElementPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef,
              LLVMValueRef)>>('LLVMConstInsertElement');
  late final _LLVMConstInsertElement = _LLVMConstInsertElementPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMConstShuffleVector(
    LLVMValueRef VectorAConstant,
    LLVMValueRef VectorBConstant,
    LLVMValueRef MaskConstant,
  ) {
    return _LLVMConstShuffleVector(
      VectorAConstant,
      VectorBConstant,
      MaskConstant,
    );
  }

  late final _LLVMConstShuffleVectorPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMValueRef, LLVMValueRef,
              LLVMValueRef)>>('LLVMConstShuffleVector');
  late final _LLVMConstShuffleVector = _LLVMConstShuffleVectorPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMBlockAddress(
    LLVMValueRef F,
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMBlockAddress(
      F,
      BB,
    );
  }

  late final _LLVMBlockAddressPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, LLVMBasicBlockRef)>>('LLVMBlockAddress');
  late final _LLVMBlockAddress = _LLVMBlockAddressPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, LLVMBasicBlockRef)>();

  LLVMValueRef LLVMConstInlineAsm(
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> AsmString,
    ffi.Pointer<ffi.Char> Constraints,
    int HasSideEffects,
    int IsAlignStack,
  ) {
    return _LLVMConstInlineAsm(
      Ty,
      AsmString,
      Constraints,
      HasSideEffects,
      IsAlignStack,
    );
  }

  late final _LLVMConstInlineAsmPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMTypeRef,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              LLVMBool,
              LLVMBool)>>('LLVMConstInlineAsm');
  late final _LLVMConstInlineAsm = _LLVMConstInlineAsmPtr.asFunction<
      LLVMValueRef Function(LLVMTypeRef, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, int)>();

  LLVMModuleRef LLVMGetGlobalParent(
    LLVMValueRef Global,
  ) {
    return _LLVMGetGlobalParent(
      Global,
    );
  }

  late final _LLVMGetGlobalParentPtr =
      _lookup<ffi.NativeFunction<LLVMModuleRef Function(LLVMValueRef)>>(
          'LLVMGetGlobalParent');
  late final _LLVMGetGlobalParent = _LLVMGetGlobalParentPtr.asFunction<
      LLVMModuleRef Function(LLVMValueRef)>();

  int LLVMIsDeclaration(
    LLVMValueRef Global,
  ) {
    return _LLVMIsDeclaration(
      Global,
    );
  }

  late final _LLVMIsDeclarationPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsDeclaration');
  late final _LLVMIsDeclaration =
      _LLVMIsDeclarationPtr.asFunction<int Function(LLVMValueRef)>();

  int LLVMGetLinkage(
    LLVMValueRef Global,
  ) {
    return _LLVMGetLinkage(
      Global,
    );
  }

  late final _LLVMGetLinkagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetLinkage');
  late final _LLVMGetLinkage =
      _LLVMGetLinkagePtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetLinkage(
    LLVMValueRef Global,
    int Linkage,
  ) {
    return _LLVMSetLinkage(
      Global,
      Linkage,
    );
  }

  late final _LLVMSetLinkagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetLinkage');
  late final _LLVMSetLinkage =
      _LLVMSetLinkagePtr.asFunction<void Function(LLVMValueRef, int)>();

  ffi.Pointer<ffi.Char> LLVMGetSection(
    LLVMValueRef Global,
  ) {
    return _LLVMGetSection(
      Global,
    );
  }

  late final _LLVMGetSectionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMValueRef)>>(
          'LLVMGetSection');
  late final _LLVMGetSection = _LLVMGetSectionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMValueRef)>();

  void LLVMSetSection(
    LLVMValueRef Global,
    ffi.Pointer<ffi.Char> Section,
  ) {
    return _LLVMSetSection(
      Global,
      Section,
    );
  }

  late final _LLVMSetSectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMSetSection');
  late final _LLVMSetSection = _LLVMSetSectionPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  int LLVMGetVisibility(
    LLVMValueRef Global,
  ) {
    return _LLVMGetVisibility(
      Global,
    );
  }

  late final _LLVMGetVisibilityPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetVisibility');
  late final _LLVMGetVisibility =
      _LLVMGetVisibilityPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetVisibility(
    LLVMValueRef Global,
    int Viz,
  ) {
    return _LLVMSetVisibility(
      Global,
      Viz,
    );
  }

  late final _LLVMSetVisibilityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetVisibility');
  late final _LLVMSetVisibility =
      _LLVMSetVisibilityPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetDLLStorageClass(
    LLVMValueRef Global,
  ) {
    return _LLVMGetDLLStorageClass(
      Global,
    );
  }

  late final _LLVMGetDLLStorageClassPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetDLLStorageClass');
  late final _LLVMGetDLLStorageClass =
      _LLVMGetDLLStorageClassPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetDLLStorageClass(
    LLVMValueRef Global,
    int Class,
  ) {
    return _LLVMSetDLLStorageClass(
      Global,
      Class,
    );
  }

  late final _LLVMSetDLLStorageClassPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetDLLStorageClass');
  late final _LLVMSetDLLStorageClass =
      _LLVMSetDLLStorageClassPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetUnnamedAddress(
    LLVMValueRef Global,
  ) {
    return _LLVMGetUnnamedAddress(
      Global,
    );
  }

  late final _LLVMGetUnnamedAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetUnnamedAddress');
  late final _LLVMGetUnnamedAddress =
      _LLVMGetUnnamedAddressPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetUnnamedAddress(
    LLVMValueRef Global,
    int UnnamedAddr,
  ) {
    return _LLVMSetUnnamedAddress(
      Global,
      UnnamedAddr,
    );
  }

  late final _LLVMSetUnnamedAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetUnnamedAddress');
  late final _LLVMSetUnnamedAddress =
      _LLVMSetUnnamedAddressPtr.asFunction<void Function(LLVMValueRef, int)>();

  LLVMTypeRef LLVMGlobalGetValueType(
    LLVMValueRef Global,
  ) {
    return _LLVMGlobalGetValueType(
      Global,
    );
  }

  late final _LLVMGlobalGetValueTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMValueRef)>>(
          'LLVMGlobalGetValueType');
  late final _LLVMGlobalGetValueType = _LLVMGlobalGetValueTypePtr.asFunction<
      LLVMTypeRef Function(LLVMValueRef)>();

  int LLVMHasUnnamedAddr(
    LLVMValueRef Global,
  ) {
    return _LLVMHasUnnamedAddr(
      Global,
    );
  }

  late final _LLVMHasUnnamedAddrPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMHasUnnamedAddr');
  late final _LLVMHasUnnamedAddr =
      _LLVMHasUnnamedAddrPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetUnnamedAddr(
    LLVMValueRef Global,
    int HasUnnamedAddr,
  ) {
    return _LLVMSetUnnamedAddr(
      Global,
      HasUnnamedAddr,
    );
  }

  late final _LLVMSetUnnamedAddrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetUnnamedAddr');
  late final _LLVMSetUnnamedAddr =
      _LLVMSetUnnamedAddrPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetAlignment(
    LLVMValueRef V,
  ) {
    return _LLVMGetAlignment(
      V,
    );
  }

  late final _LLVMGetAlignmentPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetAlignment');
  late final _LLVMGetAlignment =
      _LLVMGetAlignmentPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetAlignment(
    LLVMValueRef V,
    int Bytes,
  ) {
    return _LLVMSetAlignment(
      V,
      Bytes,
    );
  }

  late final _LLVMSetAlignmentPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.UnsignedInt)>>(
      'LLVMSetAlignment');
  late final _LLVMSetAlignment =
      _LLVMSetAlignmentPtr.asFunction<void Function(LLVMValueRef, int)>();

  void LLVMGlobalSetMetadata(
    LLVMValueRef Global,
    int Kind,
    LLVMMetadataRef MD,
  ) {
    return _LLVMGlobalSetMetadata(
      Global,
      Kind,
      MD,
    );
  }

  late final _LLVMGlobalSetMetadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.UnsignedInt,
              LLVMMetadataRef)>>('LLVMGlobalSetMetadata');
  late final _LLVMGlobalSetMetadata = _LLVMGlobalSetMetadataPtr.asFunction<
      void Function(LLVMValueRef, int, LLVMMetadataRef)>();

  void LLVMGlobalEraseMetadata(
    LLVMValueRef Global,
    int Kind,
  ) {
    return _LLVMGlobalEraseMetadata(
      Global,
      Kind,
    );
  }

  late final _LLVMGlobalEraseMetadataPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.UnsignedInt)>>(
      'LLVMGlobalEraseMetadata');
  late final _LLVMGlobalEraseMetadata = _LLVMGlobalEraseMetadataPtr.asFunction<
      void Function(LLVMValueRef, int)>();

  void LLVMGlobalClearMetadata(
    LLVMValueRef Global,
  ) {
    return _LLVMGlobalClearMetadata(
      Global,
    );
  }

  late final _LLVMGlobalClearMetadataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMGlobalClearMetadata');
  late final _LLVMGlobalClearMetadata =
      _LLVMGlobalClearMetadataPtr.asFunction<void Function(LLVMValueRef)>();

  ffi.Pointer<LLVMValueMetadataEntry> LLVMGlobalCopyAllMetadata(
    LLVMValueRef Value,
    ffi.Pointer<ffi.Int> NumEntries,
  ) {
    return _LLVMGlobalCopyAllMetadata(
      Value,
      NumEntries,
    );
  }

  late final _LLVMGlobalCopyAllMetadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LLVMValueMetadataEntry> Function(LLVMValueRef,
              ffi.Pointer<ffi.Int>)>>('LLVMGlobalCopyAllMetadata');
  late final _LLVMGlobalCopyAllMetadata =
      _LLVMGlobalCopyAllMetadataPtr.asFunction<
          ffi.Pointer<LLVMValueMetadataEntry> Function(
              LLVMValueRef, ffi.Pointer<ffi.Int>)>();

  void LLVMDisposeValueMetadataEntries(
    ffi.Pointer<LLVMValueMetadataEntry> Entries,
  ) {
    return _LLVMDisposeValueMetadataEntries(
      Entries,
    );
  }

  late final _LLVMDisposeValueMetadataEntriesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<LLVMValueMetadataEntry>)>>(
      'LLVMDisposeValueMetadataEntries');
  late final _LLVMDisposeValueMetadataEntries =
      _LLVMDisposeValueMetadataEntriesPtr.asFunction<
          void Function(ffi.Pointer<LLVMValueMetadataEntry>)>();

  int LLVMValueMetadataEntriesGetKind(
    ffi.Pointer<LLVMValueMetadataEntry> Entries,
    int Index,
  ) {
    return _LLVMValueMetadataEntriesGetKind(
      Entries,
      Index,
    );
  }

  late final _LLVMValueMetadataEntriesGetKindPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<LLVMValueMetadataEntry>,
              ffi.UnsignedInt)>>('LLVMValueMetadataEntriesGetKind');
  late final _LLVMValueMetadataEntriesGetKind =
      _LLVMValueMetadataEntriesGetKindPtr.asFunction<
          int Function(ffi.Pointer<LLVMValueMetadataEntry>, int)>();

  LLVMMetadataRef LLVMValueMetadataEntriesGetMetadata(
    ffi.Pointer<LLVMValueMetadataEntry> Entries,
    int Index,
  ) {
    return _LLVMValueMetadataEntriesGetMetadata(
      Entries,
      Index,
    );
  }

  late final _LLVMValueMetadataEntriesGetMetadataPtr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(ffi.Pointer<LLVMValueMetadataEntry>,
              ffi.UnsignedInt)>>('LLVMValueMetadataEntriesGetMetadata');
  late final _LLVMValueMetadataEntriesGetMetadata =
      _LLVMValueMetadataEntriesGetMetadataPtr.asFunction<
          LLVMMetadataRef Function(ffi.Pointer<LLVMValueMetadataEntry>, int)>();

  LLVMValueRef LLVMAddGlobal(
    LLVMModuleRef M,
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMAddGlobal(
      M,
      Ty,
      Name,
    );
  }

  late final _LLVMAddGlobalPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMModuleRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMAddGlobal');
  late final _LLVMAddGlobal = _LLVMAddGlobalPtr.asFunction<
      LLVMValueRef Function(
          LLVMModuleRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMAddGlobalInAddressSpace(
    LLVMModuleRef M,
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> Name,
    int AddressSpace,
  ) {
    return _LLVMAddGlobalInAddressSpace(
      M,
      Ty,
      Name,
      AddressSpace,
    );
  }

  late final _LLVMAddGlobalInAddressSpacePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMModuleRef,
              LLVMTypeRef,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMAddGlobalInAddressSpace');
  late final _LLVMAddGlobalInAddressSpace =
      _LLVMAddGlobalInAddressSpacePtr.asFunction<
          LLVMValueRef Function(
              LLVMModuleRef, LLVMTypeRef, ffi.Pointer<ffi.Char>, int)>();

  LLVMValueRef LLVMGetNamedGlobal(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMGetNamedGlobal(
      M,
      Name,
    );
  }

  late final _LLVMGetNamedGlobalPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMModuleRef, ffi.Pointer<ffi.Char>)>>('LLVMGetNamedGlobal');
  late final _LLVMGetNamedGlobal = _LLVMGetNamedGlobalPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMGetFirstGlobal(
    LLVMModuleRef M,
  ) {
    return _LLVMGetFirstGlobal(
      M,
    );
  }

  late final _LLVMGetFirstGlobalPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetFirstGlobal');
  late final _LLVMGetFirstGlobal =
      _LLVMGetFirstGlobalPtr.asFunction<LLVMValueRef Function(LLVMModuleRef)>();

  LLVMValueRef LLVMGetLastGlobal(
    LLVMModuleRef M,
  ) {
    return _LLVMGetLastGlobal(
      M,
    );
  }

  late final _LLVMGetLastGlobalPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetLastGlobal');
  late final _LLVMGetLastGlobal =
      _LLVMGetLastGlobalPtr.asFunction<LLVMValueRef Function(LLVMModuleRef)>();

  LLVMValueRef LLVMGetNextGlobal(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMGetNextGlobal(
      GlobalVar,
    );
  }

  late final _LLVMGetNextGlobalPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetNextGlobal');
  late final _LLVMGetNextGlobal =
      _LLVMGetNextGlobalPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetPreviousGlobal(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMGetPreviousGlobal(
      GlobalVar,
    );
  }

  late final _LLVMGetPreviousGlobalPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPreviousGlobal');
  late final _LLVMGetPreviousGlobal = _LLVMGetPreviousGlobalPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  void LLVMDeleteGlobal(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMDeleteGlobal(
      GlobalVar,
    );
  }

  late final _LLVMDeleteGlobalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMDeleteGlobal');
  late final _LLVMDeleteGlobal =
      _LLVMDeleteGlobalPtr.asFunction<void Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetInitializer(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMGetInitializer(
      GlobalVar,
    );
  }

  late final _LLVMGetInitializerPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetInitializer');
  late final _LLVMGetInitializer =
      _LLVMGetInitializerPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  void LLVMSetInitializer(
    LLVMValueRef GlobalVar,
    LLVMValueRef ConstantVal,
  ) {
    return _LLVMSetInitializer(
      GlobalVar,
      ConstantVal,
    );
  }

  late final _LLVMSetInitializerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMSetInitializer');
  late final _LLVMSetInitializer = _LLVMSetInitializerPtr.asFunction<
      void Function(LLVMValueRef, LLVMValueRef)>();

  int LLVMIsThreadLocal(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMIsThreadLocal(
      GlobalVar,
    );
  }

  late final _LLVMIsThreadLocalPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsThreadLocal');
  late final _LLVMIsThreadLocal =
      _LLVMIsThreadLocalPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetThreadLocal(
    LLVMValueRef GlobalVar,
    int IsThreadLocal,
  ) {
    return _LLVMSetThreadLocal(
      GlobalVar,
      IsThreadLocal,
    );
  }

  late final _LLVMSetThreadLocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetThreadLocal');
  late final _LLVMSetThreadLocal =
      _LLVMSetThreadLocalPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMIsGlobalConstant(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMIsGlobalConstant(
      GlobalVar,
    );
  }

  late final _LLVMIsGlobalConstantPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsGlobalConstant');
  late final _LLVMIsGlobalConstant =
      _LLVMIsGlobalConstantPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetGlobalConstant(
    LLVMValueRef GlobalVar,
    int IsConstant,
  ) {
    return _LLVMSetGlobalConstant(
      GlobalVar,
      IsConstant,
    );
  }

  late final _LLVMSetGlobalConstantPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetGlobalConstant');
  late final _LLVMSetGlobalConstant =
      _LLVMSetGlobalConstantPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetThreadLocalMode(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMGetThreadLocalMode(
      GlobalVar,
    );
  }

  late final _LLVMGetThreadLocalModePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetThreadLocalMode');
  late final _LLVMGetThreadLocalMode =
      _LLVMGetThreadLocalModePtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetThreadLocalMode(
    LLVMValueRef GlobalVar,
    int Mode,
  ) {
    return _LLVMSetThreadLocalMode(
      GlobalVar,
      Mode,
    );
  }

  late final _LLVMSetThreadLocalModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetThreadLocalMode');
  late final _LLVMSetThreadLocalMode =
      _LLVMSetThreadLocalModePtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMIsExternallyInitialized(
    LLVMValueRef GlobalVar,
  ) {
    return _LLVMIsExternallyInitialized(
      GlobalVar,
    );
  }

  late final _LLVMIsExternallyInitializedPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsExternallyInitialized');
  late final _LLVMIsExternallyInitialized =
      _LLVMIsExternallyInitializedPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetExternallyInitialized(
    LLVMValueRef GlobalVar,
    int IsExtInit,
  ) {
    return _LLVMSetExternallyInitialized(
      GlobalVar,
      IsExtInit,
    );
  }

  late final _LLVMSetExternallyInitializedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetExternallyInitialized');
  late final _LLVMSetExternallyInitialized = _LLVMSetExternallyInitializedPtr
      .asFunction<void Function(LLVMValueRef, int)>();

  LLVMValueRef LLVMAddAlias2(
    LLVMModuleRef M,
    LLVMTypeRef ValueTy,
    int AddrSpace,
    LLVMValueRef Aliasee,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMAddAlias2(
      M,
      ValueTy,
      AddrSpace,
      Aliasee,
      Name,
    );
  }

  late final _LLVMAddAlias2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMModuleRef, LLVMTypeRef, ffi.UnsignedInt,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMAddAlias2');
  late final _LLVMAddAlias2 = _LLVMAddAlias2Ptr.asFunction<
      LLVMValueRef Function(LLVMModuleRef, LLVMTypeRef, int, LLVMValueRef,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMGetNamedGlobalAlias(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMGetNamedGlobalAlias(
      M,
      Name,
      NameLen,
    );
  }

  late final _LLVMGetNamedGlobalAliasPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('LLVMGetNamedGlobalAlias');
  late final _LLVMGetNamedGlobalAlias = _LLVMGetNamedGlobalAliasPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  LLVMValueRef LLVMGetFirstGlobalAlias(
    LLVMModuleRef M,
  ) {
    return _LLVMGetFirstGlobalAlias(
      M,
    );
  }

  late final _LLVMGetFirstGlobalAliasPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetFirstGlobalAlias');
  late final _LLVMGetFirstGlobalAlias = _LLVMGetFirstGlobalAliasPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef)>();

  LLVMValueRef LLVMGetLastGlobalAlias(
    LLVMModuleRef M,
  ) {
    return _LLVMGetLastGlobalAlias(
      M,
    );
  }

  late final _LLVMGetLastGlobalAliasPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetLastGlobalAlias');
  late final _LLVMGetLastGlobalAlias = _LLVMGetLastGlobalAliasPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef)>();

  LLVMValueRef LLVMGetNextGlobalAlias(
    LLVMValueRef GA,
  ) {
    return _LLVMGetNextGlobalAlias(
      GA,
    );
  }

  late final _LLVMGetNextGlobalAliasPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetNextGlobalAlias');
  late final _LLVMGetNextGlobalAlias = _LLVMGetNextGlobalAliasPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetPreviousGlobalAlias(
    LLVMValueRef GA,
  ) {
    return _LLVMGetPreviousGlobalAlias(
      GA,
    );
  }

  late final _LLVMGetPreviousGlobalAliasPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPreviousGlobalAlias');
  late final _LLVMGetPreviousGlobalAlias = _LLVMGetPreviousGlobalAliasPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMAliasGetAliasee(
    LLVMValueRef Alias,
  ) {
    return _LLVMAliasGetAliasee(
      Alias,
    );
  }

  late final _LLVMAliasGetAliaseePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMAliasGetAliasee');
  late final _LLVMAliasGetAliasee =
      _LLVMAliasGetAliaseePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  void LLVMAliasSetAliasee(
    LLVMValueRef Alias,
    LLVMValueRef Aliasee,
  ) {
    return _LLVMAliasSetAliasee(
      Alias,
      Aliasee,
    );
  }

  late final _LLVMAliasSetAliaseePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMAliasSetAliasee');
  late final _LLVMAliasSetAliasee = _LLVMAliasSetAliaseePtr.asFunction<
      void Function(LLVMValueRef, LLVMValueRef)>();

  void LLVMDeleteFunction(
    LLVMValueRef Fn,
  ) {
    return _LLVMDeleteFunction(
      Fn,
    );
  }

  late final _LLVMDeleteFunctionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMDeleteFunction');
  late final _LLVMDeleteFunction =
      _LLVMDeleteFunctionPtr.asFunction<void Function(LLVMValueRef)>();

  int LLVMHasPersonalityFn(
    LLVMValueRef Fn,
  ) {
    return _LLVMHasPersonalityFn(
      Fn,
    );
  }

  late final _LLVMHasPersonalityFnPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMHasPersonalityFn');
  late final _LLVMHasPersonalityFn =
      _LLVMHasPersonalityFnPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetPersonalityFn(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetPersonalityFn(
      Fn,
    );
  }

  late final _LLVMGetPersonalityFnPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPersonalityFn');
  late final _LLVMGetPersonalityFn = _LLVMGetPersonalityFnPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  void LLVMSetPersonalityFn(
    LLVMValueRef Fn,
    LLVMValueRef PersonalityFn,
  ) {
    return _LLVMSetPersonalityFn(
      Fn,
      PersonalityFn,
    );
  }

  late final _LLVMSetPersonalityFnPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMSetPersonalityFn');
  late final _LLVMSetPersonalityFn = _LLVMSetPersonalityFnPtr.asFunction<
      void Function(LLVMValueRef, LLVMValueRef)>();

  int LLVMLookupIntrinsicID(
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMLookupIntrinsicID(
      Name,
      NameLen,
    );
  }

  late final _LLVMLookupIntrinsicIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('LLVMLookupIntrinsicID');
  late final _LLVMLookupIntrinsicID = _LLVMLookupIntrinsicIDPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  int LLVMGetIntrinsicID(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetIntrinsicID(
      Fn,
    );
  }

  late final _LLVMGetIntrinsicIDPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetIntrinsicID');
  late final _LLVMGetIntrinsicID =
      _LLVMGetIntrinsicIDPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetIntrinsicDeclaration(
    LLVMModuleRef Mod,
    int ID,
    ffi.Pointer<LLVMTypeRef> ParamTypes,
    int ParamCount,
  ) {
    return _LLVMGetIntrinsicDeclaration(
      Mod,
      ID,
      ParamTypes,
      ParamCount,
    );
  }

  late final _LLVMGetIntrinsicDeclarationPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMModuleRef,
              ffi.UnsignedInt,
              ffi.Pointer<LLVMTypeRef>,
              ffi.Int)>>('LLVMGetIntrinsicDeclaration');
  late final _LLVMGetIntrinsicDeclaration =
      _LLVMGetIntrinsicDeclarationPtr.asFunction<
          LLVMValueRef Function(
              LLVMModuleRef, int, ffi.Pointer<LLVMTypeRef>, int)>();

  LLVMTypeRef LLVMIntrinsicGetType(
    LLVMContextRef Ctx,
    int ID,
    ffi.Pointer<LLVMTypeRef> ParamTypes,
    int ParamCount,
  ) {
    return _LLVMIntrinsicGetType(
      Ctx,
      ID,
      ParamTypes,
      ParamCount,
    );
  }

  late final _LLVMIntrinsicGetTypePtr = _lookup<
      ffi.NativeFunction<
          LLVMTypeRef Function(LLVMContextRef, ffi.UnsignedInt,
              ffi.Pointer<LLVMTypeRef>, ffi.Int)>>('LLVMIntrinsicGetType');
  late final _LLVMIntrinsicGetType = _LLVMIntrinsicGetTypePtr.asFunction<
      LLVMTypeRef Function(
          LLVMContextRef, int, ffi.Pointer<LLVMTypeRef>, int)>();

  ffi.Pointer<ffi.Char> LLVMIntrinsicGetName(
    int ID,
    ffi.Pointer<ffi.Int> NameLength,
  ) {
    return _LLVMIntrinsicGetName(
      ID,
      NameLength,
    );
  }

  late final _LLVMIntrinsicGetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Int>)>>('LLVMIntrinsicGetName');
  late final _LLVMIntrinsicGetName = _LLVMIntrinsicGetNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> LLVMIntrinsicCopyOverloadedName(
    int ID,
    ffi.Pointer<LLVMTypeRef> ParamTypes,
    int ParamCount,
    ffi.Pointer<ffi.Int> NameLength,
  ) {
    return _LLVMIntrinsicCopyOverloadedName(
      ID,
      ParamTypes,
      ParamCount,
      NameLength,
    );
  }

  late final _LLVMIntrinsicCopyOverloadedNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt,
              ffi.Pointer<LLVMTypeRef>,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('LLVMIntrinsicCopyOverloadedName');
  late final _LLVMIntrinsicCopyOverloadedName =
      _LLVMIntrinsicCopyOverloadedNamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              int, ffi.Pointer<LLVMTypeRef>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> LLVMIntrinsicCopyOverloadedName2(
    LLVMModuleRef Mod,
    int ID,
    ffi.Pointer<LLVMTypeRef> ParamTypes,
    int ParamCount,
    ffi.Pointer<ffi.Int> NameLength,
  ) {
    return _LLVMIntrinsicCopyOverloadedName2(
      Mod,
      ID,
      ParamTypes,
      ParamCount,
      NameLength,
    );
  }

  late final _LLVMIntrinsicCopyOverloadedName2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMModuleRef,
              ffi.UnsignedInt,
              ffi.Pointer<LLVMTypeRef>,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('LLVMIntrinsicCopyOverloadedName2');
  late final _LLVMIntrinsicCopyOverloadedName2 =
      _LLVMIntrinsicCopyOverloadedName2Ptr.asFunction<
          ffi.Pointer<ffi.Char> Function(LLVMModuleRef, int,
              ffi.Pointer<LLVMTypeRef>, int, ffi.Pointer<ffi.Int>)>();

  int LLVMIntrinsicIsOverloaded(
    int ID,
  ) {
    return _LLVMIntrinsicIsOverloaded(
      ID,
    );
  }

  late final _LLVMIntrinsicIsOverloadedPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(ffi.UnsignedInt)>>(
          'LLVMIntrinsicIsOverloaded');
  late final _LLVMIntrinsicIsOverloaded =
      _LLVMIntrinsicIsOverloadedPtr.asFunction<int Function(int)>();

  int LLVMGetFunctionCallConv(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetFunctionCallConv(
      Fn,
    );
  }

  late final _LLVMGetFunctionCallConvPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetFunctionCallConv');
  late final _LLVMGetFunctionCallConv =
      _LLVMGetFunctionCallConvPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetFunctionCallConv(
    LLVMValueRef Fn,
    int CC,
  ) {
    return _LLVMSetFunctionCallConv(
      Fn,
      CC,
    );
  }

  late final _LLVMSetFunctionCallConvPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.UnsignedInt)>>(
      'LLVMSetFunctionCallConv');
  late final _LLVMSetFunctionCallConv = _LLVMSetFunctionCallConvPtr.asFunction<
      void Function(LLVMValueRef, int)>();

  ffi.Pointer<ffi.Char> LLVMGetGC(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetGC(
      Fn,
    );
  }

  late final _LLVMGetGCPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMValueRef)>>(
          'LLVMGetGC');
  late final _LLVMGetGC =
      _LLVMGetGCPtr.asFunction<ffi.Pointer<ffi.Char> Function(LLVMValueRef)>();

  void LLVMSetGC(
    LLVMValueRef Fn,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMSetGC(
      Fn,
      Name,
    );
  }

  late final _LLVMSetGCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMSetGC');
  late final _LLVMSetGC = _LLVMSetGCPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  void LLVMAddAttributeAtIndex(
    LLVMValueRef F,
    int Idx,
    LLVMAttributeRef A,
  ) {
    return _LLVMAddAttributeAtIndex(
      F,
      Idx,
      A,
    );
  }

  late final _LLVMAddAttributeAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              LLVMAttributeRef)>>('LLVMAddAttributeAtIndex');
  late final _LLVMAddAttributeAtIndex = _LLVMAddAttributeAtIndexPtr.asFunction<
      void Function(LLVMValueRef, int, LLVMAttributeRef)>();

  int LLVMGetAttributeCountAtIndex(
    LLVMValueRef F,
    int Idx,
  ) {
    return _LLVMGetAttributeCountAtIndex(
      F,
      Idx,
    );
  }

  late final _LLVMGetAttributeCountAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(LLVMValueRef,
              LLVMAttributeIndex)>>('LLVMGetAttributeCountAtIndex');
  late final _LLVMGetAttributeCountAtIndex = _LLVMGetAttributeCountAtIndexPtr
      .asFunction<int Function(LLVMValueRef, int)>();

  void LLVMGetAttributesAtIndex(
    LLVMValueRef F,
    int Idx,
    ffi.Pointer<LLVMAttributeRef> Attrs,
  ) {
    return _LLVMGetAttributesAtIndex(
      F,
      Idx,
      Attrs,
    );
  }

  late final _LLVMGetAttributesAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.Pointer<LLVMAttributeRef>)>>('LLVMGetAttributesAtIndex');
  late final _LLVMGetAttributesAtIndex =
      _LLVMGetAttributesAtIndexPtr.asFunction<
          void Function(LLVMValueRef, int, ffi.Pointer<LLVMAttributeRef>)>();

  LLVMAttributeRef LLVMGetEnumAttributeAtIndex(
    LLVMValueRef F,
    int Idx,
    int KindID,
  ) {
    return _LLVMGetEnumAttributeAtIndex(
      F,
      Idx,
      KindID,
    );
  }

  late final _LLVMGetEnumAttributeAtIndexPtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.UnsignedInt)>>('LLVMGetEnumAttributeAtIndex');
  late final _LLVMGetEnumAttributeAtIndex = _LLVMGetEnumAttributeAtIndexPtr
      .asFunction<LLVMAttributeRef Function(LLVMValueRef, int, int)>();

  LLVMAttributeRef LLVMGetStringAttributeAtIndex(
    LLVMValueRef F,
    int Idx,
    ffi.Pointer<ffi.Char> K,
    int KLen,
  ) {
    return _LLVMGetStringAttributeAtIndex(
      F,
      Idx,
      K,
      KLen,
    );
  }

  late final _LLVMGetStringAttributeAtIndexPtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(
              LLVMValueRef,
              LLVMAttributeIndex,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMGetStringAttributeAtIndex');
  late final _LLVMGetStringAttributeAtIndex =
      _LLVMGetStringAttributeAtIndexPtr.asFunction<
          LLVMAttributeRef Function(
              LLVMValueRef, int, ffi.Pointer<ffi.Char>, int)>();

  void LLVMRemoveEnumAttributeAtIndex(
    LLVMValueRef F,
    int Idx,
    int KindID,
  ) {
    return _LLVMRemoveEnumAttributeAtIndex(
      F,
      Idx,
      KindID,
    );
  }

  late final _LLVMRemoveEnumAttributeAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.UnsignedInt)>>('LLVMRemoveEnumAttributeAtIndex');
  late final _LLVMRemoveEnumAttributeAtIndex =
      _LLVMRemoveEnumAttributeAtIndexPtr.asFunction<
          void Function(LLVMValueRef, int, int)>();

  void LLVMRemoveStringAttributeAtIndex(
    LLVMValueRef F,
    int Idx,
    ffi.Pointer<ffi.Char> K,
    int KLen,
  ) {
    return _LLVMRemoveStringAttributeAtIndex(
      F,
      Idx,
      K,
      KLen,
    );
  }

  late final _LLVMRemoveStringAttributeAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef,
              LLVMAttributeIndex,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMRemoveStringAttributeAtIndex');
  late final _LLVMRemoveStringAttributeAtIndex =
      _LLVMRemoveStringAttributeAtIndexPtr.asFunction<
          void Function(LLVMValueRef, int, ffi.Pointer<ffi.Char>, int)>();

  void LLVMAddTargetDependentFunctionAttr(
    LLVMValueRef Fn,
    ffi.Pointer<ffi.Char> A,
    ffi.Pointer<ffi.Char> V,
  ) {
    return _LLVMAddTargetDependentFunctionAttr(
      Fn,
      A,
      V,
    );
  }

  late final _LLVMAddTargetDependentFunctionAttrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('LLVMAddTargetDependentFunctionAttr');
  late final _LLVMAddTargetDependentFunctionAttr =
      _LLVMAddTargetDependentFunctionAttrPtr.asFunction<
          void Function(
              LLVMValueRef, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int LLVMCountParams(
    LLVMValueRef Fn,
  ) {
    return _LLVMCountParams(
      Fn,
    );
  }

  late final _LLVMCountParamsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMCountParams');
  late final _LLVMCountParams =
      _LLVMCountParamsPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMGetParams(
    LLVMValueRef Fn,
    ffi.Pointer<LLVMValueRef> Params,
  ) {
    return _LLVMGetParams(
      Fn,
      Params,
    );
  }

  late final _LLVMGetParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, ffi.Pointer<LLVMValueRef>)>>('LLVMGetParams');
  late final _LLVMGetParams = _LLVMGetParamsPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<LLVMValueRef>)>();

  LLVMValueRef LLVMGetParam(
    LLVMValueRef Fn,
    int Index,
  ) {
    return _LLVMGetParam(
      Fn,
      Index,
    );
  }

  late final _LLVMGetParamPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetParam');
  late final _LLVMGetParam =
      _LLVMGetParamPtr.asFunction<LLVMValueRef Function(LLVMValueRef, int)>();

  LLVMValueRef LLVMGetParamParent(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetParamParent(
      Inst,
    );
  }

  late final _LLVMGetParamParentPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetParamParent');
  late final _LLVMGetParamParent =
      _LLVMGetParamParentPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetFirstParam(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetFirstParam(
      Fn,
    );
  }

  late final _LLVMGetFirstParamPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetFirstParam');
  late final _LLVMGetFirstParam =
      _LLVMGetFirstParamPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetLastParam(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetLastParam(
      Fn,
    );
  }

  late final _LLVMGetLastParamPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetLastParam');
  late final _LLVMGetLastParam =
      _LLVMGetLastParamPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetNextParam(
    LLVMValueRef Arg,
  ) {
    return _LLVMGetNextParam(
      Arg,
    );
  }

  late final _LLVMGetNextParamPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetNextParam');
  late final _LLVMGetNextParam =
      _LLVMGetNextParamPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetPreviousParam(
    LLVMValueRef Arg,
  ) {
    return _LLVMGetPreviousParam(
      Arg,
    );
  }

  late final _LLVMGetPreviousParamPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPreviousParam');
  late final _LLVMGetPreviousParam = _LLVMGetPreviousParamPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  void LLVMSetParamAlignment(
    LLVMValueRef Arg,
    int Align,
  ) {
    return _LLVMSetParamAlignment(
      Arg,
      Align,
    );
  }

  late final _LLVMSetParamAlignmentPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.UnsignedInt)>>(
      'LLVMSetParamAlignment');
  late final _LLVMSetParamAlignment =
      _LLVMSetParamAlignmentPtr.asFunction<void Function(LLVMValueRef, int)>();

  LLVMValueRef LLVMAddGlobalIFunc(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
    LLVMTypeRef Ty,
    int AddrSpace,
    LLVMValueRef Resolver,
  ) {
    return _LLVMAddGlobalIFunc(
      M,
      Name,
      NameLen,
      Ty,
      AddrSpace,
      Resolver,
    );
  }

  late final _LLVMAddGlobalIFuncPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMModuleRef,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              LLVMTypeRef,
              ffi.UnsignedInt,
              LLVMValueRef)>>('LLVMAddGlobalIFunc');
  late final _LLVMAddGlobalIFunc = _LLVMAddGlobalIFuncPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int,
          LLVMTypeRef, int, LLVMValueRef)>();

  LLVMValueRef LLVMGetNamedGlobalIFunc(
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Name,
    int NameLen,
  ) {
    return _LLVMGetNamedGlobalIFunc(
      M,
      Name,
      NameLen,
    );
  }

  late final _LLVMGetNamedGlobalIFuncPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('LLVMGetNamedGlobalIFunc');
  late final _LLVMGetNamedGlobalIFunc = _LLVMGetNamedGlobalIFuncPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef, ffi.Pointer<ffi.Char>, int)>();

  LLVMValueRef LLVMGetFirstGlobalIFunc(
    LLVMModuleRef M,
  ) {
    return _LLVMGetFirstGlobalIFunc(
      M,
    );
  }

  late final _LLVMGetFirstGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetFirstGlobalIFunc');
  late final _LLVMGetFirstGlobalIFunc = _LLVMGetFirstGlobalIFuncPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef)>();

  LLVMValueRef LLVMGetLastGlobalIFunc(
    LLVMModuleRef M,
  ) {
    return _LLVMGetLastGlobalIFunc(
      M,
    );
  }

  late final _LLVMGetLastGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMModuleRef)>>(
          'LLVMGetLastGlobalIFunc');
  late final _LLVMGetLastGlobalIFunc = _LLVMGetLastGlobalIFuncPtr.asFunction<
      LLVMValueRef Function(LLVMModuleRef)>();

  LLVMValueRef LLVMGetNextGlobalIFunc(
    LLVMValueRef IFunc,
  ) {
    return _LLVMGetNextGlobalIFunc(
      IFunc,
    );
  }

  late final _LLVMGetNextGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetNextGlobalIFunc');
  late final _LLVMGetNextGlobalIFunc = _LLVMGetNextGlobalIFuncPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetPreviousGlobalIFunc(
    LLVMValueRef IFunc,
  ) {
    return _LLVMGetPreviousGlobalIFunc(
      IFunc,
    );
  }

  late final _LLVMGetPreviousGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPreviousGlobalIFunc');
  late final _LLVMGetPreviousGlobalIFunc = _LLVMGetPreviousGlobalIFuncPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetGlobalIFuncResolver(
    LLVMValueRef IFunc,
  ) {
    return _LLVMGetGlobalIFuncResolver(
      IFunc,
    );
  }

  late final _LLVMGetGlobalIFuncResolverPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetGlobalIFuncResolver');
  late final _LLVMGetGlobalIFuncResolver = _LLVMGetGlobalIFuncResolverPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  void LLVMSetGlobalIFuncResolver(
    LLVMValueRef IFunc,
    LLVMValueRef Resolver,
  ) {
    return _LLVMSetGlobalIFuncResolver(
      IFunc,
      Resolver,
    );
  }

  late final _LLVMSetGlobalIFuncResolverPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMSetGlobalIFuncResolver');
  late final _LLVMSetGlobalIFuncResolver = _LLVMSetGlobalIFuncResolverPtr
      .asFunction<void Function(LLVMValueRef, LLVMValueRef)>();

  void LLVMEraseGlobalIFunc(
    LLVMValueRef IFunc,
  ) {
    return _LLVMEraseGlobalIFunc(
      IFunc,
    );
  }

  late final _LLVMEraseGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMEraseGlobalIFunc');
  late final _LLVMEraseGlobalIFunc =
      _LLVMEraseGlobalIFuncPtr.asFunction<void Function(LLVMValueRef)>();

  void LLVMRemoveGlobalIFunc(
    LLVMValueRef IFunc,
  ) {
    return _LLVMRemoveGlobalIFunc(
      IFunc,
    );
  }

  late final _LLVMRemoveGlobalIFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMRemoveGlobalIFunc');
  late final _LLVMRemoveGlobalIFunc =
      _LLVMRemoveGlobalIFuncPtr.asFunction<void Function(LLVMValueRef)>();

  LLVMMetadataRef LLVMMDStringInContext2(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Str,
    int SLen,
  ) {
    return _LLVMMDStringInContext2(
      C,
      Str,
      SLen,
    );
  }

  late final _LLVMMDStringInContext2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('LLVMMDStringInContext2');
  late final _LLVMMDStringInContext2 = _LLVMMDStringInContext2Ptr.asFunction<
      LLVMMetadataRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>, int)>();

  LLVMMetadataRef LLVMMDNodeInContext2(
    LLVMContextRef C,
    ffi.Pointer<LLVMMetadataRef> MDs,
    int Count,
  ) {
    return _LLVMMDNodeInContext2(
      C,
      MDs,
      Count,
    );
  }

  late final _LLVMMDNodeInContext2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMMetadataRef Function(LLVMContextRef, ffi.Pointer<LLVMMetadataRef>,
              ffi.Int)>>('LLVMMDNodeInContext2');
  late final _LLVMMDNodeInContext2 = _LLVMMDNodeInContext2Ptr.asFunction<
      LLVMMetadataRef Function(
          LLVMContextRef, ffi.Pointer<LLVMMetadataRef>, int)>();

  LLVMValueRef LLVMMetadataAsValue(
    LLVMContextRef C,
    LLVMMetadataRef MD,
  ) {
    return _LLVMMetadataAsValue(
      C,
      MD,
    );
  }

  late final _LLVMMetadataAsValuePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMContextRef, LLVMMetadataRef)>>('LLVMMetadataAsValue');
  late final _LLVMMetadataAsValue = _LLVMMetadataAsValuePtr.asFunction<
      LLVMValueRef Function(LLVMContextRef, LLVMMetadataRef)>();

  LLVMMetadataRef LLVMValueAsMetadata(
    LLVMValueRef Val,
  ) {
    return _LLVMValueAsMetadata(
      Val,
    );
  }

  late final _LLVMValueAsMetadataPtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMValueRef)>>(
          'LLVMValueAsMetadata');
  late final _LLVMValueAsMetadata = _LLVMValueAsMetadataPtr.asFunction<
      LLVMMetadataRef Function(LLVMValueRef)>();

  ffi.Pointer<ffi.Char> LLVMGetMDString(
    LLVMValueRef V,
    ffi.Pointer<ffi.UnsignedInt> Length,
  ) {
    return _LLVMGetMDString(
      V,
      Length,
    );
  }

  late final _LLVMGetMDStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMValueRef, ffi.Pointer<ffi.UnsignedInt>)>>('LLVMGetMDString');
  late final _LLVMGetMDString = _LLVMGetMDStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          LLVMValueRef, ffi.Pointer<ffi.UnsignedInt>)>();

  int LLVMGetMDNodeNumOperands(
    LLVMValueRef V,
  ) {
    return _LLVMGetMDNodeNumOperands(
      V,
    );
  }

  late final _LLVMGetMDNodeNumOperandsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetMDNodeNumOperands');
  late final _LLVMGetMDNodeNumOperands =
      _LLVMGetMDNodeNumOperandsPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMGetMDNodeOperands(
    LLVMValueRef V,
    ffi.Pointer<LLVMValueRef> Dest,
  ) {
    return _LLVMGetMDNodeOperands(
      V,
      Dest,
    );
  }

  late final _LLVMGetMDNodeOperandsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef,
              ffi.Pointer<LLVMValueRef>)>>('LLVMGetMDNodeOperands');
  late final _LLVMGetMDNodeOperands = _LLVMGetMDNodeOperandsPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<LLVMValueRef>)>();

  void LLVMReplaceMDNodeOperandWith(
    LLVMValueRef V,
    int Index,
    LLVMMetadataRef Replacement,
  ) {
    return _LLVMReplaceMDNodeOperandWith(
      V,
      Index,
      Replacement,
    );
  }

  late final _LLVMReplaceMDNodeOperandWithPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.UnsignedInt,
              LLVMMetadataRef)>>('LLVMReplaceMDNodeOperandWith');
  late final _LLVMReplaceMDNodeOperandWith = _LLVMReplaceMDNodeOperandWithPtr
      .asFunction<void Function(LLVMValueRef, int, LLVMMetadataRef)>();

  LLVMValueRef LLVMMDStringInContext(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Str,
    int SLen,
  ) {
    return _LLVMMDStringInContext(
      C,
      Str,
      SLen,
    );
  }

  late final _LLVMMDStringInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMMDStringInContext');
  late final _LLVMMDStringInContext = _LLVMMDStringInContextPtr.asFunction<
      LLVMValueRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>, int)>();

  LLVMValueRef LLVMMDString(
    ffi.Pointer<ffi.Char> Str,
    int SLen,
  ) {
    return _LLVMMDString(
      Str,
      SLen,
    );
  }

  late final _LLVMMDStringPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('LLVMMDString');
  late final _LLVMMDString = _LLVMMDStringPtr.asFunction<
      LLVMValueRef Function(ffi.Pointer<ffi.Char>, int)>();

  LLVMValueRef LLVMMDNodeInContext(
    LLVMContextRef C,
    ffi.Pointer<LLVMValueRef> Vals,
    int Count,
  ) {
    return _LLVMMDNodeInContext(
      C,
      Vals,
      Count,
    );
  }

  late final _LLVMMDNodeInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMContextRef, ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt)>>('LLVMMDNodeInContext');
  late final _LLVMMDNodeInContext = _LLVMMDNodeInContextPtr.asFunction<
      LLVMValueRef Function(LLVMContextRef, ffi.Pointer<LLVMValueRef>, int)>();

  LLVMValueRef LLVMMDNode(
    ffi.Pointer<LLVMValueRef> Vals,
    int Count,
  ) {
    return _LLVMMDNode(
      Vals,
      Count,
    );
  }

  late final _LLVMMDNodePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              ffi.Pointer<LLVMValueRef>, ffi.UnsignedInt)>>('LLVMMDNode');
  late final _LLVMMDNode = _LLVMMDNodePtr.asFunction<
      LLVMValueRef Function(ffi.Pointer<LLVMValueRef>, int)>();

  LLVMValueRef LLVMBasicBlockAsValue(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMBasicBlockAsValue(
      BB,
    );
  }

  late final _LLVMBasicBlockAsValuePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBasicBlockRef)>>(
          'LLVMBasicBlockAsValue');
  late final _LLVMBasicBlockAsValue = _LLVMBasicBlockAsValuePtr.asFunction<
      LLVMValueRef Function(LLVMBasicBlockRef)>();

  int LLVMValueIsBasicBlock(
    LLVMValueRef Val,
  ) {
    return _LLVMValueIsBasicBlock(
      Val,
    );
  }

  late final _LLVMValueIsBasicBlockPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMValueIsBasicBlock');
  late final _LLVMValueIsBasicBlock =
      _LLVMValueIsBasicBlockPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMBasicBlockRef LLVMValueAsBasicBlock(
    LLVMValueRef Val,
  ) {
    return _LLVMValueAsBasicBlock(
      Val,
    );
  }

  late final _LLVMValueAsBasicBlockPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMValueAsBasicBlock');
  late final _LLVMValueAsBasicBlock = _LLVMValueAsBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef)>();

  ffi.Pointer<ffi.Char> LLVMGetBasicBlockName(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetBasicBlockName(
      BB,
    );
  }

  late final _LLVMGetBasicBlockNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMBasicBlockRef)>>('LLVMGetBasicBlockName');
  late final _LLVMGetBasicBlockName = _LLVMGetBasicBlockNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMBasicBlockRef)>();

  LLVMValueRef LLVMGetBasicBlockParent(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetBasicBlockParent(
      BB,
    );
  }

  late final _LLVMGetBasicBlockParentPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBasicBlockRef)>>(
          'LLVMGetBasicBlockParent');
  late final _LLVMGetBasicBlockParent = _LLVMGetBasicBlockParentPtr.asFunction<
      LLVMValueRef Function(LLVMBasicBlockRef)>();

  LLVMValueRef LLVMGetBasicBlockTerminator(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetBasicBlockTerminator(
      BB,
    );
  }

  late final _LLVMGetBasicBlockTerminatorPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBasicBlockRef)>>(
          'LLVMGetBasicBlockTerminator');
  late final _LLVMGetBasicBlockTerminator = _LLVMGetBasicBlockTerminatorPtr
      .asFunction<LLVMValueRef Function(LLVMBasicBlockRef)>();

  int LLVMCountBasicBlocks(
    LLVMValueRef Fn,
  ) {
    return _LLVMCountBasicBlocks(
      Fn,
    );
  }

  late final _LLVMCountBasicBlocksPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMCountBasicBlocks');
  late final _LLVMCountBasicBlocks =
      _LLVMCountBasicBlocksPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMGetBasicBlocks(
    LLVMValueRef Fn,
    ffi.Pointer<LLVMBasicBlockRef> BasicBlocks,
  ) {
    return _LLVMGetBasicBlocks(
      Fn,
      BasicBlocks,
    );
  }

  late final _LLVMGetBasicBlocksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef,
              ffi.Pointer<LLVMBasicBlockRef>)>>('LLVMGetBasicBlocks');
  late final _LLVMGetBasicBlocks = _LLVMGetBasicBlocksPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<LLVMBasicBlockRef>)>();

  LLVMBasicBlockRef LLVMGetFirstBasicBlock(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetFirstBasicBlock(
      Fn,
    );
  }

  late final _LLVMGetFirstBasicBlockPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetFirstBasicBlock');
  late final _LLVMGetFirstBasicBlock = _LLVMGetFirstBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef)>();

  LLVMBasicBlockRef LLVMGetLastBasicBlock(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetLastBasicBlock(
      Fn,
    );
  }

  late final _LLVMGetLastBasicBlockPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetLastBasicBlock');
  late final _LLVMGetLastBasicBlock = _LLVMGetLastBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef)>();

  LLVMBasicBlockRef LLVMGetNextBasicBlock(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetNextBasicBlock(
      BB,
    );
  }

  late final _LLVMGetNextBasicBlockPtr = _lookup<
          ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMBasicBlockRef)>>(
      'LLVMGetNextBasicBlock');
  late final _LLVMGetNextBasicBlock = _LLVMGetNextBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMBasicBlockRef)>();

  LLVMBasicBlockRef LLVMGetPreviousBasicBlock(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetPreviousBasicBlock(
      BB,
    );
  }

  late final _LLVMGetPreviousBasicBlockPtr = _lookup<
          ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMBasicBlockRef)>>(
      'LLVMGetPreviousBasicBlock');
  late final _LLVMGetPreviousBasicBlock = _LLVMGetPreviousBasicBlockPtr
      .asFunction<LLVMBasicBlockRef Function(LLVMBasicBlockRef)>();

  LLVMBasicBlockRef LLVMGetEntryBasicBlock(
    LLVMValueRef Fn,
  ) {
    return _LLVMGetEntryBasicBlock(
      Fn,
    );
  }

  late final _LLVMGetEntryBasicBlockPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetEntryBasicBlock');
  late final _LLVMGetEntryBasicBlock = _LLVMGetEntryBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef)>();

  void LLVMInsertExistingBasicBlockAfterInsertBlock(
    LLVMBuilderRef Builder,
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMInsertExistingBasicBlockAfterInsertBlock(
      Builder,
      BB,
    );
  }

  late final _LLVMInsertExistingBasicBlockAfterInsertBlockPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(LLVMBuilderRef, LLVMBasicBlockRef)>>(
      'LLVMInsertExistingBasicBlockAfterInsertBlock');
  late final _LLVMInsertExistingBasicBlockAfterInsertBlock =
      _LLVMInsertExistingBasicBlockAfterInsertBlockPtr.asFunction<
          void Function(LLVMBuilderRef, LLVMBasicBlockRef)>();

  void LLVMAppendExistingBasicBlock(
    LLVMValueRef Fn,
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMAppendExistingBasicBlock(
      Fn,
      BB,
    );
  }

  late final _LLVMAppendExistingBasicBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef,
              LLVMBasicBlockRef)>>('LLVMAppendExistingBasicBlock');
  late final _LLVMAppendExistingBasicBlock = _LLVMAppendExistingBasicBlockPtr
      .asFunction<void Function(LLVMValueRef, LLVMBasicBlockRef)>();

  LLVMBasicBlockRef LLVMCreateBasicBlockInContext(
    LLVMContextRef C,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMCreateBasicBlockInContext(
      C,
      Name,
    );
  }

  late final _LLVMCreateBasicBlockInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(LLVMContextRef,
              ffi.Pointer<ffi.Char>)>>('LLVMCreateBasicBlockInContext');
  late final _LLVMCreateBasicBlockInContext =
      _LLVMCreateBasicBlockInContextPtr.asFunction<
          LLVMBasicBlockRef Function(LLVMContextRef, ffi.Pointer<ffi.Char>)>();

  LLVMBasicBlockRef LLVMAppendBasicBlockInContext(
    LLVMContextRef C,
    LLVMValueRef Fn,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMAppendBasicBlockInContext(
      C,
      Fn,
      Name,
    );
  }

  late final _LLVMAppendBasicBlockInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(LLVMContextRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMAppendBasicBlockInContext');
  late final _LLVMAppendBasicBlockInContext =
      _LLVMAppendBasicBlockInContextPtr.asFunction<
          LLVMBasicBlockRef Function(
              LLVMContextRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMBasicBlockRef LLVMAppendBasicBlock(
    LLVMValueRef Fn,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMAppendBasicBlock(
      Fn,
      Name,
    );
  }

  late final _LLVMAppendBasicBlockPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMAppendBasicBlock');
  late final _LLVMAppendBasicBlock = _LLVMAppendBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMBasicBlockRef LLVMInsertBasicBlockInContext(
    LLVMContextRef C,
    LLVMBasicBlockRef BB,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMInsertBasicBlockInContext(
      C,
      BB,
      Name,
    );
  }

  late final _LLVMInsertBasicBlockInContextPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(LLVMContextRef, LLVMBasicBlockRef,
              ffi.Pointer<ffi.Char>)>>('LLVMInsertBasicBlockInContext');
  late final _LLVMInsertBasicBlockInContext =
      _LLVMInsertBasicBlockInContextPtr.asFunction<
          LLVMBasicBlockRef Function(
              LLVMContextRef, LLVMBasicBlockRef, ffi.Pointer<ffi.Char>)>();

  LLVMBasicBlockRef LLVMInsertBasicBlock(
    LLVMBasicBlockRef InsertBeforeBB,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMInsertBasicBlock(
      InsertBeforeBB,
      Name,
    );
  }

  late final _LLVMInsertBasicBlockPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(LLVMBasicBlockRef,
              ffi.Pointer<ffi.Char>)>>('LLVMInsertBasicBlock');
  late final _LLVMInsertBasicBlock = _LLVMInsertBasicBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMBasicBlockRef, ffi.Pointer<ffi.Char>)>();

  void LLVMDeleteBasicBlock(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMDeleteBasicBlock(
      BB,
    );
  }

  late final _LLVMDeleteBasicBlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMBasicBlockRef)>>(
          'LLVMDeleteBasicBlock');
  late final _LLVMDeleteBasicBlock =
      _LLVMDeleteBasicBlockPtr.asFunction<void Function(LLVMBasicBlockRef)>();

  void LLVMRemoveBasicBlockFromParent(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMRemoveBasicBlockFromParent(
      BB,
    );
  }

  late final _LLVMRemoveBasicBlockFromParentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMBasicBlockRef)>>(
          'LLVMRemoveBasicBlockFromParent');
  late final _LLVMRemoveBasicBlockFromParent =
      _LLVMRemoveBasicBlockFromParentPtr.asFunction<
          void Function(LLVMBasicBlockRef)>();

  void LLVMMoveBasicBlockBefore(
    LLVMBasicBlockRef BB,
    LLVMBasicBlockRef MovePos,
  ) {
    return _LLVMMoveBasicBlockBefore(
      BB,
      MovePos,
    );
  }

  late final _LLVMMoveBasicBlockBeforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMBasicBlockRef,
              LLVMBasicBlockRef)>>('LLVMMoveBasicBlockBefore');
  late final _LLVMMoveBasicBlockBefore = _LLVMMoveBasicBlockBeforePtr
      .asFunction<void Function(LLVMBasicBlockRef, LLVMBasicBlockRef)>();

  void LLVMMoveBasicBlockAfter(
    LLVMBasicBlockRef BB,
    LLVMBasicBlockRef MovePos,
  ) {
    return _LLVMMoveBasicBlockAfter(
      BB,
      MovePos,
    );
  }

  late final _LLVMMoveBasicBlockAfterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMBasicBlockRef,
              LLVMBasicBlockRef)>>('LLVMMoveBasicBlockAfter');
  late final _LLVMMoveBasicBlockAfter = _LLVMMoveBasicBlockAfterPtr.asFunction<
      void Function(LLVMBasicBlockRef, LLVMBasicBlockRef)>();

  LLVMValueRef LLVMGetFirstInstruction(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetFirstInstruction(
      BB,
    );
  }

  late final _LLVMGetFirstInstructionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBasicBlockRef)>>(
          'LLVMGetFirstInstruction');
  late final _LLVMGetFirstInstruction = _LLVMGetFirstInstructionPtr.asFunction<
      LLVMValueRef Function(LLVMBasicBlockRef)>();

  LLVMValueRef LLVMGetLastInstruction(
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMGetLastInstruction(
      BB,
    );
  }

  late final _LLVMGetLastInstructionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBasicBlockRef)>>(
          'LLVMGetLastInstruction');
  late final _LLVMGetLastInstruction = _LLVMGetLastInstructionPtr.asFunction<
      LLVMValueRef Function(LLVMBasicBlockRef)>();

  int LLVMHasMetadata(
    LLVMValueRef Val,
  ) {
    return _LLVMHasMetadata(
      Val,
    );
  }

  late final _LLVMHasMetadataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LLVMValueRef)>>(
          'LLVMHasMetadata');
  late final _LLVMHasMetadata =
      _LLVMHasMetadataPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetMetadata(
    LLVMValueRef Val,
    int KindID,
  ) {
    return _LLVMGetMetadata(
      Val,
      KindID,
    );
  }

  late final _LLVMGetMetadataPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetMetadata');
  late final _LLVMGetMetadata = _LLVMGetMetadataPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, int)>();

  void LLVMSetMetadata(
    LLVMValueRef Val,
    int KindID,
    LLVMValueRef Node,
  ) {
    return _LLVMSetMetadata(
      Val,
      KindID,
      Node,
    );
  }

  late final _LLVMSetMetadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, ffi.UnsignedInt, LLVMValueRef)>>('LLVMSetMetadata');
  late final _LLVMSetMetadata = _LLVMSetMetadataPtr.asFunction<
      void Function(LLVMValueRef, int, LLVMValueRef)>();

  ffi.Pointer<LLVMValueMetadataEntry>
      LLVMInstructionGetAllMetadataOtherThanDebugLoc(
    LLVMValueRef Instr,
    ffi.Pointer<ffi.Int> NumEntries,
  ) {
    return _LLVMInstructionGetAllMetadataOtherThanDebugLoc(
      Instr,
      NumEntries,
    );
  }

  late final _LLVMInstructionGetAllMetadataOtherThanDebugLocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<LLVMValueMetadataEntry> Function(
                  LLVMValueRef, ffi.Pointer<ffi.Int>)>>(
      'LLVMInstructionGetAllMetadataOtherThanDebugLoc');
  late final _LLVMInstructionGetAllMetadataOtherThanDebugLoc =
      _LLVMInstructionGetAllMetadataOtherThanDebugLocPtr.asFunction<
          ffi.Pointer<LLVMValueMetadataEntry> Function(
              LLVMValueRef, ffi.Pointer<ffi.Int>)>();

  LLVMBasicBlockRef LLVMGetInstructionParent(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetInstructionParent(
      Inst,
    );
  }

  late final _LLVMGetInstructionParentPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetInstructionParent');
  late final _LLVMGetInstructionParent = _LLVMGetInstructionParentPtr
      .asFunction<LLVMBasicBlockRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetNextInstruction(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetNextInstruction(
      Inst,
    );
  }

  late final _LLVMGetNextInstructionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetNextInstruction');
  late final _LLVMGetNextInstruction = _LLVMGetNextInstructionPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetPreviousInstruction(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetPreviousInstruction(
      Inst,
    );
  }

  late final _LLVMGetPreviousInstructionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetPreviousInstruction');
  late final _LLVMGetPreviousInstruction = _LLVMGetPreviousInstructionPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  void LLVMInstructionRemoveFromParent(
    LLVMValueRef Inst,
  ) {
    return _LLVMInstructionRemoveFromParent(
      Inst,
    );
  }

  late final _LLVMInstructionRemoveFromParentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMInstructionRemoveFromParent');
  late final _LLVMInstructionRemoveFromParent =
      _LLVMInstructionRemoveFromParentPtr.asFunction<
          void Function(LLVMValueRef)>();

  void LLVMInstructionEraseFromParent(
    LLVMValueRef Inst,
  ) {
    return _LLVMInstructionEraseFromParent(
      Inst,
    );
  }

  late final _LLVMInstructionEraseFromParentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMInstructionEraseFromParent');
  late final _LLVMInstructionEraseFromParent =
      _LLVMInstructionEraseFromParentPtr.asFunction<
          void Function(LLVMValueRef)>();

  void LLVMDeleteInstruction(
    LLVMValueRef Inst,
  ) {
    return _LLVMDeleteInstruction(
      Inst,
    );
  }

  late final _LLVMDeleteInstructionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef)>>(
          'LLVMDeleteInstruction');
  late final _LLVMDeleteInstruction =
      _LLVMDeleteInstructionPtr.asFunction<void Function(LLVMValueRef)>();

  int LLVMGetInstructionOpcode(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetInstructionOpcode(
      Inst,
    );
  }

  late final _LLVMGetInstructionOpcodePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetInstructionOpcode');
  late final _LLVMGetInstructionOpcode =
      _LLVMGetInstructionOpcodePtr.asFunction<int Function(LLVMValueRef)>();

  int LLVMGetICmpPredicate(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetICmpPredicate(
      Inst,
    );
  }

  late final _LLVMGetICmpPredicatePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetICmpPredicate');
  late final _LLVMGetICmpPredicate =
      _LLVMGetICmpPredicatePtr.asFunction<int Function(LLVMValueRef)>();

  int LLVMGetFCmpPredicate(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetFCmpPredicate(
      Inst,
    );
  }

  late final _LLVMGetFCmpPredicatePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetFCmpPredicate');
  late final _LLVMGetFCmpPredicate =
      _LLVMGetFCmpPredicatePtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMInstructionClone(
    LLVMValueRef Inst,
  ) {
    return _LLVMInstructionClone(
      Inst,
    );
  }

  late final _LLVMInstructionClonePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMInstructionClone');
  late final _LLVMInstructionClone = _LLVMInstructionClonePtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMIsATerminatorInst(
    LLVMValueRef Inst,
  ) {
    return _LLVMIsATerminatorInst(
      Inst,
    );
  }

  late final _LLVMIsATerminatorInstPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMIsATerminatorInst');
  late final _LLVMIsATerminatorInst = _LLVMIsATerminatorInstPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef)>();

  int LLVMGetNumArgOperands(
    LLVMValueRef Instr,
  ) {
    return _LLVMGetNumArgOperands(
      Instr,
    );
  }

  late final _LLVMGetNumArgOperandsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetNumArgOperands');
  late final _LLVMGetNumArgOperands =
      _LLVMGetNumArgOperandsPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetInstructionCallConv(
    LLVMValueRef Instr,
    int CC,
  ) {
    return _LLVMSetInstructionCallConv(
      Instr,
      CC,
    );
  }

  late final _LLVMSetInstructionCallConvPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.UnsignedInt)>>(
      'LLVMSetInstructionCallConv');
  late final _LLVMSetInstructionCallConv = _LLVMSetInstructionCallConvPtr
      .asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetInstructionCallConv(
    LLVMValueRef Instr,
  ) {
    return _LLVMGetInstructionCallConv(
      Instr,
    );
  }

  late final _LLVMGetInstructionCallConvPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetInstructionCallConv');
  late final _LLVMGetInstructionCallConv =
      _LLVMGetInstructionCallConvPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetInstrParamAlignment(
    LLVMValueRef Instr,
    int Idx,
    int Align,
  ) {
    return _LLVMSetInstrParamAlignment(
      Instr,
      Idx,
      Align,
    );
  }

  late final _LLVMSetInstrParamAlignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.UnsignedInt)>>('LLVMSetInstrParamAlignment');
  late final _LLVMSetInstrParamAlignment = _LLVMSetInstrParamAlignmentPtr
      .asFunction<void Function(LLVMValueRef, int, int)>();

  void LLVMAddCallSiteAttribute(
    LLVMValueRef C,
    int Idx,
    LLVMAttributeRef A,
  ) {
    return _LLVMAddCallSiteAttribute(
      C,
      Idx,
      A,
    );
  }

  late final _LLVMAddCallSiteAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              LLVMAttributeRef)>>('LLVMAddCallSiteAttribute');
  late final _LLVMAddCallSiteAttribute = _LLVMAddCallSiteAttributePtr
      .asFunction<void Function(LLVMValueRef, int, LLVMAttributeRef)>();

  int LLVMGetCallSiteAttributeCount(
    LLVMValueRef C,
    int Idx,
  ) {
    return _LLVMGetCallSiteAttributeCount(
      C,
      Idx,
    );
  }

  late final _LLVMGetCallSiteAttributeCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(LLVMValueRef,
              LLVMAttributeIndex)>>('LLVMGetCallSiteAttributeCount');
  late final _LLVMGetCallSiteAttributeCount = _LLVMGetCallSiteAttributeCountPtr
      .asFunction<int Function(LLVMValueRef, int)>();

  void LLVMGetCallSiteAttributes(
    LLVMValueRef C,
    int Idx,
    ffi.Pointer<LLVMAttributeRef> Attrs,
  ) {
    return _LLVMGetCallSiteAttributes(
      C,
      Idx,
      Attrs,
    );
  }

  late final _LLVMGetCallSiteAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.Pointer<LLVMAttributeRef>)>>('LLVMGetCallSiteAttributes');
  late final _LLVMGetCallSiteAttributes =
      _LLVMGetCallSiteAttributesPtr.asFunction<
          void Function(LLVMValueRef, int, ffi.Pointer<LLVMAttributeRef>)>();

  LLVMAttributeRef LLVMGetCallSiteEnumAttribute(
    LLVMValueRef C,
    int Idx,
    int KindID,
  ) {
    return _LLVMGetCallSiteEnumAttribute(
      C,
      Idx,
      KindID,
    );
  }

  late final _LLVMGetCallSiteEnumAttributePtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.UnsignedInt)>>('LLVMGetCallSiteEnumAttribute');
  late final _LLVMGetCallSiteEnumAttribute = _LLVMGetCallSiteEnumAttributePtr
      .asFunction<LLVMAttributeRef Function(LLVMValueRef, int, int)>();

  LLVMAttributeRef LLVMGetCallSiteStringAttribute(
    LLVMValueRef C,
    int Idx,
    ffi.Pointer<ffi.Char> K,
    int KLen,
  ) {
    return _LLVMGetCallSiteStringAttribute(
      C,
      Idx,
      K,
      KLen,
    );
  }

  late final _LLVMGetCallSiteStringAttributePtr = _lookup<
      ffi.NativeFunction<
          LLVMAttributeRef Function(
              LLVMValueRef,
              LLVMAttributeIndex,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMGetCallSiteStringAttribute');
  late final _LLVMGetCallSiteStringAttribute =
      _LLVMGetCallSiteStringAttributePtr.asFunction<
          LLVMAttributeRef Function(
              LLVMValueRef, int, ffi.Pointer<ffi.Char>, int)>();

  void LLVMRemoveCallSiteEnumAttribute(
    LLVMValueRef C,
    int Idx,
    int KindID,
  ) {
    return _LLVMRemoveCallSiteEnumAttribute(
      C,
      Idx,
      KindID,
    );
  }

  late final _LLVMRemoveCallSiteEnumAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, LLVMAttributeIndex,
              ffi.UnsignedInt)>>('LLVMRemoveCallSiteEnumAttribute');
  late final _LLVMRemoveCallSiteEnumAttribute =
      _LLVMRemoveCallSiteEnumAttributePtr.asFunction<
          void Function(LLVMValueRef, int, int)>();

  void LLVMRemoveCallSiteStringAttribute(
    LLVMValueRef C,
    int Idx,
    ffi.Pointer<ffi.Char> K,
    int KLen,
  ) {
    return _LLVMRemoveCallSiteStringAttribute(
      C,
      Idx,
      K,
      KLen,
    );
  }

  late final _LLVMRemoveCallSiteStringAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef,
              LLVMAttributeIndex,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('LLVMRemoveCallSiteStringAttribute');
  late final _LLVMRemoveCallSiteStringAttribute =
      _LLVMRemoveCallSiteStringAttributePtr.asFunction<
          void Function(LLVMValueRef, int, ffi.Pointer<ffi.Char>, int)>();

  LLVMTypeRef LLVMGetCalledFunctionType(
    LLVMValueRef C,
  ) {
    return _LLVMGetCalledFunctionType(
      C,
    );
  }

  late final _LLVMGetCalledFunctionTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMValueRef)>>(
          'LLVMGetCalledFunctionType');
  late final _LLVMGetCalledFunctionType = _LLVMGetCalledFunctionTypePtr
      .asFunction<LLVMTypeRef Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetCalledValue(
    LLVMValueRef Instr,
  ) {
    return _LLVMGetCalledValue(
      Instr,
    );
  }

  late final _LLVMGetCalledValuePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetCalledValue');
  late final _LLVMGetCalledValue =
      _LLVMGetCalledValuePtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  int LLVMIsTailCall(
    LLVMValueRef CallInst,
  ) {
    return _LLVMIsTailCall(
      CallInst,
    );
  }

  late final _LLVMIsTailCallPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsTailCall');
  late final _LLVMIsTailCall =
      _LLVMIsTailCallPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetTailCall(
    LLVMValueRef CallInst,
    int IsTailCall,
  ) {
    return _LLVMSetTailCall(
      CallInst,
      IsTailCall,
    );
  }

  late final _LLVMSetTailCallPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetTailCall');
  late final _LLVMSetTailCall =
      _LLVMSetTailCallPtr.asFunction<void Function(LLVMValueRef, int)>();

  LLVMBasicBlockRef LLVMGetNormalDest(
    LLVMValueRef InvokeInst,
  ) {
    return _LLVMGetNormalDest(
      InvokeInst,
    );
  }

  late final _LLVMGetNormalDestPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetNormalDest');
  late final _LLVMGetNormalDest = _LLVMGetNormalDestPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef)>();

  LLVMBasicBlockRef LLVMGetUnwindDest(
    LLVMValueRef InvokeInst,
  ) {
    return _LLVMGetUnwindDest(
      InvokeInst,
    );
  }

  late final _LLVMGetUnwindDestPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetUnwindDest');
  late final _LLVMGetUnwindDest = _LLVMGetUnwindDestPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef)>();

  void LLVMSetNormalDest(
    LLVMValueRef InvokeInst,
    LLVMBasicBlockRef B,
  ) {
    return _LLVMSetNormalDest(
      InvokeInst,
      B,
    );
  }

  late final _LLVMSetNormalDestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, LLVMBasicBlockRef)>>('LLVMSetNormalDest');
  late final _LLVMSetNormalDest = _LLVMSetNormalDestPtr.asFunction<
      void Function(LLVMValueRef, LLVMBasicBlockRef)>();

  void LLVMSetUnwindDest(
    LLVMValueRef InvokeInst,
    LLVMBasicBlockRef B,
  ) {
    return _LLVMSetUnwindDest(
      InvokeInst,
      B,
    );
  }

  late final _LLVMSetUnwindDestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, LLVMBasicBlockRef)>>('LLVMSetUnwindDest');
  late final _LLVMSetUnwindDest = _LLVMSetUnwindDestPtr.asFunction<
      void Function(LLVMValueRef, LLVMBasicBlockRef)>();

  int LLVMGetNumSuccessors(
    LLVMValueRef Term,
  ) {
    return _LLVMGetNumSuccessors(
      Term,
    );
  }

  late final _LLVMGetNumSuccessorsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetNumSuccessors');
  late final _LLVMGetNumSuccessors =
      _LLVMGetNumSuccessorsPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMBasicBlockRef LLVMGetSuccessor(
    LLVMValueRef Term,
    int i,
  ) {
    return _LLVMGetSuccessor(
      Term,
      i,
    );
  }

  late final _LLVMGetSuccessorPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetSuccessor');
  late final _LLVMGetSuccessor = _LLVMGetSuccessorPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef, int)>();

  void LLVMSetSuccessor(
    LLVMValueRef Term,
    int i,
    LLVMBasicBlockRef block,
  ) {
    return _LLVMSetSuccessor(
      Term,
      i,
      block,
    );
  }

  late final _LLVMSetSuccessorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.UnsignedInt,
              LLVMBasicBlockRef)>>('LLVMSetSuccessor');
  late final _LLVMSetSuccessor = _LLVMSetSuccessorPtr.asFunction<
      void Function(LLVMValueRef, int, LLVMBasicBlockRef)>();

  int LLVMIsConditional(
    LLVMValueRef Branch,
  ) {
    return _LLVMIsConditional(
      Branch,
    );
  }

  late final _LLVMIsConditionalPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsConditional');
  late final _LLVMIsConditional =
      _LLVMIsConditionalPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetCondition(
    LLVMValueRef Branch,
  ) {
    return _LLVMGetCondition(
      Branch,
    );
  }

  late final _LLVMGetConditionPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetCondition');
  late final _LLVMGetCondition =
      _LLVMGetConditionPtr.asFunction<LLVMValueRef Function(LLVMValueRef)>();

  void LLVMSetCondition(
    LLVMValueRef Branch,
    LLVMValueRef Cond,
  ) {
    return _LLVMSetCondition(
      Branch,
      Cond,
    );
  }

  late final _LLVMSetConditionPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMSetCondition');
  late final _LLVMSetCondition = _LLVMSetConditionPtr.asFunction<
      void Function(LLVMValueRef, LLVMValueRef)>();

  LLVMBasicBlockRef LLVMGetSwitchDefaultDest(
    LLVMValueRef SwitchInstr,
  ) {
    return _LLVMGetSwitchDefaultDest(
      SwitchInstr,
    );
  }

  late final _LLVMGetSwitchDefaultDestPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMValueRef)>>(
          'LLVMGetSwitchDefaultDest');
  late final _LLVMGetSwitchDefaultDest = _LLVMGetSwitchDefaultDestPtr
      .asFunction<LLVMBasicBlockRef Function(LLVMValueRef)>();

  LLVMTypeRef LLVMGetAllocatedType(
    LLVMValueRef Alloca,
  ) {
    return _LLVMGetAllocatedType(
      Alloca,
    );
  }

  late final _LLVMGetAllocatedTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMValueRef)>>(
          'LLVMGetAllocatedType');
  late final _LLVMGetAllocatedType =
      _LLVMGetAllocatedTypePtr.asFunction<LLVMTypeRef Function(LLVMValueRef)>();

  int LLVMIsInBounds(
    LLVMValueRef GEP,
  ) {
    return _LLVMIsInBounds(
      GEP,
    );
  }

  late final _LLVMIsInBoundsPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsInBounds');
  late final _LLVMIsInBounds =
      _LLVMIsInBoundsPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetIsInBounds(
    LLVMValueRef GEP,
    int InBounds,
  ) {
    return _LLVMSetIsInBounds(
      GEP,
      InBounds,
    );
  }

  late final _LLVMSetIsInBoundsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetIsInBounds');
  late final _LLVMSetIsInBounds =
      _LLVMSetIsInBoundsPtr.asFunction<void Function(LLVMValueRef, int)>();

  LLVMTypeRef LLVMGetGEPSourceElementType(
    LLVMValueRef GEP,
  ) {
    return _LLVMGetGEPSourceElementType(
      GEP,
    );
  }

  late final _LLVMGetGEPSourceElementTypePtr =
      _lookup<ffi.NativeFunction<LLVMTypeRef Function(LLVMValueRef)>>(
          'LLVMGetGEPSourceElementType');
  late final _LLVMGetGEPSourceElementType = _LLVMGetGEPSourceElementTypePtr
      .asFunction<LLVMTypeRef Function(LLVMValueRef)>();

  void LLVMAddIncoming(
    LLVMValueRef PhiNode,
    ffi.Pointer<LLVMValueRef> IncomingValues,
    ffi.Pointer<LLVMBasicBlockRef> IncomingBlocks,
    int Count,
  ) {
    return _LLVMAddIncoming(
      PhiNode,
      IncomingValues,
      IncomingBlocks,
      Count,
    );
  }

  late final _LLVMAddIncomingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.Pointer<LLVMBasicBlockRef>,
              ffi.UnsignedInt)>>('LLVMAddIncoming');
  late final _LLVMAddIncoming = _LLVMAddIncomingPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<LLVMValueRef>,
          ffi.Pointer<LLVMBasicBlockRef>, int)>();

  int LLVMCountIncoming(
    LLVMValueRef PhiNode,
  ) {
    return _LLVMCountIncoming(
      PhiNode,
    );
  }

  late final _LLVMCountIncomingPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMCountIncoming');
  late final _LLVMCountIncoming =
      _LLVMCountIncomingPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetIncomingValue(
    LLVMValueRef PhiNode,
    int Index,
  ) {
    return _LLVMGetIncomingValue(
      PhiNode,
      Index,
    );
  }

  late final _LLVMGetIncomingValuePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetIncomingValue');
  late final _LLVMGetIncomingValue = _LLVMGetIncomingValuePtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, int)>();

  LLVMBasicBlockRef LLVMGetIncomingBlock(
    LLVMValueRef PhiNode,
    int Index,
  ) {
    return _LLVMGetIncomingBlock(
      PhiNode,
      Index,
    );
  }

  late final _LLVMGetIncomingBlockPtr = _lookup<
      ffi.NativeFunction<
          LLVMBasicBlockRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetIncomingBlock');
  late final _LLVMGetIncomingBlock = _LLVMGetIncomingBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMValueRef, int)>();

  int LLVMGetNumIndices(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetNumIndices(
      Inst,
    );
  }

  late final _LLVMGetNumIndicesPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetNumIndices');
  late final _LLVMGetNumIndices =
      _LLVMGetNumIndicesPtr.asFunction<int Function(LLVMValueRef)>();

  ffi.Pointer<ffi.UnsignedInt> LLVMGetIndices(
    LLVMValueRef Inst,
  ) {
    return _LLVMGetIndices(
      Inst,
    );
  }

  late final _LLVMGetIndicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedInt> Function(
              LLVMValueRef)>>('LLVMGetIndices');
  late final _LLVMGetIndices = _LLVMGetIndicesPtr.asFunction<
      ffi.Pointer<ffi.UnsignedInt> Function(LLVMValueRef)>();

  LLVMBuilderRef LLVMCreateBuilderInContext(
    LLVMContextRef C,
  ) {
    return _LLVMCreateBuilderInContext(
      C,
    );
  }

  late final _LLVMCreateBuilderInContextPtr =
      _lookup<ffi.NativeFunction<LLVMBuilderRef Function(LLVMContextRef)>>(
          'LLVMCreateBuilderInContext');
  late final _LLVMCreateBuilderInContext = _LLVMCreateBuilderInContextPtr
      .asFunction<LLVMBuilderRef Function(LLVMContextRef)>();

  LLVMBuilderRef LLVMCreateBuilder() {
    return _LLVMCreateBuilder();
  }

  late final _LLVMCreateBuilderPtr =
      _lookup<ffi.NativeFunction<LLVMBuilderRef Function()>>(
          'LLVMCreateBuilder');
  late final _LLVMCreateBuilder =
      _LLVMCreateBuilderPtr.asFunction<LLVMBuilderRef Function()>();

  void LLVMPositionBuilder(
    LLVMBuilderRef Builder,
    LLVMBasicBlockRef Block,
    LLVMValueRef Instr,
  ) {
    return _LLVMPositionBuilder(
      Builder,
      Block,
      Instr,
    );
  }

  late final _LLVMPositionBuilderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMBuilderRef, LLVMBasicBlockRef,
              LLVMValueRef)>>('LLVMPositionBuilder');
  late final _LLVMPositionBuilder = _LLVMPositionBuilderPtr.asFunction<
      void Function(LLVMBuilderRef, LLVMBasicBlockRef, LLVMValueRef)>();

  void LLVMPositionBuilderBefore(
    LLVMBuilderRef Builder,
    LLVMValueRef Instr,
  ) {
    return _LLVMPositionBuilderBefore(
      Builder,
      Instr,
    );
  }

  late final _LLVMPositionBuilderBeforePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef, LLVMValueRef)>>(
      'LLVMPositionBuilderBefore');
  late final _LLVMPositionBuilderBefore = _LLVMPositionBuilderBeforePtr
      .asFunction<void Function(LLVMBuilderRef, LLVMValueRef)>();

  void LLVMPositionBuilderAtEnd(
    LLVMBuilderRef Builder,
    LLVMBasicBlockRef Block,
  ) {
    return _LLVMPositionBuilderAtEnd(
      Builder,
      Block,
    );
  }

  late final _LLVMPositionBuilderAtEndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMBuilderRef, LLVMBasicBlockRef)>>('LLVMPositionBuilderAtEnd');
  late final _LLVMPositionBuilderAtEnd = _LLVMPositionBuilderAtEndPtr
      .asFunction<void Function(LLVMBuilderRef, LLVMBasicBlockRef)>();

  LLVMBasicBlockRef LLVMGetInsertBlock(
    LLVMBuilderRef Builder,
  ) {
    return _LLVMGetInsertBlock(
      Builder,
    );
  }

  late final _LLVMGetInsertBlockPtr =
      _lookup<ffi.NativeFunction<LLVMBasicBlockRef Function(LLVMBuilderRef)>>(
          'LLVMGetInsertBlock');
  late final _LLVMGetInsertBlock = _LLVMGetInsertBlockPtr.asFunction<
      LLVMBasicBlockRef Function(LLVMBuilderRef)>();

  void LLVMClearInsertionPosition(
    LLVMBuilderRef Builder,
  ) {
    return _LLVMClearInsertionPosition(
      Builder,
    );
  }

  late final _LLVMClearInsertionPositionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef)>>(
          'LLVMClearInsertionPosition');
  late final _LLVMClearInsertionPosition = _LLVMClearInsertionPositionPtr
      .asFunction<void Function(LLVMBuilderRef)>();

  void LLVMInsertIntoBuilder(
    LLVMBuilderRef Builder,
    LLVMValueRef Instr,
  ) {
    return _LLVMInsertIntoBuilder(
      Builder,
      Instr,
    );
  }

  late final _LLVMInsertIntoBuilderPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef, LLVMValueRef)>>(
      'LLVMInsertIntoBuilder');
  late final _LLVMInsertIntoBuilder = _LLVMInsertIntoBuilderPtr.asFunction<
      void Function(LLVMBuilderRef, LLVMValueRef)>();

  void LLVMInsertIntoBuilderWithName(
    LLVMBuilderRef Builder,
    LLVMValueRef Instr,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMInsertIntoBuilderWithName(
      Builder,
      Instr,
      Name,
    );
  }

  late final _LLVMInsertIntoBuilderWithNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMInsertIntoBuilderWithName');
  late final _LLVMInsertIntoBuilderWithName =
      _LLVMInsertIntoBuilderWithNamePtr.asFunction<
          void Function(LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  void LLVMDisposeBuilder(
    LLVMBuilderRef Builder,
  ) {
    return _LLVMDisposeBuilder(
      Builder,
    );
  }

  late final _LLVMDisposeBuilderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef)>>(
          'LLVMDisposeBuilder');
  late final _LLVMDisposeBuilder =
      _LLVMDisposeBuilderPtr.asFunction<void Function(LLVMBuilderRef)>();

  LLVMMetadataRef LLVMGetCurrentDebugLocation2(
    LLVMBuilderRef Builder,
  ) {
    return _LLVMGetCurrentDebugLocation2(
      Builder,
    );
  }

  late final _LLVMGetCurrentDebugLocation2Ptr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMBuilderRef)>>(
          'LLVMGetCurrentDebugLocation2');
  late final _LLVMGetCurrentDebugLocation2 = _LLVMGetCurrentDebugLocation2Ptr
      .asFunction<LLVMMetadataRef Function(LLVMBuilderRef)>();

  void LLVMSetCurrentDebugLocation2(
    LLVMBuilderRef Builder,
    LLVMMetadataRef Loc,
  ) {
    return _LLVMSetCurrentDebugLocation2(
      Builder,
      Loc,
    );
  }

  late final _LLVMSetCurrentDebugLocation2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMBuilderRef,
              LLVMMetadataRef)>>('LLVMSetCurrentDebugLocation2');
  late final _LLVMSetCurrentDebugLocation2 = _LLVMSetCurrentDebugLocation2Ptr
      .asFunction<void Function(LLVMBuilderRef, LLVMMetadataRef)>();

  void LLVMSetInstDebugLocation(
    LLVMBuilderRef Builder,
    LLVMValueRef Inst,
  ) {
    return _LLVMSetInstDebugLocation(
      Builder,
      Inst,
    );
  }

  late final _LLVMSetInstDebugLocationPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef, LLVMValueRef)>>(
      'LLVMSetInstDebugLocation');
  late final _LLVMSetInstDebugLocation = _LLVMSetInstDebugLocationPtr
      .asFunction<void Function(LLVMBuilderRef, LLVMValueRef)>();

  void LLVMAddMetadataToInst(
    LLVMBuilderRef Builder,
    LLVMValueRef Inst,
  ) {
    return _LLVMAddMetadataToInst(
      Builder,
      Inst,
    );
  }

  late final _LLVMAddMetadataToInstPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef, LLVMValueRef)>>(
      'LLVMAddMetadataToInst');
  late final _LLVMAddMetadataToInst = _LLVMAddMetadataToInstPtr.asFunction<
      void Function(LLVMBuilderRef, LLVMValueRef)>();

  LLVMMetadataRef LLVMBuilderGetDefaultFPMathTag(
    LLVMBuilderRef Builder,
  ) {
    return _LLVMBuilderGetDefaultFPMathTag(
      Builder,
    );
  }

  late final _LLVMBuilderGetDefaultFPMathTagPtr =
      _lookup<ffi.NativeFunction<LLVMMetadataRef Function(LLVMBuilderRef)>>(
          'LLVMBuilderGetDefaultFPMathTag');
  late final _LLVMBuilderGetDefaultFPMathTag =
      _LLVMBuilderGetDefaultFPMathTagPtr.asFunction<
          LLVMMetadataRef Function(LLVMBuilderRef)>();

  void LLVMBuilderSetDefaultFPMathTag(
    LLVMBuilderRef Builder,
    LLVMMetadataRef FPMathTag,
  ) {
    return _LLVMBuilderSetDefaultFPMathTag(
      Builder,
      FPMathTag,
    );
  }

  late final _LLVMBuilderSetDefaultFPMathTagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMBuilderRef,
              LLVMMetadataRef)>>('LLVMBuilderSetDefaultFPMathTag');
  late final _LLVMBuilderSetDefaultFPMathTag =
      _LLVMBuilderSetDefaultFPMathTagPtr.asFunction<
          void Function(LLVMBuilderRef, LLVMMetadataRef)>();

  void LLVMSetCurrentDebugLocation(
    LLVMBuilderRef Builder,
    LLVMValueRef L,
  ) {
    return _LLVMSetCurrentDebugLocation(
      Builder,
      L,
    );
  }

  late final _LLVMSetCurrentDebugLocationPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMBuilderRef, LLVMValueRef)>>(
      'LLVMSetCurrentDebugLocation');
  late final _LLVMSetCurrentDebugLocation = _LLVMSetCurrentDebugLocationPtr
      .asFunction<void Function(LLVMBuilderRef, LLVMValueRef)>();

  LLVMValueRef LLVMGetCurrentDebugLocation(
    LLVMBuilderRef Builder,
  ) {
    return _LLVMGetCurrentDebugLocation(
      Builder,
    );
  }

  late final _LLVMGetCurrentDebugLocationPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBuilderRef)>>(
          'LLVMGetCurrentDebugLocation');
  late final _LLVMGetCurrentDebugLocation = _LLVMGetCurrentDebugLocationPtr
      .asFunction<LLVMValueRef Function(LLVMBuilderRef)>();

  LLVMValueRef LLVMBuildRetVoid(
    LLVMBuilderRef arg0,
  ) {
    return _LLVMBuildRetVoid(
      arg0,
    );
  }

  late final _LLVMBuildRetVoidPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBuilderRef)>>(
          'LLVMBuildRetVoid');
  late final _LLVMBuildRetVoid =
      _LLVMBuildRetVoidPtr.asFunction<LLVMValueRef Function(LLVMBuilderRef)>();

  LLVMValueRef LLVMBuildRet(
    LLVMBuilderRef arg0,
    LLVMValueRef V,
  ) {
    return _LLVMBuildRet(
      arg0,
      V,
    );
  }

  late final _LLVMBuildRetPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef)>>('LLVMBuildRet');
  late final _LLVMBuildRet = _LLVMBuildRetPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef)>();

  LLVMValueRef LLVMBuildAggregateRet(
    LLVMBuilderRef arg0,
    ffi.Pointer<LLVMValueRef> RetVals,
    int N,
  ) {
    return _LLVMBuildAggregateRet(
      arg0,
      RetVals,
      N,
    );
  }

  late final _LLVMBuildAggregateRetPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt)>>('LLVMBuildAggregateRet');
  late final _LLVMBuildAggregateRet = _LLVMBuildAggregateRetPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, ffi.Pointer<LLVMValueRef>, int)>();

  LLVMValueRef LLVMBuildBr(
    LLVMBuilderRef arg0,
    LLVMBasicBlockRef Dest,
  ) {
    return _LLVMBuildBr(
      arg0,
      Dest,
    );
  }

  late final _LLVMBuildBrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef, LLVMBasicBlockRef)>>('LLVMBuildBr');
  late final _LLVMBuildBr = _LLVMBuildBrPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMBasicBlockRef)>();

  LLVMValueRef LLVMBuildCondBr(
    LLVMBuilderRef arg0,
    LLVMValueRef If,
    LLVMBasicBlockRef Then,
    LLVMBasicBlockRef Else,
  ) {
    return _LLVMBuildCondBr(
      arg0,
      If,
      Then,
      Else,
    );
  }

  late final _LLVMBuildCondBrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef,
              LLVMBasicBlockRef)>>('LLVMBuildCondBr');
  late final _LLVMBuildCondBr = _LLVMBuildCondBrPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef,
          LLVMBasicBlockRef)>();

  LLVMValueRef LLVMBuildSwitch(
    LLVMBuilderRef arg0,
    LLVMValueRef V,
    LLVMBasicBlockRef Else,
    int NumCases,
  ) {
    return _LLVMBuildSwitch(
      arg0,
      V,
      Else,
      NumCases,
    );
  }

  late final _LLVMBuildSwitchPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef,
              ffi.UnsignedInt)>>('LLVMBuildSwitch');
  late final _LLVMBuildSwitch = _LLVMBuildSwitchPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef, int)>();

  LLVMValueRef LLVMBuildIndirectBr(
    LLVMBuilderRef B,
    LLVMValueRef Addr,
    int NumDests,
  ) {
    return _LLVMBuildIndirectBr(
      B,
      Addr,
      NumDests,
    );
  }

  late final _LLVMBuildIndirectBrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.UnsignedInt)>>('LLVMBuildIndirectBr');
  late final _LLVMBuildIndirectBr = _LLVMBuildIndirectBrPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, int)>();

  LLVMValueRef LLVMBuildInvoke2(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    LLVMValueRef Fn,
    ffi.Pointer<LLVMValueRef> Args,
    int NumArgs,
    LLVMBasicBlockRef Then,
    LLVMBasicBlockRef Catch,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildInvoke2(
      arg0,
      Ty,
      Fn,
      Args,
      NumArgs,
      Then,
      Catch,
      Name,
    );
  }

  late final _LLVMBuildInvoke2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMTypeRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt,
              LLVMBasicBlockRef,
              LLVMBasicBlockRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildInvoke2');
  late final _LLVMBuildInvoke2 = _LLVMBuildInvoke2Ptr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef,
          LLVMTypeRef,
          LLVMValueRef,
          ffi.Pointer<LLVMValueRef>,
          int,
          LLVMBasicBlockRef,
          LLVMBasicBlockRef,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildUnreachable(
    LLVMBuilderRef arg0,
  ) {
    return _LLVMBuildUnreachable(
      arg0,
    );
  }

  late final _LLVMBuildUnreachablePtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMBuilderRef)>>(
          'LLVMBuildUnreachable');
  late final _LLVMBuildUnreachable = _LLVMBuildUnreachablePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef)>();

  LLVMValueRef LLVMBuildResume(
    LLVMBuilderRef B,
    LLVMValueRef Exn,
  ) {
    return _LLVMBuildResume(
      B,
      Exn,
    );
  }

  late final _LLVMBuildResumePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef, LLVMValueRef)>>('LLVMBuildResume');
  late final _LLVMBuildResume = _LLVMBuildResumePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef)>();

  LLVMValueRef LLVMBuildLandingPad(
    LLVMBuilderRef B,
    LLVMTypeRef Ty,
    LLVMValueRef PersFn,
    int NumClauses,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildLandingPad(
      B,
      Ty,
      PersFn,
      NumClauses,
      Name,
    );
  }

  late final _LLVMBuildLandingPadPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('LLVMBuildLandingPad');
  late final _LLVMBuildLandingPad = _LLVMBuildLandingPadPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, int,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildCleanupRet(
    LLVMBuilderRef B,
    LLVMValueRef CatchPad,
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMBuildCleanupRet(
      B,
      CatchPad,
      BB,
    );
  }

  late final _LLVMBuildCleanupRetPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              LLVMBasicBlockRef)>>('LLVMBuildCleanupRet');
  late final _LLVMBuildCleanupRet = _LLVMBuildCleanupRetPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef)>();

  LLVMValueRef LLVMBuildCatchRet(
    LLVMBuilderRef B,
    LLVMValueRef CatchPad,
    LLVMBasicBlockRef BB,
  ) {
    return _LLVMBuildCatchRet(
      B,
      CatchPad,
      BB,
    );
  }

  late final _LLVMBuildCatchRetPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              LLVMBasicBlockRef)>>('LLVMBuildCatchRet');
  late final _LLVMBuildCatchRet = _LLVMBuildCatchRetPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef)>();

  LLVMValueRef LLVMBuildCatchPad(
    LLVMBuilderRef B,
    LLVMValueRef ParentPad,
    ffi.Pointer<LLVMValueRef> Args,
    int NumArgs,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildCatchPad(
      B,
      ParentPad,
      Args,
      NumArgs,
      Name,
    );
  }

  late final _LLVMBuildCatchPadPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildCatchPad');
  late final _LLVMBuildCatchPad = _LLVMBuildCatchPadPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
          ffi.Pointer<LLVMValueRef>, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildCleanupPad(
    LLVMBuilderRef B,
    LLVMValueRef ParentPad,
    ffi.Pointer<LLVMValueRef> Args,
    int NumArgs,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildCleanupPad(
      B,
      ParentPad,
      Args,
      NumArgs,
      Name,
    );
  }

  late final _LLVMBuildCleanupPadPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildCleanupPad');
  late final _LLVMBuildCleanupPad = _LLVMBuildCleanupPadPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
          ffi.Pointer<LLVMValueRef>, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildCatchSwitch(
    LLVMBuilderRef B,
    LLVMValueRef ParentPad,
    LLVMBasicBlockRef UnwindBB,
    int NumHandlers,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildCatchSwitch(
      B,
      ParentPad,
      UnwindBB,
      NumHandlers,
      Name,
    );
  }

  late final _LLVMBuildCatchSwitchPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef,
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('LLVMBuildCatchSwitch');
  late final _LLVMBuildCatchSwitch = _LLVMBuildCatchSwitchPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMBasicBlockRef,
          int, ffi.Pointer<ffi.Char>)>();

  void LLVMAddCase(
    LLVMValueRef Switch,
    LLVMValueRef OnVal,
    LLVMBasicBlockRef Dest,
  ) {
    return _LLVMAddCase(
      Switch,
      OnVal,
      Dest,
    );
  }

  late final _LLVMAddCasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, LLVMValueRef, LLVMBasicBlockRef)>>('LLVMAddCase');
  late final _LLVMAddCase = _LLVMAddCasePtr.asFunction<
      void Function(LLVMValueRef, LLVMValueRef, LLVMBasicBlockRef)>();

  void LLVMAddDestination(
    LLVMValueRef IndirectBr,
    LLVMBasicBlockRef Dest,
  ) {
    return _LLVMAddDestination(
      IndirectBr,
      Dest,
    );
  }

  late final _LLVMAddDestinationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, LLVMBasicBlockRef)>>('LLVMAddDestination');
  late final _LLVMAddDestination = _LLVMAddDestinationPtr.asFunction<
      void Function(LLVMValueRef, LLVMBasicBlockRef)>();

  int LLVMGetNumClauses(
    LLVMValueRef LandingPad,
  ) {
    return _LLVMGetNumClauses(
      LandingPad,
    );
  }

  late final _LLVMGetNumClausesPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetNumClauses');
  late final _LLVMGetNumClauses =
      _LLVMGetNumClausesPtr.asFunction<int Function(LLVMValueRef)>();

  LLVMValueRef LLVMGetClause(
    LLVMValueRef LandingPad,
    int Idx,
  ) {
    return _LLVMGetClause(
      LandingPad,
      Idx,
    );
  }

  late final _LLVMGetClausePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetClause');
  late final _LLVMGetClause =
      _LLVMGetClausePtr.asFunction<LLVMValueRef Function(LLVMValueRef, int)>();

  void LLVMAddClause(
    LLVMValueRef LandingPad,
    LLVMValueRef ClauseVal,
  ) {
    return _LLVMAddClause(
      LandingPad,
      ClauseVal,
    );
  }

  late final _LLVMAddClausePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMAddClause');
  late final _LLVMAddClause =
      _LLVMAddClausePtr.asFunction<void Function(LLVMValueRef, LLVMValueRef)>();

  int LLVMIsCleanup(
    LLVMValueRef LandingPad,
  ) {
    return _LLVMIsCleanup(
      LandingPad,
    );
  }

  late final _LLVMIsCleanupPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsCleanup');
  late final _LLVMIsCleanup =
      _LLVMIsCleanupPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetCleanup(
    LLVMValueRef LandingPad,
    int Val,
  ) {
    return _LLVMSetCleanup(
      LandingPad,
      Val,
    );
  }

  late final _LLVMSetCleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetCleanup');
  late final _LLVMSetCleanup =
      _LLVMSetCleanupPtr.asFunction<void Function(LLVMValueRef, int)>();

  void LLVMAddHandler(
    LLVMValueRef CatchSwitch,
    LLVMBasicBlockRef Dest,
  ) {
    return _LLVMAddHandler(
      CatchSwitch,
      Dest,
    );
  }

  late final _LLVMAddHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMValueRef, LLVMBasicBlockRef)>>('LLVMAddHandler');
  late final _LLVMAddHandler = _LLVMAddHandlerPtr.asFunction<
      void Function(LLVMValueRef, LLVMBasicBlockRef)>();

  int LLVMGetNumHandlers(
    LLVMValueRef CatchSwitch,
  ) {
    return _LLVMGetNumHandlers(
      CatchSwitch,
    );
  }

  late final _LLVMGetNumHandlersPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetNumHandlers');
  late final _LLVMGetNumHandlers =
      _LLVMGetNumHandlersPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMGetHandlers(
    LLVMValueRef CatchSwitch,
    ffi.Pointer<LLVMBasicBlockRef> Handlers,
  ) {
    return _LLVMGetHandlers(
      CatchSwitch,
      Handlers,
    );
  }

  late final _LLVMGetHandlersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef,
              ffi.Pointer<LLVMBasicBlockRef>)>>('LLVMGetHandlers');
  late final _LLVMGetHandlers = _LLVMGetHandlersPtr.asFunction<
      void Function(LLVMValueRef, ffi.Pointer<LLVMBasicBlockRef>)>();

  LLVMValueRef LLVMGetArgOperand(
    LLVMValueRef Funclet,
    int i,
  ) {
    return _LLVMGetArgOperand(
      Funclet,
      i,
    );
  }

  late final _LLVMGetArgOperandPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMGetArgOperand');
  late final _LLVMGetArgOperand = _LLVMGetArgOperandPtr.asFunction<
      LLVMValueRef Function(LLVMValueRef, int)>();

  void LLVMSetArgOperand(
    LLVMValueRef Funclet,
    int i,
    LLVMValueRef value,
  ) {
    return _LLVMSetArgOperand(
      Funclet,
      i,
      value,
    );
  }

  late final _LLVMSetArgOperandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMValueRef, ffi.UnsignedInt,
              LLVMValueRef)>>('LLVMSetArgOperand');
  late final _LLVMSetArgOperand = _LLVMSetArgOperandPtr.asFunction<
      void Function(LLVMValueRef, int, LLVMValueRef)>();

  LLVMValueRef LLVMGetParentCatchSwitch(
    LLVMValueRef CatchPad,
  ) {
    return _LLVMGetParentCatchSwitch(
      CatchPad,
    );
  }

  late final _LLVMGetParentCatchSwitchPtr =
      _lookup<ffi.NativeFunction<LLVMValueRef Function(LLVMValueRef)>>(
          'LLVMGetParentCatchSwitch');
  late final _LLVMGetParentCatchSwitch = _LLVMGetParentCatchSwitchPtr
      .asFunction<LLVMValueRef Function(LLVMValueRef)>();

  void LLVMSetParentCatchSwitch(
    LLVMValueRef CatchPad,
    LLVMValueRef CatchSwitch,
  ) {
    return _LLVMSetParentCatchSwitch(
      CatchPad,
      CatchSwitch,
    );
  }

  late final _LLVMSetParentCatchSwitchPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMValueRef)>>(
      'LLVMSetParentCatchSwitch');
  late final _LLVMSetParentCatchSwitch = _LLVMSetParentCatchSwitchPtr
      .asFunction<void Function(LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMBuildAdd(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildAdd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildAdd');
  late final _LLVMBuildAdd = _LLVMBuildAddPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNSWAdd(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNSWAdd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildNSWAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNSWAdd');
  late final _LLVMBuildNSWAdd = _LLVMBuildNSWAddPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNUWAdd(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNUWAdd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildNUWAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNUWAdd');
  late final _LLVMBuildNUWAdd = _LLVMBuildNUWAddPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFAdd(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFAdd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildFAddPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFAdd');
  late final _LLVMBuildFAdd = _LLVMBuildFAddPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSub(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSub(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildSub');
  late final _LLVMBuildSub = _LLVMBuildSubPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNSWSub(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNSWSub(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildNSWSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNSWSub');
  late final _LLVMBuildNSWSub = _LLVMBuildNSWSubPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNUWSub(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNUWSub(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildNUWSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNUWSub');
  late final _LLVMBuildNUWSub = _LLVMBuildNUWSubPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFSub(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFSub(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildFSubPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFSub');
  late final _LLVMBuildFSub = _LLVMBuildFSubPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildMul(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildMul(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildMul');
  late final _LLVMBuildMul = _LLVMBuildMulPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNSWMul(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNSWMul(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildNSWMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNSWMul');
  late final _LLVMBuildNSWMul = _LLVMBuildNSWMulPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNUWMul(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNUWMul(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildNUWMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNUWMul');
  late final _LLVMBuildNUWMul = _LLVMBuildNUWMulPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFMul(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFMul(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildFMulPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFMul');
  late final _LLVMBuildFMul = _LLVMBuildFMulPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildUDiv(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildUDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildUDivPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildUDiv');
  late final _LLVMBuildUDiv = _LLVMBuildUDivPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildExactUDiv(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildExactUDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildExactUDivPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildExactUDiv');
  late final _LLVMBuildExactUDiv = _LLVMBuildExactUDivPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSDiv(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildSDivPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildSDiv');
  late final _LLVMBuildSDiv = _LLVMBuildSDivPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildExactSDiv(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildExactSDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildExactSDivPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildExactSDiv');
  late final _LLVMBuildExactSDiv = _LLVMBuildExactSDivPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFDiv(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildFDivPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFDiv');
  late final _LLVMBuildFDiv = _LLVMBuildFDivPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildURem(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildURem(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildURemPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildURem');
  late final _LLVMBuildURem = _LLVMBuildURemPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSRem(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSRem(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildSRemPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildSRem');
  late final _LLVMBuildSRem = _LLVMBuildSRemPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFRem(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFRem(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildFRemPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFRem');
  late final _LLVMBuildFRem = _LLVMBuildFRemPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildShl(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildShl(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildShlPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildShl');
  late final _LLVMBuildShl = _LLVMBuildShlPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildLShr(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildLShr(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildLShrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildLShr');
  late final _LLVMBuildLShr = _LLVMBuildLShrPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildAShr(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildAShr(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildAShrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildAShr');
  late final _LLVMBuildAShr = _LLVMBuildAShrPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildAnd(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildAnd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildAndPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildAnd');
  late final _LLVMBuildAnd = _LLVMBuildAndPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildOr(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildOr(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildOrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildOr');
  late final _LLVMBuildOr = _LLVMBuildOrPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildXor(
    LLVMBuilderRef arg0,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildXor(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildXorPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildXor');
  late final _LLVMBuildXor = _LLVMBuildXorPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildBinOp(
    LLVMBuilderRef B,
    int Op,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildBinOp(
      B,
      Op,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildBinOpPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Int32, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildBinOp');
  late final _LLVMBuildBinOp = _LLVMBuildBinOpPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, int, LLVMValueRef, LLVMValueRef,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNeg(
    LLVMBuilderRef arg0,
    LLVMValueRef V,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNeg(
      arg0,
      V,
      Name,
    );
  }

  late final _LLVMBuildNegPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNeg');
  late final _LLVMBuildNeg = _LLVMBuildNegPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNSWNeg(
    LLVMBuilderRef B,
    LLVMValueRef V,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNSWNeg(
      B,
      V,
      Name,
    );
  }

  late final _LLVMBuildNSWNegPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNSWNeg');
  late final _LLVMBuildNSWNeg = _LLVMBuildNSWNegPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNUWNeg(
    LLVMBuilderRef B,
    LLVMValueRef V,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNUWNeg(
      B,
      V,
      Name,
    );
  }

  late final _LLVMBuildNUWNegPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNUWNeg');
  late final _LLVMBuildNUWNeg = _LLVMBuildNUWNegPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFNeg(
    LLVMBuilderRef arg0,
    LLVMValueRef V,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFNeg(
      arg0,
      V,
      Name,
    );
  }

  late final _LLVMBuildFNegPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFNeg');
  late final _LLVMBuildFNeg = _LLVMBuildFNegPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildNot(
    LLVMBuilderRef arg0,
    LLVMValueRef V,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildNot(
      arg0,
      V,
      Name,
    );
  }

  late final _LLVMBuildNotPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildNot');
  late final _LLVMBuildNot = _LLVMBuildNotPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildMalloc(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildMalloc(
      arg0,
      Ty,
      Name,
    );
  }

  late final _LLVMBuildMallocPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildMalloc');
  late final _LLVMBuildMalloc = _LLVMBuildMallocPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildArrayMalloc(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildArrayMalloc(
      arg0,
      Ty,
      Val,
      Name,
    );
  }

  late final _LLVMBuildArrayMallocPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildArrayMalloc');
  late final _LLVMBuildArrayMalloc = _LLVMBuildArrayMallocPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildMemSet(
    LLVMBuilderRef B,
    LLVMValueRef Ptr,
    LLVMValueRef Val,
    LLVMValueRef Len,
    int Align,
  ) {
    return _LLVMBuildMemSet(
      B,
      Ptr,
      Val,
      Len,
      Align,
    );
  }

  late final _LLVMBuildMemSetPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              LLVMValueRef, ffi.UnsignedInt)>>('LLVMBuildMemSet');
  late final _LLVMBuildMemSet = _LLVMBuildMemSetPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, LLVMValueRef, int)>();

  LLVMValueRef LLVMBuildMemCpy(
    LLVMBuilderRef B,
    LLVMValueRef Dst,
    int DstAlign,
    LLVMValueRef Src,
    int SrcAlign,
    LLVMValueRef Size,
  ) {
    return _LLVMBuildMemCpy(
      B,
      Dst,
      DstAlign,
      Src,
      SrcAlign,
      Size,
    );
  }

  late final _LLVMBuildMemCpyPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, ffi.UnsignedInt,
              LLVMValueRef, ffi.UnsignedInt, LLVMValueRef)>>('LLVMBuildMemCpy');
  late final _LLVMBuildMemCpy = _LLVMBuildMemCpyPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, int, LLVMValueRef,
          int, LLVMValueRef)>();

  LLVMValueRef LLVMBuildMemMove(
    LLVMBuilderRef B,
    LLVMValueRef Dst,
    int DstAlign,
    LLVMValueRef Src,
    int SrcAlign,
    LLVMValueRef Size,
  ) {
    return _LLVMBuildMemMove(
      B,
      Dst,
      DstAlign,
      Src,
      SrcAlign,
      Size,
    );
  }

  late final _LLVMBuildMemMovePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMValueRef,
              ffi.UnsignedInt,
              LLVMValueRef,
              ffi.UnsignedInt,
              LLVMValueRef)>>('LLVMBuildMemMove');
  late final _LLVMBuildMemMove = _LLVMBuildMemMovePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, int, LLVMValueRef,
          int, LLVMValueRef)>();

  LLVMValueRef LLVMBuildAlloca(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildAlloca(
      arg0,
      Ty,
      Name,
    );
  }

  late final _LLVMBuildAllocaPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildAlloca');
  late final _LLVMBuildAlloca = _LLVMBuildAllocaPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildArrayAlloca(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildArrayAlloca(
      arg0,
      Ty,
      Val,
      Name,
    );
  }

  late final _LLVMBuildArrayAllocaPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildArrayAlloca');
  late final _LLVMBuildArrayAlloca = _LLVMBuildArrayAllocaPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFree(
    LLVMBuilderRef arg0,
    LLVMValueRef PointerVal,
  ) {
    return _LLVMBuildFree(
      arg0,
      PointerVal,
    );
  }

  late final _LLVMBuildFreePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef, LLVMValueRef)>>('LLVMBuildFree');
  late final _LLVMBuildFree = _LLVMBuildFreePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef)>();

  LLVMValueRef LLVMBuildLoad2(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    LLVMValueRef PointerVal,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildLoad2(
      arg0,
      Ty,
      PointerVal,
      Name,
    );
  }

  late final _LLVMBuildLoad2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildLoad2');
  late final _LLVMBuildLoad2 = _LLVMBuildLoad2Ptr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildStore(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMValueRef Ptr,
  ) {
    return _LLVMBuildStore(
      arg0,
      Val,
      Ptr,
    );
  }

  late final _LLVMBuildStorePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef, LLVMValueRef, LLVMValueRef)>>('LLVMBuildStore');
  late final _LLVMBuildStore = _LLVMBuildStorePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef)>();

  LLVMValueRef LLVMBuildGEP2(
    LLVMBuilderRef B,
    LLVMTypeRef Ty,
    LLVMValueRef Pointer,
    ffi.Pointer<LLVMValueRef> Indices,
    int NumIndices,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildGEP2(
      B,
      Ty,
      Pointer,
      Indices,
      NumIndices,
      Name,
    );
  }

  late final _LLVMBuildGEP2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMTypeRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildGEP2');
  late final _LLVMBuildGEP2 = _LLVMBuildGEP2Ptr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
          ffi.Pointer<LLVMValueRef>, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildInBoundsGEP2(
    LLVMBuilderRef B,
    LLVMTypeRef Ty,
    LLVMValueRef Pointer,
    ffi.Pointer<LLVMValueRef> Indices,
    int NumIndices,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildInBoundsGEP2(
      B,
      Ty,
      Pointer,
      Indices,
      NumIndices,
      Name,
    );
  }

  late final _LLVMBuildInBoundsGEP2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMTypeRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildInBoundsGEP2');
  late final _LLVMBuildInBoundsGEP2 = _LLVMBuildInBoundsGEP2Ptr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
          ffi.Pointer<LLVMValueRef>, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildStructGEP2(
    LLVMBuilderRef B,
    LLVMTypeRef Ty,
    LLVMValueRef Pointer,
    int Idx,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildStructGEP2(
      B,
      Ty,
      Pointer,
      Idx,
      Name,
    );
  }

  late final _LLVMBuildStructGEP2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('LLVMBuildStructGEP2');
  late final _LLVMBuildStructGEP2 = _LLVMBuildStructGEP2Ptr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef, int,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildGlobalString(
    LLVMBuilderRef B,
    ffi.Pointer<ffi.Char> Str,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildGlobalString(
      B,
      Str,
      Name,
    );
  }

  late final _LLVMBuildGlobalStringPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildGlobalString');
  late final _LLVMBuildGlobalString = _LLVMBuildGlobalStringPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildGlobalStringPtr(
    LLVMBuilderRef B,
    ffi.Pointer<ffi.Char> Str,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildGlobalStringPtr1(
      B,
      Str,
      Name,
    );
  }

  late final _LLVMBuildGlobalStringPtrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildGlobalStringPtr');
  late final _LLVMBuildGlobalStringPtr1 =
      _LLVMBuildGlobalStringPtrPtr.asFunction<
          LLVMValueRef Function(
              LLVMBuilderRef, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int LLVMGetVolatile(
    LLVMValueRef MemoryAccessInst,
  ) {
    return _LLVMGetVolatile(
      MemoryAccessInst,
    );
  }

  late final _LLVMGetVolatilePtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMGetVolatile');
  late final _LLVMGetVolatile =
      _LLVMGetVolatilePtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetVolatile(
    LLVMValueRef MemoryAccessInst,
    int IsVolatile,
  ) {
    return _LLVMSetVolatile(
      MemoryAccessInst,
      IsVolatile,
    );
  }

  late final _LLVMSetVolatilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetVolatile');
  late final _LLVMSetVolatile =
      _LLVMSetVolatilePtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetWeak(
    LLVMValueRef CmpXchgInst,
  ) {
    return _LLVMGetWeak(
      CmpXchgInst,
    );
  }

  late final _LLVMGetWeakPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMGetWeak');
  late final _LLVMGetWeak =
      _LLVMGetWeakPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetWeak(
    LLVMValueRef CmpXchgInst,
    int IsWeak,
  ) {
    return _LLVMSetWeak(
      CmpXchgInst,
      IsWeak,
    );
  }

  late final _LLVMSetWeakPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetWeak');
  late final _LLVMSetWeak =
      _LLVMSetWeakPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetOrdering(
    LLVMValueRef MemoryAccessInst,
  ) {
    return _LLVMGetOrdering(
      MemoryAccessInst,
    );
  }

  late final _LLVMGetOrderingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetOrdering');
  late final _LLVMGetOrdering =
      _LLVMGetOrderingPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetOrdering(
    LLVMValueRef MemoryAccessInst,
    int Ordering,
  ) {
    return _LLVMSetOrdering(
      MemoryAccessInst,
      Ordering,
    );
  }

  late final _LLVMSetOrderingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetOrdering');
  late final _LLVMSetOrdering =
      _LLVMSetOrderingPtr.asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetAtomicRMWBinOp(
    LLVMValueRef AtomicRMWInst,
  ) {
    return _LLVMGetAtomicRMWBinOp(
      AtomicRMWInst,
    );
  }

  late final _LLVMGetAtomicRMWBinOpPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetAtomicRMWBinOp');
  late final _LLVMGetAtomicRMWBinOp =
      _LLVMGetAtomicRMWBinOpPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetAtomicRMWBinOp(
    LLVMValueRef AtomicRMWInst,
    int BinOp,
  ) {
    return _LLVMSetAtomicRMWBinOp(
      AtomicRMWInst,
      BinOp,
    );
  }

  late final _LLVMSetAtomicRMWBinOpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetAtomicRMWBinOp');
  late final _LLVMSetAtomicRMWBinOp =
      _LLVMSetAtomicRMWBinOpPtr.asFunction<void Function(LLVMValueRef, int)>();

  LLVMValueRef LLVMBuildTrunc(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildTrunc(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildTruncPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildTrunc');
  late final _LLVMBuildTrunc = _LLVMBuildTruncPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildZExt(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildZExt(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildZExtPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildZExt');
  late final _LLVMBuildZExt = _LLVMBuildZExtPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSExt(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSExt(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildSExtPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildSExt');
  late final _LLVMBuildSExt = _LLVMBuildSExtPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFPToUI(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFPToUI(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildFPToUIPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFPToUI');
  late final _LLVMBuildFPToUI = _LLVMBuildFPToUIPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFPToSI(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFPToSI(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildFPToSIPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFPToSI');
  late final _LLVMBuildFPToSI = _LLVMBuildFPToSIPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildUIToFP(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildUIToFP(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildUIToFPPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildUIToFP');
  late final _LLVMBuildUIToFP = _LLVMBuildUIToFPPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSIToFP(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSIToFP(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildSIToFPPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildSIToFP');
  late final _LLVMBuildSIToFP = _LLVMBuildSIToFPPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFPTrunc(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFPTrunc(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildFPTruncPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFPTrunc');
  late final _LLVMBuildFPTrunc = _LLVMBuildFPTruncPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFPExt(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFPExt(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildFPExtPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFPExt');
  late final _LLVMBuildFPExt = _LLVMBuildFPExtPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildPtrToInt(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildPtrToInt(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildPtrToIntPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildPtrToInt');
  late final _LLVMBuildPtrToInt = _LLVMBuildPtrToIntPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildIntToPtr(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildIntToPtr(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildIntToPtrPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildIntToPtr');
  late final _LLVMBuildIntToPtr = _LLVMBuildIntToPtrPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildBitCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildBitCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildBitCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildBitCast');
  late final _LLVMBuildBitCast = _LLVMBuildBitCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildAddrSpaceCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildAddrSpaceCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildAddrSpaceCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildAddrSpaceCast');
  late final _LLVMBuildAddrSpaceCast = _LLVMBuildAddrSpaceCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildZExtOrBitCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildZExtOrBitCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildZExtOrBitCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildZExtOrBitCast');
  late final _LLVMBuildZExtOrBitCast = _LLVMBuildZExtOrBitCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSExtOrBitCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSExtOrBitCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildSExtOrBitCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildSExtOrBitCast');
  late final _LLVMBuildSExtOrBitCast = _LLVMBuildSExtOrBitCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildTruncOrBitCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildTruncOrBitCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildTruncOrBitCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildTruncOrBitCast');
  late final _LLVMBuildTruncOrBitCast = _LLVMBuildTruncOrBitCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildCast(
    LLVMBuilderRef B,
    int Op,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildCast(
      B,
      Op,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Int32, LLVMValueRef,
              LLVMTypeRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildCast');
  late final _LLVMBuildCast = _LLVMBuildCastPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, int, LLVMValueRef, LLVMTypeRef,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildPointerCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildPointerCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildPointerCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildPointerCast');
  late final _LLVMBuildPointerCast = _LLVMBuildPointerCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildIntCast2(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    int IsSigned,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildIntCast2(
      arg0,
      Val,
      DestTy,
      IsSigned,
      Name,
    );
  }

  late final _LLVMBuildIntCast2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              LLVMBool, ffi.Pointer<ffi.Char>)>>('LLVMBuildIntCast2');
  late final _LLVMBuildIntCast2 = _LLVMBuildIntCast2Ptr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, int,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFPCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFPCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildFPCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFPCast');
  late final _LLVMBuildFPCast = _LLVMBuildFPCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildIntCast(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    LLVMTypeRef DestTy,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildIntCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  late final _LLVMBuildIntCastPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildIntCast');
  late final _LLVMBuildIntCast = _LLVMBuildIntCastPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  int LLVMGetCastOpcode(
    LLVMValueRef Src,
    int SrcIsSigned,
    LLVMTypeRef DestTy,
    int DestIsSigned,
  ) {
    return _LLVMGetCastOpcode(
      Src,
      SrcIsSigned,
      DestTy,
      DestIsSigned,
    );
  }

  late final _LLVMGetCastOpcodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(LLVMValueRef, LLVMBool, LLVMTypeRef,
              LLVMBool)>>('LLVMGetCastOpcode');
  late final _LLVMGetCastOpcode = _LLVMGetCastOpcodePtr.asFunction<
      int Function(LLVMValueRef, int, LLVMTypeRef, int)>();

  LLVMValueRef LLVMBuildICmp(
    LLVMBuilderRef arg0,
    int Op,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildICmp(
      arg0,
      Op,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildICmpPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Int32, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildICmp');
  late final _LLVMBuildICmp = _LLVMBuildICmpPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, int, LLVMValueRef, LLVMValueRef,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFCmp(
    LLVMBuilderRef arg0,
    int Op,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFCmp(
      arg0,
      Op,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildFCmpPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Int32, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildFCmp');
  late final _LLVMBuildFCmp = _LLVMBuildFCmpPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, int, LLVMValueRef, LLVMValueRef,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildPhi(
    LLVMBuilderRef arg0,
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildPhi(
      arg0,
      Ty,
      Name,
    );
  }

  late final _LLVMBuildPhiPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildPhi');
  late final _LLVMBuildPhi = _LLVMBuildPhiPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildCall2(
    LLVMBuilderRef arg0,
    LLVMTypeRef arg1,
    LLVMValueRef Fn,
    ffi.Pointer<LLVMValueRef> Args,
    int NumArgs,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildCall2(
      arg0,
      arg1,
      Fn,
      Args,
      NumArgs,
      Name,
    );
  }

  late final _LLVMBuildCall2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMTypeRef,
              LLVMValueRef,
              ffi.Pointer<LLVMValueRef>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildCall2');
  late final _LLVMBuildCall2 = _LLVMBuildCall2Ptr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
          ffi.Pointer<LLVMValueRef>, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildSelect(
    LLVMBuilderRef arg0,
    LLVMValueRef If,
    LLVMValueRef Then,
    LLVMValueRef Else,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildSelect(
      arg0,
      If,
      Then,
      Else,
      Name,
    );
  }

  late final _LLVMBuildSelectPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildSelect');
  late final _LLVMBuildSelect = _LLVMBuildSelectPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
          LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildVAArg(
    LLVMBuilderRef arg0,
    LLVMValueRef List,
    LLVMTypeRef Ty,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildVAArg(
      arg0,
      List,
      Ty,
      Name,
    );
  }

  late final _LLVMBuildVAArgPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMTypeRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildVAArg');
  late final _LLVMBuildVAArg = _LLVMBuildVAArgPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMTypeRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildExtractElement(
    LLVMBuilderRef arg0,
    LLVMValueRef VecVal,
    LLVMValueRef Index,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildExtractElement(
      arg0,
      VecVal,
      Index,
      Name,
    );
  }

  late final _LLVMBuildExtractElementPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildExtractElement');
  late final _LLVMBuildExtractElement = _LLVMBuildExtractElementPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildInsertElement(
    LLVMBuilderRef arg0,
    LLVMValueRef VecVal,
    LLVMValueRef EltVal,
    LLVMValueRef Index,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildInsertElement(
      arg0,
      VecVal,
      EltVal,
      Index,
      Name,
    );
  }

  late final _LLVMBuildInsertElementPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildInsertElement');
  late final _LLVMBuildInsertElement = _LLVMBuildInsertElementPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
          LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildShuffleVector(
    LLVMBuilderRef arg0,
    LLVMValueRef V1,
    LLVMValueRef V2,
    LLVMValueRef Mask,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildShuffleVector(
      arg0,
      V1,
      V2,
      Mask,
      Name,
    );
  }

  late final _LLVMBuildShuffleVectorPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildShuffleVector');
  late final _LLVMBuildShuffleVector = _LLVMBuildShuffleVectorPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
          LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildExtractValue(
    LLVMBuilderRef arg0,
    LLVMValueRef AggVal,
    int Index,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildExtractValue(
      arg0,
      AggVal,
      Index,
      Name,
    );
  }

  late final _LLVMBuildExtractValuePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildExtractValue');
  late final _LLVMBuildExtractValue = _LLVMBuildExtractValuePtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildInsertValue(
    LLVMBuilderRef arg0,
    LLVMValueRef AggVal,
    LLVMValueRef EltVal,
    int Index,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildInsertValue(
      arg0,
      AggVal,
      EltVal,
      Index,
      Name,
    );
  }

  late final _LLVMBuildInsertValuePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('LLVMBuildInsertValue');
  late final _LLVMBuildInsertValue = _LLVMBuildInsertValuePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef, int,
          ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFreeze(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFreeze(
      arg0,
      Val,
      Name,
    );
  }

  late final _LLVMBuildFreezePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFreeze');
  late final _LLVMBuildFreeze = _LLVMBuildFreezePtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildIsNull(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildIsNull(
      arg0,
      Val,
      Name,
    );
  }

  late final _LLVMBuildIsNullPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildIsNull');
  late final _LLVMBuildIsNull = _LLVMBuildIsNullPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildIsNotNull(
    LLVMBuilderRef arg0,
    LLVMValueRef Val,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildIsNotNull(
      arg0,
      Val,
      Name,
    );
  }

  late final _LLVMBuildIsNotNullPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildIsNotNull');
  late final _LLVMBuildIsNotNull = _LLVMBuildIsNotNullPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildPtrDiff2(
    LLVMBuilderRef arg0,
    LLVMTypeRef ElemTy,
    LLVMValueRef LHS,
    LLVMValueRef RHS,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildPtrDiff2(
      arg0,
      ElemTy,
      LHS,
      RHS,
      Name,
    );
  }

  late final _LLVMBuildPtrDiff2Ptr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
              LLVMValueRef, ffi.Pointer<ffi.Char>)>>('LLVMBuildPtrDiff2');
  late final _LLVMBuildPtrDiff2 = _LLVMBuildPtrDiff2Ptr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMTypeRef, LLVMValueRef,
          LLVMValueRef, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildFence(
    LLVMBuilderRef B,
    int ordering,
    int singleThread,
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMBuildFence(
      B,
      ordering,
      singleThread,
      Name,
    );
  }

  late final _LLVMBuildFencePtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Int32, LLVMBool,
              ffi.Pointer<ffi.Char>)>>('LLVMBuildFence');
  late final _LLVMBuildFence = _LLVMBuildFencePtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, int, int, ffi.Pointer<ffi.Char>)>();

  LLVMValueRef LLVMBuildAtomicRMW(
    LLVMBuilderRef B,
    int op,
    LLVMValueRef PTR,
    LLVMValueRef Val,
    int ordering,
    int singleThread,
  ) {
    return _LLVMBuildAtomicRMW(
      B,
      op,
      PTR,
      Val,
      ordering,
      singleThread,
    );
  }

  late final _LLVMBuildAtomicRMWPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(LLVMBuilderRef, ffi.Int32, LLVMValueRef,
              LLVMValueRef, ffi.Int32, LLVMBool)>>('LLVMBuildAtomicRMW');
  late final _LLVMBuildAtomicRMW = _LLVMBuildAtomicRMWPtr.asFunction<
      LLVMValueRef Function(
          LLVMBuilderRef, int, LLVMValueRef, LLVMValueRef, int, int)>();

  LLVMValueRef LLVMBuildAtomicCmpXchg(
    LLVMBuilderRef B,
    LLVMValueRef Ptr,
    LLVMValueRef Cmp,
    LLVMValueRef New,
    int SuccessOrdering,
    int FailureOrdering,
    int SingleThread,
  ) {
    return _LLVMBuildAtomicCmpXchg(
      B,
      Ptr,
      Cmp,
      New,
      SuccessOrdering,
      FailureOrdering,
      SingleThread,
    );
  }

  late final _LLVMBuildAtomicCmpXchgPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(
              LLVMBuilderRef,
              LLVMValueRef,
              LLVMValueRef,
              LLVMValueRef,
              ffi.Int32,
              ffi.Int32,
              LLVMBool)>>('LLVMBuildAtomicCmpXchg');
  late final _LLVMBuildAtomicCmpXchg = _LLVMBuildAtomicCmpXchgPtr.asFunction<
      LLVMValueRef Function(LLVMBuilderRef, LLVMValueRef, LLVMValueRef,
          LLVMValueRef, int, int, int)>();

  int LLVMGetNumMaskElements(
    LLVMValueRef ShuffleVectorInst,
  ) {
    return _LLVMGetNumMaskElements(
      ShuffleVectorInst,
    );
  }

  late final _LLVMGetNumMaskElementsPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(LLVMValueRef)>>(
          'LLVMGetNumMaskElements');
  late final _LLVMGetNumMaskElements =
      _LLVMGetNumMaskElementsPtr.asFunction<int Function(LLVMValueRef)>();

  int LLVMGetUndefMaskElem() {
    return _LLVMGetUndefMaskElem();
  }

  late final _LLVMGetUndefMaskElemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('LLVMGetUndefMaskElem');
  late final _LLVMGetUndefMaskElem =
      _LLVMGetUndefMaskElemPtr.asFunction<int Function()>();

  int LLVMGetMaskValue(
    LLVMValueRef ShuffleVectorInst,
    int Elt,
  ) {
    return _LLVMGetMaskValue(
      ShuffleVectorInst,
      Elt,
    );
  }

  late final _LLVMGetMaskValuePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(LLVMValueRef, ffi.UnsignedInt)>>(
      'LLVMGetMaskValue');
  late final _LLVMGetMaskValue =
      _LLVMGetMaskValuePtr.asFunction<int Function(LLVMValueRef, int)>();

  int LLVMIsAtomicSingleThread(
    LLVMValueRef AtomicInst,
  ) {
    return _LLVMIsAtomicSingleThread(
      AtomicInst,
    );
  }

  late final _LLVMIsAtomicSingleThreadPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMValueRef)>>(
          'LLVMIsAtomicSingleThread');
  late final _LLVMIsAtomicSingleThread =
      _LLVMIsAtomicSingleThreadPtr.asFunction<int Function(LLVMValueRef)>();

  void LLVMSetAtomicSingleThread(
    LLVMValueRef AtomicInst,
    int SingleThread,
  ) {
    return _LLVMSetAtomicSingleThread(
      AtomicInst,
      SingleThread,
    );
  }

  late final _LLVMSetAtomicSingleThreadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, LLVMBool)>>(
          'LLVMSetAtomicSingleThread');
  late final _LLVMSetAtomicSingleThread = _LLVMSetAtomicSingleThreadPtr
      .asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetCmpXchgSuccessOrdering(
    LLVMValueRef CmpXchgInst,
  ) {
    return _LLVMGetCmpXchgSuccessOrdering(
      CmpXchgInst,
    );
  }

  late final _LLVMGetCmpXchgSuccessOrderingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetCmpXchgSuccessOrdering');
  late final _LLVMGetCmpXchgSuccessOrdering = _LLVMGetCmpXchgSuccessOrderingPtr
      .asFunction<int Function(LLVMValueRef)>();

  void LLVMSetCmpXchgSuccessOrdering(
    LLVMValueRef CmpXchgInst,
    int Ordering,
  ) {
    return _LLVMSetCmpXchgSuccessOrdering(
      CmpXchgInst,
      Ordering,
    );
  }

  late final _LLVMSetCmpXchgSuccessOrderingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetCmpXchgSuccessOrdering');
  late final _LLVMSetCmpXchgSuccessOrdering = _LLVMSetCmpXchgSuccessOrderingPtr
      .asFunction<void Function(LLVMValueRef, int)>();

  int LLVMGetCmpXchgFailureOrdering(
    LLVMValueRef CmpXchgInst,
  ) {
    return _LLVMGetCmpXchgFailureOrdering(
      CmpXchgInst,
    );
  }

  late final _LLVMGetCmpXchgFailureOrderingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(LLVMValueRef)>>(
          'LLVMGetCmpXchgFailureOrdering');
  late final _LLVMGetCmpXchgFailureOrdering = _LLVMGetCmpXchgFailureOrderingPtr
      .asFunction<int Function(LLVMValueRef)>();

  void LLVMSetCmpXchgFailureOrdering(
    LLVMValueRef CmpXchgInst,
    int Ordering,
  ) {
    return _LLVMSetCmpXchgFailureOrdering(
      CmpXchgInst,
      Ordering,
    );
  }

  late final _LLVMSetCmpXchgFailureOrderingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMValueRef, ffi.Int32)>>(
          'LLVMSetCmpXchgFailureOrdering');
  late final _LLVMSetCmpXchgFailureOrdering = _LLVMSetCmpXchgFailureOrderingPtr
      .asFunction<void Function(LLVMValueRef, int)>();

  LLVMModuleProviderRef LLVMCreateModuleProviderForExistingModule(
    LLVMModuleRef M,
  ) {
    return _LLVMCreateModuleProviderForExistingModule(
      M,
    );
  }

  late final _LLVMCreateModuleProviderForExistingModulePtr = _lookup<
          ffi.NativeFunction<LLVMModuleProviderRef Function(LLVMModuleRef)>>(
      'LLVMCreateModuleProviderForExistingModule');
  late final _LLVMCreateModuleProviderForExistingModule =
      _LLVMCreateModuleProviderForExistingModulePtr.asFunction<
          LLVMModuleProviderRef Function(LLVMModuleRef)>();

  void LLVMDisposeModuleProvider(
    LLVMModuleProviderRef M,
  ) {
    return _LLVMDisposeModuleProvider(
      M,
    );
  }

  late final _LLVMDisposeModuleProviderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMModuleProviderRef)>>(
          'LLVMDisposeModuleProvider');
  late final _LLVMDisposeModuleProvider = _LLVMDisposeModuleProviderPtr
      .asFunction<void Function(LLVMModuleProviderRef)>();

  int LLVMCreateMemoryBufferWithContentsOfFile(
    ffi.Pointer<ffi.Char> Path,
    ffi.Pointer<LLVMMemoryBufferRef> OutMemBuf,
    ffi.Pointer<ffi.Pointer<ffi.Char>> OutMessage,
  ) {
    return _LLVMCreateMemoryBufferWithContentsOfFile(
      Path,
      OutMemBuf,
      OutMessage,
    );
  }

  late final _LLVMCreateMemoryBufferWithContentsOfFilePtr = _lookup<
          ffi.NativeFunction<
              LLVMBool Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<LLVMMemoryBufferRef>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'LLVMCreateMemoryBufferWithContentsOfFile');
  late final _LLVMCreateMemoryBufferWithContentsOfFile =
      _LLVMCreateMemoryBufferWithContentsOfFilePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<LLVMMemoryBufferRef>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int LLVMCreateMemoryBufferWithSTDIN(
    ffi.Pointer<LLVMMemoryBufferRef> OutMemBuf,
    ffi.Pointer<ffi.Pointer<ffi.Char>> OutMessage,
  ) {
    return _LLVMCreateMemoryBufferWithSTDIN(
      OutMemBuf,
      OutMessage,
    );
  }

  late final _LLVMCreateMemoryBufferWithSTDINPtr = _lookup<
          ffi.NativeFunction<
              LLVMBool Function(ffi.Pointer<LLVMMemoryBufferRef>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'LLVMCreateMemoryBufferWithSTDIN');
  late final _LLVMCreateMemoryBufferWithSTDIN =
      _LLVMCreateMemoryBufferWithSTDINPtr.asFunction<
          int Function(ffi.Pointer<LLVMMemoryBufferRef>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRange(
    ffi.Pointer<ffi.Char> InputData,
    int InputDataLength,
    ffi.Pointer<ffi.Char> BufferName,
    int RequiresNullTerminator,
  ) {
    return _LLVMCreateMemoryBufferWithMemoryRange(
      InputData,
      InputDataLength,
      BufferName,
      RequiresNullTerminator,
    );
  }

  late final _LLVMCreateMemoryBufferWithMemoryRangePtr = _lookup<
      ffi.NativeFunction<
          LLVMMemoryBufferRef Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              LLVMBool)>>('LLVMCreateMemoryBufferWithMemoryRange');
  late final _LLVMCreateMemoryBufferWithMemoryRange =
      _LLVMCreateMemoryBufferWithMemoryRangePtr.asFunction<
          LLVMMemoryBufferRef Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRangeCopy(
    ffi.Pointer<ffi.Char> InputData,
    int InputDataLength,
    ffi.Pointer<ffi.Char> BufferName,
  ) {
    return _LLVMCreateMemoryBufferWithMemoryRangeCopy(
      InputData,
      InputDataLength,
      BufferName,
    );
  }

  late final _LLVMCreateMemoryBufferWithMemoryRangeCopyPtr = _lookup<
          ffi.NativeFunction<
              LLVMMemoryBufferRef Function(
                  ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'LLVMCreateMemoryBufferWithMemoryRangeCopy');
  late final _LLVMCreateMemoryBufferWithMemoryRangeCopy =
      _LLVMCreateMemoryBufferWithMemoryRangeCopyPtr.asFunction<
          LLVMMemoryBufferRef Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> LLVMGetBufferStart(
    LLVMMemoryBufferRef MemBuf,
  ) {
    return _LLVMGetBufferStart(
      MemBuf,
    );
  }

  late final _LLVMGetBufferStartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMMemoryBufferRef)>>('LLVMGetBufferStart');
  late final _LLVMGetBufferStart = _LLVMGetBufferStartPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMMemoryBufferRef)>();

  int LLVMGetBufferSize(
    LLVMMemoryBufferRef MemBuf,
  ) {
    return _LLVMGetBufferSize(
      MemBuf,
    );
  }

  late final _LLVMGetBufferSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(LLVMMemoryBufferRef)>>(
          'LLVMGetBufferSize');
  late final _LLVMGetBufferSize =
      _LLVMGetBufferSizePtr.asFunction<int Function(LLVMMemoryBufferRef)>();

  void LLVMDisposeMemoryBuffer(
    LLVMMemoryBufferRef MemBuf,
  ) {
    return _LLVMDisposeMemoryBuffer(
      MemBuf,
    );
  }

  late final _LLVMDisposeMemoryBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMMemoryBufferRef)>>(
          'LLVMDisposeMemoryBuffer');
  late final _LLVMDisposeMemoryBuffer = _LLVMDisposeMemoryBufferPtr.asFunction<
      void Function(LLVMMemoryBufferRef)>();

  LLVMPassRegistryRef LLVMGetGlobalPassRegistry() {
    return _LLVMGetGlobalPassRegistry();
  }

  late final _LLVMGetGlobalPassRegistryPtr =
      _lookup<ffi.NativeFunction<LLVMPassRegistryRef Function()>>(
          'LLVMGetGlobalPassRegistry');
  late final _LLVMGetGlobalPassRegistry = _LLVMGetGlobalPassRegistryPtr
      .asFunction<LLVMPassRegistryRef Function()>();

  LLVMPassManagerRef LLVMCreatePassManager() {
    return _LLVMCreatePassManager();
  }

  late final _LLVMCreatePassManagerPtr =
      _lookup<ffi.NativeFunction<LLVMPassManagerRef Function()>>(
          'LLVMCreatePassManager');
  late final _LLVMCreatePassManager =
      _LLVMCreatePassManagerPtr.asFunction<LLVMPassManagerRef Function()>();

  LLVMPassManagerRef LLVMCreateFunctionPassManagerForModule(
    LLVMModuleRef M,
  ) {
    return _LLVMCreateFunctionPassManagerForModule(
      M,
    );
  }

  late final _LLVMCreateFunctionPassManagerForModulePtr =
      _lookup<ffi.NativeFunction<LLVMPassManagerRef Function(LLVMModuleRef)>>(
          'LLVMCreateFunctionPassManagerForModule');
  late final _LLVMCreateFunctionPassManagerForModule =
      _LLVMCreateFunctionPassManagerForModulePtr.asFunction<
          LLVMPassManagerRef Function(LLVMModuleRef)>();

  LLVMPassManagerRef LLVMCreateFunctionPassManager(
    LLVMModuleProviderRef MP,
  ) {
    return _LLVMCreateFunctionPassManager(
      MP,
    );
  }

  late final _LLVMCreateFunctionPassManagerPtr = _lookup<
      ffi.NativeFunction<
          LLVMPassManagerRef Function(
              LLVMModuleProviderRef)>>('LLVMCreateFunctionPassManager');
  late final _LLVMCreateFunctionPassManager = _LLVMCreateFunctionPassManagerPtr
      .asFunction<LLVMPassManagerRef Function(LLVMModuleProviderRef)>();

  int LLVMRunPassManager(
    LLVMPassManagerRef PM,
    LLVMModuleRef M,
  ) {
    return _LLVMRunPassManager(
      PM,
      M,
    );
  }

  late final _LLVMRunPassManagerPtr = _lookup<
      ffi.NativeFunction<
          LLVMBool Function(
              LLVMPassManagerRef, LLVMModuleRef)>>('LLVMRunPassManager');
  late final _LLVMRunPassManager = _LLVMRunPassManagerPtr.asFunction<
      int Function(LLVMPassManagerRef, LLVMModuleRef)>();

  int LLVMInitializeFunctionPassManager(
    LLVMPassManagerRef FPM,
  ) {
    return _LLVMInitializeFunctionPassManager(
      FPM,
    );
  }

  late final _LLVMInitializeFunctionPassManagerPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMPassManagerRef)>>(
          'LLVMInitializeFunctionPassManager');
  late final _LLVMInitializeFunctionPassManager =
      _LLVMInitializeFunctionPassManagerPtr.asFunction<
          int Function(LLVMPassManagerRef)>();

  int LLVMRunFunctionPassManager(
    LLVMPassManagerRef FPM,
    LLVMValueRef F,
  ) {
    return _LLVMRunFunctionPassManager(
      FPM,
      F,
    );
  }

  late final _LLVMRunFunctionPassManagerPtr = _lookup<
      ffi.NativeFunction<
          LLVMBool Function(
              LLVMPassManagerRef, LLVMValueRef)>>('LLVMRunFunctionPassManager');
  late final _LLVMRunFunctionPassManager = _LLVMRunFunctionPassManagerPtr
      .asFunction<int Function(LLVMPassManagerRef, LLVMValueRef)>();

  int LLVMFinalizeFunctionPassManager(
    LLVMPassManagerRef FPM,
  ) {
    return _LLVMFinalizeFunctionPassManager(
      FPM,
    );
  }

  late final _LLVMFinalizeFunctionPassManagerPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMPassManagerRef)>>(
          'LLVMFinalizeFunctionPassManager');
  late final _LLVMFinalizeFunctionPassManager =
      _LLVMFinalizeFunctionPassManagerPtr.asFunction<
          int Function(LLVMPassManagerRef)>();

  void LLVMDisposePassManager(
    LLVMPassManagerRef PM,
  ) {
    return _LLVMDisposePassManager(
      PM,
    );
  }

  late final _LLVMDisposePassManagerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMPassManagerRef)>>(
          'LLVMDisposePassManager');
  late final _LLVMDisposePassManager = _LLVMDisposePassManagerPtr.asFunction<
      void Function(LLVMPassManagerRef)>();

  int LLVMStartMultithreaded() {
    return _LLVMStartMultithreaded();
  }

  late final _LLVMStartMultithreadedPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function()>>(
          'LLVMStartMultithreaded');
  late final _LLVMStartMultithreaded =
      _LLVMStartMultithreadedPtr.asFunction<int Function()>();

  void LLVMStopMultithreaded() {
    return _LLVMStopMultithreaded();
  }

  late final _LLVMStopMultithreadedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('LLVMStopMultithreaded');
  late final _LLVMStopMultithreaded =
      _LLVMStopMultithreadedPtr.asFunction<void Function()>();

  int LLVMIsMultithreaded() {
    return _LLVMIsMultithreaded();
  }

  late final _LLVMIsMultithreadedPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function()>>('LLVMIsMultithreaded');
  late final _LLVMIsMultithreaded =
      _LLVMIsMultithreadedPtr.asFunction<int Function()>();

  void initLLVM() {
    return _initLLVM();
  }

  late final _initLLVMPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('initLLVM');
  late final _initLLVM = _initLLVMPtr.asFunction<void Function()>();

  void destory(
    KModuleRef module,
  ) {
    return _destory(
      module,
    );
  }

  late final _destoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KModuleRef)>>('destory');
  late final _destory = _destoryPtr.asFunction<void Function(KModuleRef)>();

  LLVMValueRef getOrInsertFunction(
    ffi.Pointer<ffi.Char> name,
    LLVMModuleRef module,
    LLVMTypeRef functionTy,
  ) {
    return _getOrInsertFunction(
      name,
      module,
      functionTy,
    );
  }

  late final _getOrInsertFunctionPtr = _lookup<
      ffi.NativeFunction<
          LLVMValueRef Function(ffi.Pointer<ffi.Char>, LLVMModuleRef,
              LLVMTypeRef)>>('getOrInsertFunction');
  late final _getOrInsertFunction = _getOrInsertFunctionPtr.asFunction<
      LLVMValueRef Function(
          ffi.Pointer<ffi.Char>, LLVMModuleRef, LLVMTypeRef)>();

  KModuleRef createKModule(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _createKModule(
      name,
    );
  }

  late final _createKModulePtr =
      _lookup<ffi.NativeFunction<KModuleRef Function(ffi.Pointer<ffi.Char>)>>(
          'createKModule');
  late final _createKModule = _createKModulePtr
      .asFunction<KModuleRef Function(ffi.Pointer<ffi.Char>)>();

  void kModuleInit(
    KModuleRef module,
  ) {
    return _kModuleInit(
      module,
    );
  }

  late final _kModuleInitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KModuleRef)>>('kModuleInit');
  late final _kModuleInit =
      _kModuleInitPtr.asFunction<void Function(KModuleRef)>();

  void writeOutput(
    KModuleRef module,
  ) {
    return _writeOutput(
      module,
    );
  }

  late final _writeOutputPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KModuleRef)>>('writeOutput');
  late final _writeOutput =
      _writeOutputPtr.asFunction<void Function(KModuleRef)>();

  LLVMModuleRef getModule(
    KModuleRef ref,
  ) {
    return _getModule(
      ref,
    );
  }

  late final _getModulePtr =
      _lookup<ffi.NativeFunction<LLVMModuleRef Function(KModuleRef)>>(
          'getModule');
  late final _getModule =
      _getModulePtr.asFunction<LLVMModuleRef Function(KModuleRef)>();

  LLVMContextRef getLLVMContext(
    KModuleRef ref,
  ) {
    return _getLLVMContext(
      ref,
    );
  }

  late final _getLLVMContextPtr =
      _lookup<ffi.NativeFunction<LLVMContextRef Function(KModuleRef)>>(
          'getLLVMContext');
  late final _getLLVMContext =
      _getLLVMContextPtr.asFunction<LLVMContextRef Function(KModuleRef)>();

  LLVMPassManagerRef getFPM(
    KModuleRef ref,
  ) {
    return _getFPM(
      ref,
    );
  }

  late final _getFPMPtr =
      _lookup<ffi.NativeFunction<LLVMPassManagerRef Function(KModuleRef)>>(
          'getFPM');
  late final _getFPM =
      _getFPMPtr.asFunction<LLVMPassManagerRef Function(KModuleRef)>();

  ffi.Pointer<ffi.Int> getM(
    KModuleRef ref,
  ) {
    return _getM(
      ref,
    );
  }

  late final _getMPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(KModuleRef)>>(
          'getM');
  late final _getM =
      _getMPtr.asFunction<ffi.Pointer<ffi.Int> Function(KModuleRef)>();

  void insertBBFunction(
    LLVMBuilderRef ref,
    LLVMBasicBlockRef bb,
  ) {
    return _insertBBFunction(
      ref,
      bb,
    );
  }

  late final _insertBBFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              LLVMBuilderRef, LLVMBasicBlockRef)>>('insertBBFunction');
  late final _insertBBFunction = _insertBBFunctionPtr
      .asFunction<void Function(LLVMBuilderRef, LLVMBasicBlockRef)>();

  /// Returns the first llvm::Target in the registered targets list.
  LLVMTargetRef LLVMGetFirstTarget() {
    return _LLVMGetFirstTarget();
  }

  late final _LLVMGetFirstTargetPtr =
      _lookup<ffi.NativeFunction<LLVMTargetRef Function()>>(
          'LLVMGetFirstTarget');
  late final _LLVMGetFirstTarget =
      _LLVMGetFirstTargetPtr.asFunction<LLVMTargetRef Function()>();

  /// Returns the next llvm::Target given a previous one (or null if there's none)
  LLVMTargetRef LLVMGetNextTarget(
    LLVMTargetRef T,
  ) {
    return _LLVMGetNextTarget(
      T,
    );
  }

  late final _LLVMGetNextTargetPtr =
      _lookup<ffi.NativeFunction<LLVMTargetRef Function(LLVMTargetRef)>>(
          'LLVMGetNextTarget');
  late final _LLVMGetNextTarget =
      _LLVMGetNextTargetPtr.asFunction<LLVMTargetRef Function(LLVMTargetRef)>();

  /// Finds the target corresponding to the given name and stores it in \p T.
  /// Returns 0 on success.
  LLVMTargetRef LLVMGetTargetFromName(
    ffi.Pointer<ffi.Char> Name,
  ) {
    return _LLVMGetTargetFromName(
      Name,
    );
  }

  late final _LLVMGetTargetFromNamePtr = _lookup<
          ffi.NativeFunction<LLVMTargetRef Function(ffi.Pointer<ffi.Char>)>>(
      'LLVMGetTargetFromName');
  late final _LLVMGetTargetFromName = _LLVMGetTargetFromNamePtr.asFunction<
      LLVMTargetRef Function(ffi.Pointer<ffi.Char>)>();

  /// Finds the target corresponding to the given triple and stores it in \p T.
  /// Returns 0 on success. Optionally returns any error in ErrorMessage.
  /// Use LLVMDisposeMessage to dispose the message.
  int LLVMGetTargetFromTriple(
    ffi.Pointer<ffi.Char> Triple,
    ffi.Pointer<LLVMTargetRef> T,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ErrorMessage,
  ) {
    return _LLVMGetTargetFromTriple(
      Triple,
      T,
      ErrorMessage,
    );
  }

  late final _LLVMGetTargetFromTriplePtr = _lookup<
      ffi.NativeFunction<
          LLVMBool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<LLVMTargetRef>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('LLVMGetTargetFromTriple');
  late final _LLVMGetTargetFromTriple = _LLVMGetTargetFromTriplePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<LLVMTargetRef>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Returns the name of a target. See llvm::Target::getName
  ffi.Pointer<ffi.Char> LLVMGetTargetName(
    LLVMTargetRef T,
  ) {
    return _LLVMGetTargetName(
      T,
    );
  }

  late final _LLVMGetTargetNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMTargetRef)>>(
      'LLVMGetTargetName');
  late final _LLVMGetTargetName = _LLVMGetTargetNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMTargetRef)>();

  /// Returns the description  of a target. See llvm::Target::getDescription
  ffi.Pointer<ffi.Char> LLVMGetTargetDescription(
    LLVMTargetRef T,
  ) {
    return _LLVMGetTargetDescription(
      T,
    );
  }

  late final _LLVMGetTargetDescriptionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(LLVMTargetRef)>>(
      'LLVMGetTargetDescription');
  late final _LLVMGetTargetDescription = _LLVMGetTargetDescriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(LLVMTargetRef)>();

  /// Returns if the target has a JIT
  int LLVMTargetHasJIT(
    LLVMTargetRef T,
  ) {
    return _LLVMTargetHasJIT(
      T,
    );
  }

  late final _LLVMTargetHasJITPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTargetRef)>>(
          'LLVMTargetHasJIT');
  late final _LLVMTargetHasJIT =
      _LLVMTargetHasJITPtr.asFunction<int Function(LLVMTargetRef)>();

  /// Returns if the target has a TargetMachine associated
  int LLVMTargetHasTargetMachine(
    LLVMTargetRef T,
  ) {
    return _LLVMTargetHasTargetMachine(
      T,
    );
  }

  late final _LLVMTargetHasTargetMachinePtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTargetRef)>>(
          'LLVMTargetHasTargetMachine');
  late final _LLVMTargetHasTargetMachine =
      _LLVMTargetHasTargetMachinePtr.asFunction<int Function(LLVMTargetRef)>();

  /// Returns if the target as an ASM backend (required for emitting output)
  int LLVMTargetHasAsmBackend(
    LLVMTargetRef T,
  ) {
    return _LLVMTargetHasAsmBackend(
      T,
    );
  }

  late final _LLVMTargetHasAsmBackendPtr =
      _lookup<ffi.NativeFunction<LLVMBool Function(LLVMTargetRef)>>(
          'LLVMTargetHasAsmBackend');
  late final _LLVMTargetHasAsmBackend =
      _LLVMTargetHasAsmBackendPtr.asFunction<int Function(LLVMTargetRef)>();

  /// Creates a new llvm::TargetMachine. See llvm::Target::createTargetMachine
  LLVMTargetMachineRef LLVMCreateTargetMachine(
    LLVMTargetRef T,
    ffi.Pointer<ffi.Char> Triple,
    ffi.Pointer<ffi.Char> CPU,
    ffi.Pointer<ffi.Char> Features,
    int Level,
    int Reloc,
    int CodeModel,
  ) {
    return _LLVMCreateTargetMachine(
      T,
      Triple,
      CPU,
      Features,
      Level,
      Reloc,
      CodeModel,
    );
  }

  late final _LLVMCreateTargetMachinePtr = _lookup<
      ffi.NativeFunction<
          LLVMTargetMachineRef Function(
              LLVMTargetRef,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('LLVMCreateTargetMachine');
  late final _LLVMCreateTargetMachine = _LLVMCreateTargetMachinePtr.asFunction<
      LLVMTargetMachineRef Function(LLVMTargetRef, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int)>();

  /// Dispose the LLVMTargetMachineRef instance generated by
  /// LLVMCreateTargetMachine.
  void LLVMDisposeTargetMachine(
    LLVMTargetMachineRef T,
  ) {
    return _LLVMDisposeTargetMachine(
      T,
    );
  }

  late final _LLVMDisposeTargetMachinePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LLVMTargetMachineRef)>>(
          'LLVMDisposeTargetMachine');
  late final _LLVMDisposeTargetMachine = _LLVMDisposeTargetMachinePtr
      .asFunction<void Function(LLVMTargetMachineRef)>();

  /// Returns the Target used in a TargetMachine
  LLVMTargetRef LLVMGetTargetMachineTarget(
    LLVMTargetMachineRef T,
  ) {
    return _LLVMGetTargetMachineTarget(
      T,
    );
  }

  late final _LLVMGetTargetMachineTargetPtr =
      _lookup<ffi.NativeFunction<LLVMTargetRef Function(LLVMTargetMachineRef)>>(
          'LLVMGetTargetMachineTarget');
  late final _LLVMGetTargetMachineTarget = _LLVMGetTargetMachineTargetPtr
      .asFunction<LLVMTargetRef Function(LLVMTargetMachineRef)>();

  /// Returns the triple used creating this target machine. See
  /// llvm::TargetMachine::getTriple. The result needs to be disposed with
  /// LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMGetTargetMachineTriple(
    LLVMTargetMachineRef T,
  ) {
    return _LLVMGetTargetMachineTriple(
      T,
    );
  }

  late final _LLVMGetTargetMachineTriplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMTargetMachineRef)>>('LLVMGetTargetMachineTriple');
  late final _LLVMGetTargetMachineTriple = _LLVMGetTargetMachineTriplePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(LLVMTargetMachineRef)>();

  /// Returns the cpu used creating this target machine. See
  /// llvm::TargetMachine::getCPU. The result needs to be disposed with
  /// LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMGetTargetMachineCPU(
    LLVMTargetMachineRef T,
  ) {
    return _LLVMGetTargetMachineCPU(
      T,
    );
  }

  late final _LLVMGetTargetMachineCPUPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMTargetMachineRef)>>('LLVMGetTargetMachineCPU');
  late final _LLVMGetTargetMachineCPU = _LLVMGetTargetMachineCPUPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(LLVMTargetMachineRef)>();

  /// Returns the feature string used creating this target machine. See
  /// llvm::TargetMachine::getFeatureString. The result needs to be disposed with
  /// LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMGetTargetMachineFeatureString(
    LLVMTargetMachineRef T,
  ) {
    return _LLVMGetTargetMachineFeatureString(
      T,
    );
  }

  late final _LLVMGetTargetMachineFeatureStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              LLVMTargetMachineRef)>>('LLVMGetTargetMachineFeatureString');
  late final _LLVMGetTargetMachineFeatureString =
      _LLVMGetTargetMachineFeatureStringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(LLVMTargetMachineRef)>();

  /// Create a DataLayout based on the targetMachine.
  LLVMTargetDataRef LLVMCreateTargetDataLayout(
    LLVMTargetMachineRef T,
  ) {
    return _LLVMCreateTargetDataLayout(
      T,
    );
  }

  late final _LLVMCreateTargetDataLayoutPtr = _lookup<
          ffi.NativeFunction<LLVMTargetDataRef Function(LLVMTargetMachineRef)>>(
      'LLVMCreateTargetDataLayout');
  late final _LLVMCreateTargetDataLayout = _LLVMCreateTargetDataLayoutPtr
      .asFunction<LLVMTargetDataRef Function(LLVMTargetMachineRef)>();

  /// Set the target machine's ASM verbosity.
  void LLVMSetTargetMachineAsmVerbosity(
    LLVMTargetMachineRef T,
    int VerboseAsm,
  ) {
    return _LLVMSetTargetMachineAsmVerbosity(
      T,
      VerboseAsm,
    );
  }

  late final _LLVMSetTargetMachineAsmVerbosityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMTargetMachineRef,
              LLVMBool)>>('LLVMSetTargetMachineAsmVerbosity');
  late final _LLVMSetTargetMachineAsmVerbosity =
      _LLVMSetTargetMachineAsmVerbosityPtr.asFunction<
          void Function(LLVMTargetMachineRef, int)>();

  /// Emits an asm or object file for the given module to the filename. This
  /// wraps several c++ only classes (among them a file stream). Returns any
  /// error in ErrorMessage. Use LLVMDisposeMessage to dispose the message.
  int LLVMTargetMachineEmitToFile(
    LLVMTargetMachineRef T,
    LLVMModuleRef M,
    ffi.Pointer<ffi.Char> Filename,
    int codegen,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ErrorMessage,
  ) {
    return _LLVMTargetMachineEmitToFile(
      T,
      M,
      Filename,
      codegen,
      ErrorMessage,
    );
  }

  late final _LLVMTargetMachineEmitToFilePtr = _lookup<
          ffi.NativeFunction<
              LLVMBool Function(
                  LLVMTargetMachineRef,
                  LLVMModuleRef,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'LLVMTargetMachineEmitToFile');
  late final _LLVMTargetMachineEmitToFile =
      _LLVMTargetMachineEmitToFilePtr.asFunction<
          int Function(
              LLVMTargetMachineRef,
              LLVMModuleRef,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Compile the LLVM IR stored in \p M and store the result in \p OutMemBuf.
  int LLVMTargetMachineEmitToMemoryBuffer(
    LLVMTargetMachineRef T,
    LLVMModuleRef M,
    int codegen,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ErrorMessage,
    ffi.Pointer<LLVMMemoryBufferRef> OutMemBuf,
  ) {
    return _LLVMTargetMachineEmitToMemoryBuffer(
      T,
      M,
      codegen,
      ErrorMessage,
      OutMemBuf,
    );
  }

  late final _LLVMTargetMachineEmitToMemoryBufferPtr = _lookup<
          ffi.NativeFunction<
              LLVMBool Function(
                  LLVMTargetMachineRef,
                  LLVMModuleRef,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<LLVMMemoryBufferRef>)>>(
      'LLVMTargetMachineEmitToMemoryBuffer');
  late final _LLVMTargetMachineEmitToMemoryBuffer =
      _LLVMTargetMachineEmitToMemoryBufferPtr.asFunction<
          int Function(
              LLVMTargetMachineRef,
              LLVMModuleRef,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<LLVMMemoryBufferRef>)>();

  /// Get a triple for the host machine as a string. The result needs to be
  /// disposed with LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMGetDefaultTargetTriple() {
    return _LLVMGetDefaultTargetTriple();
  }

  late final _LLVMGetDefaultTargetTriplePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'LLVMGetDefaultTargetTriple');
  late final _LLVMGetDefaultTargetTriple = _LLVMGetDefaultTargetTriplePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Normalize a target triple. The result needs to be disposed with
  /// LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMNormalizeTargetTriple(
    ffi.Pointer<ffi.Char> triple,
  ) {
    return _LLVMNormalizeTargetTriple(
      triple,
    );
  }

  late final _LLVMNormalizeTargetTriplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('LLVMNormalizeTargetTriple');
  late final _LLVMNormalizeTargetTriple = _LLVMNormalizeTargetTriplePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// Get the host CPU as a string. The result needs to be disposed with
  /// LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMGetHostCPUName() {
    return _LLVMGetHostCPUName();
  }

  late final _LLVMGetHostCPUNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'LLVMGetHostCPUName');
  late final _LLVMGetHostCPUName =
      _LLVMGetHostCPUNamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Get the host CPU's features as a string. The result needs to be disposed
  /// with LLVMDisposeMessage.
  ffi.Pointer<ffi.Char> LLVMGetHostCPUFeatures() {
    return _LLVMGetHostCPUFeatures();
  }

  late final _LLVMGetHostCPUFeaturesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'LLVMGetHostCPUFeatures');
  late final _LLVMGetHostCPUFeatures =
      _LLVMGetHostCPUFeaturesPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Adds the target-specific analysis passes to the pass manager.
  void LLVMAddAnalysisPasses(
    LLVMTargetMachineRef T,
    LLVMPassManagerRef PM,
  ) {
    return _LLVMAddAnalysisPasses(
      T,
      PM,
    );
  }

  late final _LLVMAddAnalysisPassesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(LLVMTargetMachineRef,
              LLVMPassManagerRef)>>('LLVMAddAnalysisPasses');
  late final _LLVMAddAnalysisPasses = _LLVMAddAnalysisPassesPtr.asFunction<
      void Function(LLVMTargetMachineRef, LLVMPassManagerRef)>();
}

abstract class LLVMOpcode {
  static const int LLVMRet = 1;
  static const int LLVMBr = 2;
  static const int LLVMSwitch = 3;
  static const int LLVMIndirectBr = 4;
  static const int LLVMInvoke = 5;
  static const int LLVMUnreachable = 7;
  static const int LLVMCallBr = 67;
  static const int LLVMFNeg = 66;
  static const int LLVMAdd = 8;
  static const int LLVMFAdd = 9;
  static const int LLVMSub = 10;
  static const int LLVMFSub = 11;
  static const int LLVMMul = 12;
  static const int LLVMFMul = 13;
  static const int LLVMUDiv = 14;
  static const int LLVMSDiv = 15;
  static const int LLVMFDiv = 16;
  static const int LLVMURem = 17;
  static const int LLVMSRem = 18;
  static const int LLVMFRem = 19;
  static const int LLVMShl = 20;
  static const int LLVMLShr = 21;
  static const int LLVMAShr = 22;
  static const int LLVMAnd = 23;
  static const int LLVMOr = 24;
  static const int LLVMXor = 25;
  static const int LLVMAlloca = 26;
  static const int LLVMLoad = 27;
  static const int LLVMStore = 28;
  static const int LLVMGetElementPtr = 29;
  static const int LLVMTrunc = 30;
  static const int LLVMZExt = 31;
  static const int LLVMSExt = 32;
  static const int LLVMFPToUI = 33;
  static const int LLVMFPToSI = 34;
  static const int LLVMUIToFP = 35;
  static const int LLVMSIToFP = 36;
  static const int LLVMFPTrunc = 37;
  static const int LLVMFPExt = 38;
  static const int LLVMPtrToInt = 39;
  static const int LLVMIntToPtr = 40;
  static const int LLVMBitCast = 41;
  static const int LLVMAddrSpaceCast = 60;
  static const int LLVMICmp = 42;
  static const int LLVMFCmp = 43;
  static const int LLVMPHI = 44;
  static const int LLVMCall = 45;
  static const int LLVMSelect = 46;
  static const int LLVMUserOp1 = 47;
  static const int LLVMUserOp2 = 48;
  static const int LLVMVAArg = 49;
  static const int LLVMExtractElement = 50;
  static const int LLVMInsertElement = 51;
  static const int LLVMShuffleVector = 52;
  static const int LLVMExtractValue = 53;
  static const int LLVMInsertValue = 54;
  static const int LLVMFreeze = 68;
  static const int LLVMFence = 55;
  static const int LLVMAtomicCmpXchg = 56;
  static const int LLVMAtomicRMW = 57;
  static const int LLVMResume = 58;
  static const int LLVMLandingPad = 59;
  static const int LLVMCleanupRet = 61;
  static const int LLVMCatchRet = 62;
  static const int LLVMCatchPad = 63;
  static const int LLVMCleanupPad = 64;
  static const int LLVMCatchSwitch = 65;
}

abstract class LLVMTypeKind {
  static const int LLVMVoidTypeKind = 0;
  static const int LLVMHalfTypeKind = 1;
  static const int LLVMFloatTypeKind = 2;
  static const int LLVMDoubleTypeKind = 3;
  static const int LLVMX86_FP80TypeKind = 4;
  static const int LLVMFP128TypeKind = 5;
  static const int LLVMPPC_FP128TypeKind = 6;
  static const int LLVMLabelTypeKind = 7;
  static const int LLVMIntegerTypeKind = 8;
  static const int LLVMFunctionTypeKind = 9;
  static const int LLVMStructTypeKind = 10;
  static const int LLVMArrayTypeKind = 11;
  static const int LLVMPointerTypeKind = 12;
  static const int LLVMVectorTypeKind = 13;
  static const int LLVMMetadataTypeKind = 14;
  static const int LLVMX86_MMXTypeKind = 15;
  static const int LLVMTokenTypeKind = 16;
  static const int LLVMScalableVectorTypeKind = 17;
  static const int LLVMBFloatTypeKind = 18;
  static const int LLVMX86_AMXTypeKind = 19;
  static const int LLVMTargetExtTypeKind = 20;
}

abstract class LLVMLinkage {
  static const int LLVMExternalLinkage = 0;
  static const int LLVMAvailableExternallyLinkage = 1;
  static const int LLVMLinkOnceAnyLinkage = 2;
  static const int LLVMLinkOnceODRLinkage = 3;
  static const int LLVMLinkOnceODRAutoHideLinkage = 4;
  static const int LLVMWeakAnyLinkage = 5;
  static const int LLVMWeakODRLinkage = 6;
  static const int LLVMAppendingLinkage = 7;
  static const int LLVMInternalLinkage = 8;
  static const int LLVMPrivateLinkage = 9;
  static const int LLVMDLLImportLinkage = 10;
  static const int LLVMDLLExportLinkage = 11;
  static const int LLVMExternalWeakLinkage = 12;
  static const int LLVMGhostLinkage = 13;
  static const int LLVMCommonLinkage = 14;
  static const int LLVMLinkerPrivateLinkage = 15;
  static const int LLVMLinkerPrivateWeakLinkage = 16;
}

abstract class LLVMVisibility {
  static const int LLVMDefaultVisibility = 0;
  static const int LLVMHiddenVisibility = 1;
  static const int LLVMProtectedVisibility = 2;
}

abstract class LLVMUnnamedAddr {
  static const int LLVMNoUnnamedAddr = 0;
  static const int LLVMLocalUnnamedAddr = 1;
  static const int LLVMGlobalUnnamedAddr = 2;
}

abstract class LLVMDLLStorageClass {
  static const int LLVMDefaultStorageClass = 0;
  static const int LLVMDLLImportStorageClass = 1;
  static const int LLVMDLLExportStorageClass = 2;
}

abstract class LLVMCallConv {
  static const int LLVMCCallConv = 0;
  static const int LLVMFastCallConv = 8;
  static const int LLVMColdCallConv = 9;
  static const int LLVMGHCCallConv = 10;
  static const int LLVMHiPECallConv = 11;
  static const int LLVMWebKitJSCallConv = 12;
  static const int LLVMAnyRegCallConv = 13;
  static const int LLVMPreserveMostCallConv = 14;
  static const int LLVMPreserveAllCallConv = 15;
  static const int LLVMSwiftCallConv = 16;
  static const int LLVMCXXFASTTLSCallConv = 17;
  static const int LLVMX86StdcallCallConv = 64;
  static const int LLVMX86FastcallCallConv = 65;
  static const int LLVMARMAPCSCallConv = 66;
  static const int LLVMARMAAPCSCallConv = 67;
  static const int LLVMARMAAPCSVFPCallConv = 68;
  static const int LLVMMSP430INTRCallConv = 69;
  static const int LLVMX86ThisCallCallConv = 70;
  static const int LLVMPTXKernelCallConv = 71;
  static const int LLVMPTXDeviceCallConv = 72;
  static const int LLVMSPIRFUNCCallConv = 75;
  static const int LLVMSPIRKERNELCallConv = 76;
  static const int LLVMIntelOCLBICallConv = 77;
  static const int LLVMX8664SysVCallConv = 78;
  static const int LLVMWin64CallConv = 79;
  static const int LLVMX86VectorCallCallConv = 80;
  static const int LLVMHHVMCallConv = 81;
  static const int LLVMHHVMCCallConv = 82;
  static const int LLVMX86INTRCallConv = 83;
  static const int LLVMAVRINTRCallConv = 84;
  static const int LLVMAVRSIGNALCallConv = 85;
  static const int LLVMAVRBUILTINCallConv = 86;
  static const int LLVMAMDGPUVSCallConv = 87;
  static const int LLVMAMDGPUGSCallConv = 88;
  static const int LLVMAMDGPUPSCallConv = 89;
  static const int LLVMAMDGPUCSCallConv = 90;
  static const int LLVMAMDGPUKERNELCallConv = 91;
  static const int LLVMX86RegCallCallConv = 92;
  static const int LLVMAMDGPUHSCallConv = 93;
  static const int LLVMMSP430BUILTINCallConv = 94;
  static const int LLVMAMDGPULSCallConv = 95;
  static const int LLVMAMDGPUESCallConv = 96;
}

abstract class LLVMValueKind {
  static const int LLVMArgumentValueKind = 0;
  static const int LLVMBasicBlockValueKind = 1;
  static const int LLVMMemoryUseValueKind = 2;
  static const int LLVMMemoryDefValueKind = 3;
  static const int LLVMMemoryPhiValueKind = 4;
  static const int LLVMFunctionValueKind = 5;
  static const int LLVMGlobalAliasValueKind = 6;
  static const int LLVMGlobalIFuncValueKind = 7;
  static const int LLVMGlobalVariableValueKind = 8;
  static const int LLVMBlockAddressValueKind = 9;
  static const int LLVMConstantExprValueKind = 10;
  static const int LLVMConstantArrayValueKind = 11;
  static const int LLVMConstantStructValueKind = 12;
  static const int LLVMConstantVectorValueKind = 13;
  static const int LLVMUndefValueValueKind = 14;
  static const int LLVMConstantAggregateZeroValueKind = 15;
  static const int LLVMConstantDataArrayValueKind = 16;
  static const int LLVMConstantDataVectorValueKind = 17;
  static const int LLVMConstantIntValueKind = 18;
  static const int LLVMConstantFPValueKind = 19;
  static const int LLVMConstantPointerNullValueKind = 20;
  static const int LLVMConstantTokenNoneValueKind = 21;
  static const int LLVMMetadataAsValueValueKind = 22;
  static const int LLVMInlineAsmValueKind = 23;
  static const int LLVMInstructionValueKind = 24;
  static const int LLVMPoisonValueValueKind = 25;
  static const int LLVMConstantTargetNoneValueKind = 26;
}

abstract class LLVMIntPredicate {
  static const int LLVMIntEQ = 32;
  static const int LLVMIntNE = 33;
  static const int LLVMIntUGT = 34;
  static const int LLVMIntUGE = 35;
  static const int LLVMIntULT = 36;
  static const int LLVMIntULE = 37;
  static const int LLVMIntSGT = 38;
  static const int LLVMIntSGE = 39;
  static const int LLVMIntSLT = 40;
  static const int LLVMIntSLE = 41;
}

abstract class LLVMRealPredicate {
  static const int LLVMRealPredicateFalse = 0;
  static const int LLVMRealOEQ = 1;
  static const int LLVMRealOGT = 2;
  static const int LLVMRealOGE = 3;
  static const int LLVMRealOLT = 4;
  static const int LLVMRealOLE = 5;
  static const int LLVMRealONE = 6;
  static const int LLVMRealORD = 7;
  static const int LLVMRealUNO = 8;
  static const int LLVMRealUEQ = 9;
  static const int LLVMRealUGT = 10;
  static const int LLVMRealUGE = 11;
  static const int LLVMRealULT = 12;
  static const int LLVMRealULE = 13;
  static const int LLVMRealUNE = 14;
  static const int LLVMRealPredicateTrue = 15;
}

abstract class LLVMLandingPadClauseTy {
  static const int LLVMLandingPadCatch = 0;
  static const int LLVMLandingPadFilter = 1;
}

abstract class LLVMThreadLocalMode {
  static const int LLVMNotThreadLocal = 0;
  static const int LLVMGeneralDynamicTLSModel = 1;
  static const int LLVMLocalDynamicTLSModel = 2;
  static const int LLVMInitialExecTLSModel = 3;
  static const int LLVMLocalExecTLSModel = 4;
}

abstract class LLVMAtomicOrdering {
  static const int LLVMAtomicOrderingNotAtomic = 0;
  static const int LLVMAtomicOrderingUnordered = 1;
  static const int LLVMAtomicOrderingMonotonic = 2;
  static const int LLVMAtomicOrderingAcquire = 4;
  static const int LLVMAtomicOrderingRelease = 5;
  static const int LLVMAtomicOrderingAcquireRelease = 6;
  static const int LLVMAtomicOrderingSequentiallyConsistent = 7;
}

abstract class LLVMAtomicRMWBinOp {
  static const int LLVMAtomicRMWBinOpXchg = 0;
  static const int LLVMAtomicRMWBinOpAdd = 1;
  static const int LLVMAtomicRMWBinOpSub = 2;
  static const int LLVMAtomicRMWBinOpAnd = 3;
  static const int LLVMAtomicRMWBinOpNand = 4;
  static const int LLVMAtomicRMWBinOpOr = 5;
  static const int LLVMAtomicRMWBinOpXor = 6;
  static const int LLVMAtomicRMWBinOpMax = 7;
  static const int LLVMAtomicRMWBinOpMin = 8;
  static const int LLVMAtomicRMWBinOpUMax = 9;
  static const int LLVMAtomicRMWBinOpUMin = 10;
  static const int LLVMAtomicRMWBinOpFAdd = 11;
  static const int LLVMAtomicRMWBinOpFSub = 12;
  static const int LLVMAtomicRMWBinOpFMax = 13;
  static const int LLVMAtomicRMWBinOpFMin = 14;
}

abstract class LLVMDiagnosticSeverity {
  static const int LLVMDSError = 0;
  static const int LLVMDSWarning = 1;
  static const int LLVMDSRemark = 2;
  static const int LLVMDSNote = 3;
}

abstract class LLVMInlineAsmDialect {
  static const int LLVMInlineAsmDialectATT = 0;
  static const int LLVMInlineAsmDialectIntel = 1;
}

abstract class LLVMModuleFlagBehavior {
  static const int LLVMModuleFlagBehaviorError = 0;
  static const int LLVMModuleFlagBehaviorWarning = 1;
  static const int LLVMModuleFlagBehaviorRequire = 2;
  static const int LLVMModuleFlagBehaviorOverride = 3;
  static const int LLVMModuleFlagBehaviorAppend = 4;
  static const int LLVMModuleFlagBehaviorAppendUnique = 5;
}

typedef LLVMPassRegistryRef = ffi.Pointer<LLVMOpaquePassRegistry>;

class LLVMOpaquePassRegistry extends ffi.Opaque {}

typedef LLVMContextRef = ffi.Pointer<LLVMOpaqueContext>;

class LLVMOpaqueContext extends ffi.Opaque {}

typedef LLVMDiagnosticHandler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(LLVMDiagnosticInfoRef, ffi.Pointer<ffi.Void>)>>;
typedef LLVMDiagnosticInfoRef = ffi.Pointer<LLVMOpaqueDiagnosticInfo>;

class LLVMOpaqueDiagnosticInfo extends ffi.Opaque {}

typedef LLVMYieldCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(LLVMContextRef, ffi.Pointer<ffi.Void>)>>;
typedef LLVMBool = ffi.Int;
typedef LLVMAttributeRef = ffi.Pointer<LLVMOpaqueAttributeRef>;

class LLVMOpaqueAttributeRef extends ffi.Opaque {}

typedef LLVMTypeRef = ffi.Pointer<LLVMOpaqueType>;

class LLVMOpaqueType extends ffi.Opaque {}

typedef LLVMModuleRef = ffi.Pointer<LLVMOpaqueModule>;

class LLVMOpaqueModule extends ffi.Opaque {}

typedef LLVMModuleFlagEntry = LLVMOpaqueModuleFlagEntry;

class LLVMOpaqueModuleFlagEntry extends ffi.Opaque {}

typedef LLVMMetadataRef = ffi.Pointer<LLVMOpaqueMetadata>;

class LLVMOpaqueMetadata extends ffi.Opaque {}

typedef LLVMValueRef = ffi.Pointer<LLVMOpaqueValue>;

class LLVMOpaqueValue extends ffi.Opaque {}

typedef LLVMNamedMDNodeRef = ffi.Pointer<LLVMOpaqueNamedMDNode>;

class LLVMOpaqueNamedMDNode extends ffi.Opaque {}

typedef LLVMUseRef = ffi.Pointer<LLVMOpaqueUse>;

class LLVMOpaqueUse extends ffi.Opaque {}

typedef LLVMBasicBlockRef = ffi.Pointer<LLVMOpaqueBasicBlock>;

class LLVMOpaqueBasicBlock extends ffi.Opaque {}

typedef LLVMValueMetadataEntry = LLVMOpaqueValueMetadataEntry;

class LLVMOpaqueValueMetadataEntry extends ffi.Opaque {}

typedef LLVMAttributeIndex = ffi.UnsignedInt;
typedef LLVMBuilderRef = ffi.Pointer<LLVMOpaqueBuilder>;

class LLVMOpaqueBuilder extends ffi.Opaque {}

typedef LLVMModuleProviderRef = ffi.Pointer<LLVMOpaqueModuleProvider>;

class LLVMOpaqueModuleProvider extends ffi.Opaque {}

typedef LLVMMemoryBufferRef = ffi.Pointer<LLVMOpaqueMemoryBuffer>;

class LLVMOpaqueMemoryBuffer extends ffi.Opaque {}

typedef LLVMPassManagerRef = ffi.Pointer<LLVMOpaquePassManager>;

class LLVMOpaquePassManager extends ffi.Opaque {}

class KOpaqueModule extends ffi.Opaque {}

typedef KModuleRef = ffi.Pointer<KOpaqueModule>;

class LLVMOpaqueTargetMachine extends ffi.Opaque {}

class LLVMTarget extends ffi.Opaque {}

abstract class LLVMCodeGenOptLevel {
  static const int LLVMCodeGenLevelNone = 0;
  static const int LLVMCodeGenLevelLess = 1;
  static const int LLVMCodeGenLevelDefault = 2;
  static const int LLVMCodeGenLevelAggressive = 3;
}

abstract class LLVMRelocMode {
  static const int LLVMRelocDefault = 0;
  static const int LLVMRelocStatic = 1;
  static const int LLVMRelocPIC = 2;
  static const int LLVMRelocDynamicNoPic = 3;
  static const int LLVMRelocROPI = 4;
  static const int LLVMRelocRWPI = 5;
  static const int LLVMRelocROPI_RWPI = 6;
}

abstract class LLVMCodeModel {
  static const int LLVMCodeModelDefault = 0;
  static const int LLVMCodeModelJITDefault = 1;
  static const int LLVMCodeModelTiny = 2;
  static const int LLVMCodeModelSmall = 3;
  static const int LLVMCodeModelKernel = 4;
  static const int LLVMCodeModelMedium = 5;
  static const int LLVMCodeModelLarge = 6;
}

abstract class LLVMCodeGenFileType {
  static const int LLVMAssemblyFile = 0;
  static const int LLVMObjectFile = 1;
}

typedef LLVMTargetRef = ffi.Pointer<LLVMTarget>;

/// @addtogroup LLVMCTarget
///
/// @{
typedef LLVMTargetMachineRef = ffi.Pointer<LLVMOpaqueTargetMachine>;
typedef LLVMTargetDataRef = ffi.Pointer<LLVMOpaqueTargetData>;

class LLVMOpaqueTargetData extends ffi.Opaque {}

const int LLVMAttributeReturnIndex = 0;

const int LLVMAttributeFunctionIndex = -1;
